!function(){"use strict";var t={5964:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDefaultParameterId=void 0,e.CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var a,s=o(i(5964));(a=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).HitAreaBody=s.CubismDefaultParameterId.HitAreaBody,a.HitAreaHead=s.CubismDefaultParameterId.HitAreaHead,a.HitAreaPrefix=s.CubismDefaultParameterId.HitAreaPrefix,a.ParamAngleX=s.CubismDefaultParameterId.ParamAngleX,a.ParamAngleY=s.CubismDefaultParameterId.ParamAngleY,a.ParamAngleZ=s.CubismDefaultParameterId.ParamAngleZ,a.ParamArmLA=s.CubismDefaultParameterId.ParamArmLA,a.ParamArmLB=s.CubismDefaultParameterId.ParamArmLB,a.ParamArmRA=s.CubismDefaultParameterId.ParamArmRA,a.ParamArmRB=s.CubismDefaultParameterId.ParamArmRB,a.ParamBaseX=s.CubismDefaultParameterId.ParamBaseX,a.ParamBaseY=s.CubismDefaultParameterId.ParamBaseY,a.ParamBodyAngleX=s.CubismDefaultParameterId.ParamBodyAngleX,a.ParamBodyAngleY=s.CubismDefaultParameterId.ParamBodyAngleY,a.ParamBodyAngleZ=s.CubismDefaultParameterId.ParamBodyAngleZ,a.ParamBreath=s.CubismDefaultParameterId.ParamBreath,a.ParamBrowLAngle=s.CubismDefaultParameterId.ParamBrowLAngle,a.ParamBrowLForm=s.CubismDefaultParameterId.ParamBrowLForm,a.ParamBrowLX=s.CubismDefaultParameterId.ParamBrowLX,a.ParamBrowLY=s.CubismDefaultParameterId.ParamBrowLY,a.ParamBrowRAngle=s.CubismDefaultParameterId.ParamBrowRAngle,a.ParamBrowRForm=s.CubismDefaultParameterId.ParamBrowRForm,a.ParamBrowRX=s.CubismDefaultParameterId.ParamBrowRX,a.ParamBrowRY=s.CubismDefaultParameterId.ParamBrowRY,a.ParamBustX=s.CubismDefaultParameterId.ParamBustX,a.ParamBustY=s.CubismDefaultParameterId.ParamBustY,a.ParamCheek=s.CubismDefaultParameterId.ParamCheek,a.ParamEyeBallForm=s.CubismDefaultParameterId.ParamEyeBallForm,a.ParamEyeBallX=s.CubismDefaultParameterId.ParamEyeBallX,a.ParamEyeBallY=s.CubismDefaultParameterId.ParamEyeBallY,a.ParamEyeLOpen=s.CubismDefaultParameterId.ParamEyeLOpen,a.ParamEyeLSmile=s.CubismDefaultParameterId.ParamEyeLSmile,a.ParamEyeROpen=s.CubismDefaultParameterId.ParamEyeROpen,a.ParamEyeRSmile=s.CubismDefaultParameterId.ParamEyeRSmile,a.ParamHairBack=s.CubismDefaultParameterId.ParamHairBack,a.ParamHairFluffy=s.CubismDefaultParameterId.ParamHairFluffy,a.ParamHairFront=s.CubismDefaultParameterId.ParamHairFront,a.ParamHairSide=s.CubismDefaultParameterId.ParamHairSide,a.ParamHandL=s.CubismDefaultParameterId.ParamHandL,a.ParamHandR=s.CubismDefaultParameterId.ParamHandR,a.ParamMouthForm=s.CubismDefaultParameterId.ParamMouthForm,a.ParamMouthOpenY=s.CubismDefaultParameterId.ParamMouthOpenY,a.ParamNONE=s.CubismDefaultParameterId.ParamNONE,a.ParamShoulderY=s.CubismDefaultParameterId.ParamShoulderY,a.PartsArmLPrefix=s.CubismDefaultParameterId.PartsArmLPrefix,a.PartsArmPrefix=s.CubismDefaultParameterId.PartsArmPrefix,a.PartsArmRPrefix=s.CubismDefaultParameterId.PartsArmRPrefix,a.PartsIdCore=s.CubismDefaultParameterId.PartsIdCore},9751:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_OFF=e.CSM_LOG_LEVEL_ERROR=e.CSM_LOG_LEVEL_WARNING=e.CSM_LOG_LEVEL_INFO=e.CSM_LOG_LEVEL_DEBUG=e.CSM_LOG_LEVEL_VERBOSE=void 0,e.CSM_LOG_LEVEL_VERBOSE=0,e.CSM_LOG_LEVEL_DEBUG=1,e.CSM_LOG_LEVEL_INFO=2,e.CSM_LOG_LEVEL_WARNING=3,e.CSM_LOG_LEVEL_ERROR=4,e.CSM_LOG_LEVEL_OFF=5,e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_VERBOSE},9394:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelSettingJson=void 0;var u,l=i(4574),h=i(9007),c=i(1502),p=i(9680),d="FileReferences",g="UserData",_="Name",m="File",f="Ids",y="Sound",v="FadeInTime",b="FadeOutTime",C="LipSync",S="EyeBlink";!function(t){t[t.FrequestNode_Groups=0]="FrequestNode_Groups",t[t.FrequestNode_Moc=1]="FrequestNode_Moc",t[t.FrequestNode_Motions=2]="FrequestNode_Motions",t[t.FrequestNode_Expressions=3]="FrequestNode_Expressions",t[t.FrequestNode_Textures=4]="FrequestNode_Textures",t[t.FrequestNode_Physics=5]="FrequestNode_Physics",t[t.FrequestNode_Pose=6]="FrequestNode_Pose",t[t.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(u||(u={}));var P=function(t){function e(e,i){var r=t.call(this)||this;return r._json=p.CubismJson.create(e,i),r._json&&(r._jsonValue=new c.csmVector,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return n(e,t),e.prototype.release=function(){p.CubismJson.delete(this._json),this._jsonValue=null},e.prototype.GetJson=function(){return this._json},e.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(u.FrequestNode_Moc).getRawString():""},e.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(u.FrequestNode_Textures).getSize():0},e.prototype.getTextureDirectory=function(){return this._jsonValue.at(u.FrequestNode_Textures).getRawString()},e.prototype.getTextureFileName=function(t){return this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(t).getRawString()},e.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(u.FrequestNode_HitAreas).getSize():0},e.prototype.getHitAreaId=function(t){return h.CubismFramework.getIdManager().getId(this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString("Id").getRawString())},e.prototype.getHitAreaName=function(t){return this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString(_).getRawString()},e.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(u.FrequestNode_Physics).getRawString():""},e.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(u.FrequestNode_Pose).getRawString():""},e.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(u.FrequestNode_Expressions).getSize():0},e.prototype.getExpressionName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(_).getRawString()},e.prototype.getExpressionFileName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(m).getRawString()},e.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().getSize():0},e.prototype.getMotionGroupName=function(t){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().at(t):null},e.prototype.getMotionCount=function(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getSize():0},e.prototype.getMotionFileName=function(t,e){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(m).getRawString():""},e.prototype.getMotionSoundFileName=function(t,e){return this.isExistMotionSoundFile(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y).getRawString():""},e.prototype.getMotionFadeInTimeValue=function(t,e){return this.isExistMotionFadeIn(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v).toFloat():-1},e.prototype.getMotionFadeOutTimeValue=function(t,e){return this.isExistMotionFadeOut(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b).toFloat():-1},e.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(d).getValueByString(g).getRawString():""},e.prototype.getLayoutMap=function(t){var e=this._json.getRoot().getValueByString("Layout").getMap();if(null==e)return!1;for(var i=!1,r=e.begin();r.notEqual(e.end());r.preIncrement())t.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},e.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==S){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getEyeBlinkParameterId=function(t){if(!this.isExistEyeBlinkParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==S)return h.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getLipSyncParameterId=function(t){if(!this.isExistLipSyncParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C)return h.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.isExistModelFile=function(){var t=this._jsonValue.at(u.FrequestNode_Moc);return!t.isNull()&&!t.isError()},e.prototype.isExistTextureFiles=function(){var t=this._jsonValue.at(u.FrequestNode_Textures);return!t.isNull()&&!t.isError()},e.prototype.isExistHitAreas=function(){var t=this._jsonValue.at(u.FrequestNode_HitAreas);return!t.isNull()&&!t.isError()},e.prototype.isExistPhysicsFile=function(){var t=this._jsonValue.at(u.FrequestNode_Physics);return!t.isNull()&&!t.isError()},e.prototype.isExistPoseFile=function(){var t=this._jsonValue.at(u.FrequestNode_Pose);return!t.isNull()&&!t.isError()},e.prototype.isExistExpressionFile=function(){var t=this._jsonValue.at(u.FrequestNode_Expressions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroups=function(){var t=this._jsonValue.at(u.FrequestNode_Motions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroupName=function(t){var e=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t);return!e.isNull()&&!e.isError()},e.prototype.isExistMotionSoundFile=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeIn=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeOut=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b);return!i.isNull()&&!i.isError()},e.prototype.isExistUserDataFile=function(){var t=this._json.getRoot().getValueByString(d).getValueByString(g);return!t.isNull()&&!t.isError()},e.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(_).getRawString()==S)return!0;return!1},e.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(_).getRawString()==C)return!0;return!1},e}(l.ICubismModelSetting);e.CubismModelSettingJson=P;var M=s(i(9394));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelSettingJson=M.CubismModelSettingJson},8950:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.BreathParameterData=e.CubismBreath=void 0;var a=function(){function t(){this._currentTime=0}return t.create=function(){return new t},t.delete=function(t){null!=t&&(t=null)},t.prototype.setParameters=function(t){this._breathParameters=t},t.prototype.getParameters=function(){return this._breathParameters},t.prototype.updateParameters=function(t,e){this._currentTime+=e;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var n=this._breathParameters.at(r);t.addParameterValueById(n.parameterId,n.offset+n.peak*Math.sin(i/n.cycle),n.weight)}},t}();e.CubismBreath=a;e.BreathParameterData=function(t,e,i,r,n){this.parameterId=null==t?null:t,this.offset=null==e?0:e,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==n?0:n};var s,u=o(i(8950));(s=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).BreathParameterData=u.BreathParameterData,s.CubismBreath=u.CubismBreath},8980:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EyeState=e.CubismEyeBlink=void 0;var a,s=i(1502),u=function(){function t(t){if(this._blinkingState=a.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new s.csmVector,null!=t)for(var e=0;e<t.getEyeBlinkParameterCount();++e)this._parameterIds.pushBack(t.getEyeBlinkParameterId(e))}return t.create=function(e){return void 0===e&&(e=null),new t(e)},t.delete=function(t){null!=t&&(t=null)},t.prototype.setBlinkingInterval=function(t){this._blinkingIntervalSeconds=t},t.prototype.setBlinkingSetting=function(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i},t.prototype.setParameterIds=function(t){this._parameterIds=t},t.prototype.getParameterIds=function(){return this._parameterIds},t.prototype.updateParameters=function(e,i){var r;this._userTimeSeconds+=i;var n=0;switch(this._blinkingState){case a.EyeState_Closing:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),r=1-n;break;case a.EyeState_Closed:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=a.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),r=0;break;case a.EyeState_Opening:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),r=n;break;case a.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=a.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),r=1;break;case a.EyeState_First:default:this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),r=1}t.CloseIfZero||(r=-r);for(var o=0;o<this._parameterIds.getSize();++o)e.setParameterValueById(this._parameterIds.at(o),r)},t.prototype.determinNextBlinkingTiming=function(){var t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)},t.CloseIfZero=!0,t}();e.CubismEyeBlink=u,function(t){t[t.EyeState_First=0]="EyeState_First",t[t.EyeState_Interval=1]="EyeState_Interval",t[t.EyeState_Closing=2]="EyeState_Closing",t[t.EyeState_Closed=3]="EyeState_Closed",t[t.EyeState_Opening=4]="EyeState_Opening"}(a=e.EyeState||(e.EyeState={}));var l,h=o(i(8980));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismEyeBlink=h.CubismEyeBlink,l.EyeState=h.EyeState},5450:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.PartData=e.CubismPose=void 0;var a=i(9007),s=i(1502),u=i(9680),l="FadeInTime",h="Link",c=function(){function t(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s.csmVector,this._partGroupCounts=new s.csmVector}return t.create=function(e,i){var r=new t,n=u.CubismJson.create(e,i),o=n.getRoot();o.getValueByString(l).isNull()||(r._fadeTimeSeconds=o.getValueByString(l).toFloat(.5),r._fadeTimeSeconds<=0&&(r._fadeTimeSeconds=.5));for(var s=o.getValueByString("Groups"),c=s.getSize(),d=0;d<c;++d){for(var g=s.getValueByIndex(d),_=g.getSize(),m=0,f=0;f<_;++f){var y=g.getValueByIndex(f),v=new p,b=a.CubismFramework.getIdManager().getId(y.getValueByString("Id").getRawString());if(v.partId=b,!y.getValueByString(h).isNull())for(var C=y.getValueByString(h),S=C.getSize(),P=0;P<S;++P){var M=new p,x=a.CubismFramework.getIdManager().getId(C.getValueByIndex(P).getString());M.partId=x,v.link.pushBack(M)}r._partGroups.pushBack(v.clone()),++m}r._partGroupCounts.pushBack(m)}return u.CubismJson.delete(n),r},t.delete=function(t){null!=t&&(t=null)},t.prototype.updateParameters=function(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var n=this._partGroupCounts.at(r);this.doFade(t,e,i,n),i+=n}this.copyPartOpacities(t)},t.prototype.reset=function(t){for(var e=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),n=e;n<e+r;++n){this._partGroups.at(n).initialize(t);var o=this._partGroups.at(n).partIndex,a=this._partGroups.at(n).parameterIndex;if(!(o<0)){t.setPartOpacityByIndex(o,n==e?1:0),t.setParameterValueByIndex(a,n==e?1:0);for(var s=0;s<this._partGroups.at(n).link.getSize();++s)this._partGroups.at(n).link.at(s).initialize(t)}}e+=r}},t.prototype.copyPartOpacities=function(t){for(var e=0;e<this._partGroups.getSize();++e){var i=this._partGroups.at(e);if(0!=i.link.getSize())for(var r=this._partGroups.at(e).partIndex,n=t.getPartOpacityByIndex(r),o=0;o<i.link.getSize();++o){var a=i.link.at(o).partIndex;a<0||t.setPartOpacityByIndex(a,n)}}},t.prototype.doFade=function(t,e,i,r){for(var n=-1,o=1,a=i;a<i+r;++a){var s=this._partGroups.at(a).partIndex,u=this._partGroups.at(a).parameterIndex;if(t.getParameterValueByIndex(u)>.001){if(n>=0)break;n=a,o=t.getPartOpacityByIndex(s),(o+=e/this._fadeTimeSeconds)>1&&(o=1)}}for(n<0&&(n=0,o=1),a=i;a<i+r;++a){var l=this._partGroups.at(a).partIndex;if(n==a)t.setPartOpacityByIndex(l,o);else{var h=t.getPartOpacityByIndex(l),c=void 0;(1-(c=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(c=1-.15/(1-o)),h>c&&(h=c),t.setPartOpacityByIndex(l,h)}}},t}();e.CubismPose=c;var p=function(){function t(t){if(this.parameterIndex=0,this.partIndex=0,this.link=new s.csmVector,null!=t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone())}}return t.prototype.assignment=function(t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this},t.prototype.initialize=function(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)},t.prototype.clone=function(){var e=new t;e.partId=this.partId,e.parameterIndex=this.parameterIndex,e.partIndex=this.partIndex,e.link=new s.csmVector;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())e.link.pushBack(i.ptr().clone());return e},t}();e.PartData=p;var d,g=o(i(5450));(d=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPose=g.CubismPose,d.PartData=g.PartData},4574:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ICubismModelSetting=void 0;e.ICubismModelSetting=function(){};var a=o(i(4574));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ICubismModelSetting=a.ICubismModelSetting},9986:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismId=void 0;var a=i(1300),s=function(){function t(t){this._id="string"!=typeof t?t:new a.csmString(t)}return t.prototype.getString=function(){return this._id},t.prototype.isEqual=function(e){return"string"==typeof e?this._id.isEqual(e):e instanceof a.csmString?this._id.isEqual(e.s):e instanceof t&&this._id.isEqual(e._id.s)},t.prototype.isNotEqual=function(e){return"string"==typeof e?!this._id.isEqual(e):e instanceof a.csmString?!this._id.isEqual(e.s):e instanceof t&&!this._id.isEqual(e._id.s)},t}();e.CubismId=s;var u=o(i(9986));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismId=u.CubismId},5553:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismIdManager=void 0;var a=i(1502),s=i(9986),u=function(){function t(){this._ids=new a.csmVector}return t.prototype.release=function(){for(var t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null},t.prototype.registerIds=function(t){for(var e=0;e<t.length;e++)this.registerId(t[e])},t.prototype.registerId=function(t){var e=null;return"string"!=typeof t?this.registerId(t.s):(null!=(e=this.findId(t))||(e=new s.CubismId(t),this._ids.pushBack(e)),e)},t.prototype.getId=function(t){return this.registerId(t)},t.prototype.isExist=function(t){return"string"==typeof t?null!=this.findId(t):this.isExist(t.s)},t.prototype.findId=function(t){for(var e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null},t}();e.CubismIdManager=u;var l=o(i(5553));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismIdManager=l.CubismIdManager},9007:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.LogLevel=e.Option=e.CubismFramework=e.csmDelete=e.Constant=e.strtod=void 0;var a=i(5553),s=i(652),u=i(6734),l=i(9680);e.strtod=function(t,e){for(var i=0,r=1;;r++){var n=t.slice(r-1,r);if("e"!=n&&"-"!=n&&"E"!=n){var o=t.substring(0,r),a=Number(o);if(isNaN(a))break;i=r}}var s=parseFloat(t);return isNaN(s)&&(s=NaN),e[0]=t.slice(i),s};var h=!1,c=!1,p=null,d=null;e.Constant=Object.freeze({vertexOffset:0,vertexStep:2}),e.csmDelete=function(t){t&&(t=void 0)};var g=function(){function t(){}return t.startUp=function(t){if(void 0===t&&(t=null),h)return(0,u.CubismLogInfo)("CubismFramework.startUp() is already done."),h;if(null!=(p=t)&&Live2DCubismCore.Logging.csmSetLogFunction(p.logFunction),h=!0){var e=Live2DCubismCore.Version.csmGetVersion(),i=(4278190080&e)>>24,r=(16711680&e)>>16,n=65535&e,o=e;(0,u.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+r).slice(-2),("0000"+n).slice(-4),o)}return(0,u.CubismLogInfo)("CubismFramework.startUp() is complete."),h},t.cleanUp=function(){h=!1,c=!1,p=null,d=null},t.initialize=function(){(0,u.CSM_ASSERT)(h),h?c?(0,u.CubismLogWarning)("CubismFramework.initialize() skipped, already initialized."):(l.Value.staticInitializeNotForClientCall(),d=new a.CubismIdManager,c=!0,(0,u.CubismLogInfo)("CubismFramework.initialize() is complete.")):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.dispose=function(){(0,u.CSM_ASSERT)(h),h?c?(l.Value.staticReleaseNotForClientCall(),d.release(),d=null,s.CubismRenderer.staticRelease(),c=!1,(0,u.CubismLogInfo)("CubismFramework.dispose() is complete.")):(0,u.CubismLogWarning)("CubismFramework.dispose() skipped, not initialized."):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.isStarted=function(){return h},t.isInitialized=function(){return c},t.coreLogFunction=function(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)},t.getLoggingLevel=function(){return null!=p?p.loggingLevel:_.LogLevel_Off},t.getIdManager=function(){return d},t}();e.CubismFramework=g;var _;e.Option=function(){},function(t){t[t.LogLevel_Verbose=0]="LogLevel_Verbose",t[t.LogLevel_Debug=1]="LogLevel_Debug",t[t.LogLevel_Info=2]="LogLevel_Info",t[t.LogLevel_Warning=3]="LogLevel_Warning",t[t.LogLevel_Error=4]="LogLevel_Error",t[t.LogLevel_Off=5]="LogLevel_Off"}(_=e.LogLevel||(e.LogLevel={}));var m,f=o(i(9007));(m=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).Constant=f.Constant,m.csmDelete=f.csmDelete,m.CubismFramework=f.CubismFramework},9940:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMath=void 0;var a=i(876),s=function(){function t(){}return t.range=function(t,e,i){return t<e?t=e:t>i&&(t=i),t},t.sin=function(t){return Math.sin(t)},t.cos=function(t){return Math.cos(t)},t.abs=function(t){return Math.abs(t)},t.sqrt=function(t){return Math.sqrt(t)},t.cbrt=function(t){if(0===t)return t;var e,i=t,r=i<0;return r&&(i=-i),e=i===1/0?1/0:(i/((e=Math.exp(Math.log(i)/3))*e)+2*e)/3,r?-e:e},t.getEasingSine=function(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)},t.max=function(t,e){return t>e?t:e},t.min=function(t,e){return t>e?e:t},t.degreesToRadian=function(t){return t/180*Math.PI},t.radianToDegrees=function(t){return 180*t/Math.PI},t.directionToRadian=function(t,e){for(var i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},t.directionToDegrees=function(t,e){var i=this.directionToRadian(t,e),r=this.radianToDegrees(i);return e.x-t.x>0&&(r=-r),r},t.radianToDirection=function(t){var e=new a.CubismVector2;return e.x=this.sin(t),e.y=this.cos(t),e},t.quadraticEquation=function(e,i,r){return this.abs(e)<t.Epsilon?this.abs(i)<t.Epsilon?-r:-r/i:-(i+this.sqrt(i*i-4*e*r))/(2*e)},t.cardanoAlgorithmForBezier=function(e,i,r,n){if(this.sqrt(e)<t.Epsilon)return this.range(this.quadraticEquation(i,r,n),0,1);var o=i/e,a=r/e,s=(3*a-o*o)/3,u=s/3,l=(2*o*o*o-9*o*a+n/e*27)/27,h=l/2,c=h*h+u*u*u,p=.51;if(c<0){var d=-s/3,g=d*d*d,_=this.sqrt(g),m=-l/(2*_),f=this.range(m,-1,1),y=Math.acos(f),v=2*this.cbrt(_),b=v*this.cos(y/3)-o/3;if(this.abs(b-.5)<p)return this.range(b,0,1);var C=v*this.cos((y+2*Math.PI)/3)-o/3;if(this.abs(C-.5)<p)return this.range(C,0,1);var S=v*this.cos((y+4*Math.PI)/3)-o/3;return this.range(S,0,1)}if(0==c){var P,M=2*(P=h<0?this.cbrt(-h):-this.cbrt(h))-o/3;return this.abs(M-.5)<p?this.range(M,0,1):(C=-P-o/3,this.range(C,0,1))}var x=this.sqrt(c),B=this.cbrt(x-h)-this.cbrt(x+h)-o/3;return this.range(B,0,1)},t.Epsilon=1e-5,t}();e.CubismMath=s;var u=o(i(9940));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMath=u.CubismMath},1580:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMatrix44=void 0;var a=function(){function t(){this._tr=new Float32Array(16),this.loadIdentity()}return t.multiply=function(t,e,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=0;n<4;++n)for(var o=0;o<4;++o)for(var a=0;a<4;++a)r[o+4*n]+=t[a+4*n]*e[o+4*a];for(n=0;n<16;++n)i[n]=r[n]},t.prototype.loadIdentity=function(){var t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)},t.prototype.setMatrix=function(t){for(var e=0;e<16;++e)this._tr[e]=t[e]},t.prototype.getArray=function(){return this._tr},t.prototype.getScaleX=function(){return this._tr[0]},t.prototype.getScaleY=function(){return this._tr[5]},t.prototype.getTranslateX=function(){return this._tr[12]},t.prototype.getTranslateY=function(){return this._tr[13]},t.prototype.transformX=function(t){return this._tr[0]*t+this._tr[12]},t.prototype.transformY=function(t){return this._tr[5]*t+this._tr[13]},t.prototype.invertTransformX=function(t){return(t-this._tr[12])/this._tr[0]},t.prototype.invertTransformY=function(t){return(t-this._tr[13])/this._tr[5]},t.prototype.translateRelative=function(e,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,i,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.translate=function(t,e){this._tr[12]=t,this._tr[13]=e},t.prototype.translateX=function(t){this._tr[12]=t},t.prototype.translateY=function(t){this._tr[13]=t},t.prototype.scaleRelative=function(e,i){var r=new Float32Array([e,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.scale=function(t,e){this._tr[0]=t,this._tr[5]=e},t.prototype.multiplyByMatrix=function(e){t.multiply(e.getArray(),this._tr,this._tr)},t.prototype.clone=function(){for(var e=new t,i=0;i<this._tr.length;i++)e._tr[i]=this._tr[i];return e},t}();e.CubismMatrix44=a;var s=o(i(1580));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMatrix44=s.CubismMatrix44},3179:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelMatrix=void 0;var u=function(t){function e(e,i){var r=t.call(this)||this;return r._width=void 0!==e?e:0,r._height=void 0!==i?i:0,r.setHeight(2),r}return n(e,t),e.prototype.setWidth=function(t){var e=t/this._width,i=e;this.scale(e,i)},e.prototype.setHeight=function(t){var e=t/this._height,i=e;this.scale(e,i)},e.prototype.setPosition=function(t,e){this.translate(t,e)},e.prototype.setCenterPosition=function(t,e){this.centerX(t),this.centerY(e)},e.prototype.top=function(t){this.setY(t)},e.prototype.bottom=function(t){var e=this._height*this.getScaleY();this.translateY(t-e)},e.prototype.left=function(t){this.setX(t)},e.prototype.right=function(t){var e=this._width*this.getScaleX();this.translateX(t-e)},e.prototype.centerX=function(t){var e=this._width*this.getScaleX();this.translateX(t-e/2)},e.prototype.setX=function(t){this.translateX(t)},e.prototype.centerY=function(t){var e=this._height*this.getScaleY();this.translateY(t-e/2)},e.prototype.setY=function(t){this.translateY(t)},e.prototype.setupFromLayout=function(t){for(var e=t.begin();e.notEqual(t.end());e.preIncrement()){var i=e.ptr().first,r=e.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(e=t.begin();e.notEqual(t.end());e.preIncrement())i=e.ptr().first,r=e.ptr().second,"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)},e}(i(1580).CubismMatrix44);e.CubismModelMatrix=u;var l=s(i(3179));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelMatrix=l.CubismModelMatrix},6158:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTargetPoint=void 0;var a=i(9940),s=function(){function t(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return t.prototype.update=function(t){this._userTimeSeconds+=t;var e=4/30;if(0!=this._lastTimeSeconds){var i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var r=i*e/4.5,n=this._faceTargetX-this._faceX,o=this._faceTargetY-this._faceY;if(!(a.CubismMath.abs(n)<=.01&&a.CubismMath.abs(o)<=.01)){var s=a.CubismMath.sqrt(n*n+o*o),u=e*o/s,l=e*n/s-this._faceVX,h=u-this._faceVY,c=a.CubismMath.sqrt(l*l+h*h);(c<-r||c>r)&&(l*=r/c,h*=r/c),this._faceVX+=l,this._faceVY+=h;var p=.5*(a.CubismMath.sqrt(r*r+16*r*s-8*r*s)-r),d=a.CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);d>p&&(this._faceVX*=p/d,this._faceVY*=p/d),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},t.prototype.getX=function(){return this._faceX},t.prototype.getY=function(){return this._faceY},t.prototype.set=function(t,e){this._faceTargetX=t,this._faceTargetY=e},t}();e.CubismTargetPoint=s;var u=o(i(6158));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismTargetPoint=u.CubismTargetPoint},876:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismVector2=void 0;var a=function(){function t(t,e){this.x=t,this.y=e,this.x=null==t?0:t,this.y=null==e?0:e}return t.prototype.add=function(e){var i=new t(0,0);return i.x=this.x+e.x,i.y=this.y+e.y,i},t.prototype.substract=function(e){var i=new t(0,0);return i.x=this.x-e.x,i.y=this.y-e.y,i},t.prototype.multiply=function(e){var i=new t(0,0);return i.x=this.x*e.x,i.y=this.y*e.y,i},t.prototype.multiplyByScaler=function(e){return this.multiply(new t(e,e))},t.prototype.division=function(e){var i=new t(0,0);return i.x=this.x/e.x,i.y=this.y/e.y,i},t.prototype.divisionByScalar=function(e){return this.division(new t(e,e))},t.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.getDistanceWith=function(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.normalize=function(){var t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t},t.prototype.isEqual=function(t){return this.x==t.x&&this.y==t.y},t.prototype.isNotEqual=function(t){return!this.isEqual(t)},t}();e.CubismVector2=a;var s=o(i(876));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismVector2=s.CubismVector2},8530:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismViewMatrix=void 0;var u=i(1580),l=function(t){function e(){var e=t.call(this)||this;return e._screenLeft=0,e._screenRight=0,e._screenTop=0,e._screenBottom=0,e._maxLeft=0,e._maxRight=0,e._maxTop=0,e._maxBottom=0,e._maxScale=0,e._minScale=0,e}return n(e,t),e.prototype.adjustTranslate=function(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);u.CubismMatrix44.multiply(i,this._tr,this._tr)},e.prototype.adjustScale=function(t,e,i){var r=this.getMaxScale(),n=this.getMinScale(),o=i*this._tr[0];o<n?this._tr[0]>0&&(i=n/this._tr[0]):o>r&&this._tr[0]>0&&(i=r/this._tr[0]);var a=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),s=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);u.CubismMatrix44.multiply(l,this._tr,this._tr),u.CubismMatrix44.multiply(s,this._tr,this._tr),u.CubismMatrix44.multiply(a,this._tr,this._tr)},e.prototype.setScreenRect=function(t,e,i,r){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=r},e.prototype.setMaxScreenRect=function(t,e,i,r){this._maxLeft=t,this._maxRight=e,this._maxTop=r,this._maxBottom=i},e.prototype.setMaxScale=function(t){this._maxScale=t},e.prototype.setMinScale=function(t){this._minScale=t},e.prototype.getMaxScale=function(){return this._maxScale},e.prototype.getMinScale=function(){return this._minScale},e.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},e.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},e.prototype.getScreenLeft=function(){return this._screenLeft},e.prototype.getScreenRight=function(){return this._screenRight},e.prototype.getScreenBottom=function(){return this._screenBottom},e.prototype.getScreenTop=function(){return this._screenTop},e.prototype.getMaxLeft=function(){return this._maxLeft},e.prototype.getMaxRight=function(){return this._maxRight},e.prototype.getMaxBottom=function(){return this._maxBottom},e.prototype.getMaxTop=function(){return this._maxTop},e}(u.CubismMatrix44);e.CubismViewMatrix=l;var h=s(i(8530));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismViewMatrix=h.CubismViewMatrix},4817:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMoc=void 0;var a=i(6734),s=i(4053),u=function(){function t(t){this._moc=t,this._modelCount=0}return t.create=function(e){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(e);return r&&(i=new t(r)),i},t.delete=function(t){t._moc._release(),t._moc=null,t=null},t.prototype.createModel=function(){var t=null,e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&((t=new s.CubismModel(e)).initialize(),++this._modelCount),t},t.prototype.deleteModel=function(t){null!=t&&(t.release(),t=null,--this._modelCount)},t.prototype.release=function(){(0,a.CSM_ASSERT)(0==this._modelCount),this._moc._release(),this._moc=null},t}();e.CubismMoc=u;var l=o(i(4817));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMoc=l.CubismMoc},4053:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModel=void 0;var a=i(9007),s=i(652),u=i(7274),l=i(1502),h=i(6734),c=function(){function t(t){this._model=t,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new l.csmVector,this._parameterIds=new l.csmVector,this._drawableIds=new l.csmVector,this._partIds=new l.csmVector,this._notExistPartId=new u.csmMap,this._notExistParameterId=new u.csmMap,this._notExistParameterValues=new u.csmMap,this._notExistPartOpacities=new u.csmMap}return t.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},t.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},t.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},t.prototype.saveParameters=function(){for(var t=this._model.parameters.count,e=this._savedParameters.getSize(),i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},t.prototype.getModel=function(){return this._model},t.prototype.getPartIndex=function(t){var e,i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)},t.prototype.getPartCount=function(){return this._model.parts.count},t.prototype.setPartOpacityByIndex=function(t,e){this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.setValue(t,e):((0,h.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e)},t.prototype.setPartOpacityById=function(t,e){var i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)},t.prototype.getPartOpacityByIndex=function(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):((0,h.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t])},t.prototype.getPartOpacityById=function(t){var e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)},t.prototype.getParameterIndex=function(t){var e,i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)},t.prototype.getParameterCount=function(){return this._model.parameters.count},t.prototype.getParameterMaximumValue=function(t){return this._model.parameters.maximumValues[t]},t.prototype.getParameterMinimumValue=function(t){return this._model.parameters.minimumValues[t]},t.prototype.getParameterDefaultValue=function(t){return this._model.parameters.defaultValues[t]},t.prototype.getParameterValueByIndex=function(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):((0,h.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._parameterValues[t])},t.prototype.getParameterValueById=function(t){var e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)},t.prototype.setParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(t)?this._notExistParameterValues.setValue(t,1==i?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i):((0,h.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=1==i?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i)},t.prototype.setParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.setParameterValueByIndex(r,e,i)},t.prototype.addParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)},t.prototype.addParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.addParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.multiplyParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))},t.prototype.getDrawableIndex=function(t){for(var e=this._model.drawables.count,i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1},t.prototype.getDrawableCount=function(){return this._model.drawables.count},t.prototype.getDrawableId=function(t){var e=this._model.drawables.ids;return a.CubismFramework.getIdManager().getId(e[t])},t.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},t.prototype.getDrawableTextureIndices=function(t){return this._model.drawables.textureIndices[t]},t.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])},t.prototype.getDrawableVertexIndexCount=function(t){return this._model.drawables.indexCounts[t]},t.prototype.getDrawableVertexCount=function(t){return this._model.drawables.vertexCounts[t]},t.prototype.getDrawableVertices=function(t){return this.getDrawableVertexPositions(t)},t.prototype.getDrawableVertexIndices=function(t){return this._model.drawables.indices[t]},t.prototype.getDrawableVertexPositions=function(t){return this._model.drawables.vertexPositions[t]},t.prototype.getDrawableVertexUvs=function(t){return this._model.drawables.vertexUvs[t]},t.prototype.getDrawableOpacity=function(t){return this._model.drawables.opacities[t]},t.prototype.getDrawableCulling=function(t){var e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])},t.prototype.getDrawableBlendMode=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?s.CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?s.CubismBlendMode.CubismBlendMode_Multiplicative:s.CubismBlendMode.CubismBlendMode_Normal},t.prototype.getDrawableInvertedMaskBit=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])},t.prototype.getDrawableMasks=function(){return this._model.drawables.masks},t.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},t.prototype.isUsingMasking=function(){for(var t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1},t.prototype.getDrawableDynamicFlagIsVisible=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])},t.prototype.getDrawableDynamicFlagVisibilityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagOpacityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])},t.prototype.loadParameters=function(){var t=this._model.parameters.count,e=this._savedParameters.getSize();t>e&&(t=e);for(var i=0;i<t;++i)this._parameterValues[i]=this._savedParameters.at(i)},t.prototype.initialize=function(){(0,h.CSM_ASSERT)(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var t=this._model.parameters.ids,e=this._model.parameters.count;this._parameterIds.prepareCapacity(e);for(var i=0;i<e;++i)this._parameterIds.pushBack(a.CubismFramework.getIdManager().getId(t[i]));var r=this._model.parts.ids,n=this._model.parts.count;for(this._partIds.prepareCapacity(n),i=0;i<n;++i)this._partIds.pushBack(a.CubismFramework.getIdManager().getId(r[i]));var o=this._model.drawables.ids,s=this._model.drawables.count;for(this._drawableIds.prepareCapacity(s),i=0;i<s;++i)this._drawableIds.pushBack(a.CubismFramework.getIdManager().getId(o[i]))},t.prototype.release=function(){this._model.release(),this._model=null},t}();e.CubismModel=c;var p=o(i(4053));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModel=p.CubismModel},4013:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserData=e.CubismModelUserDataNode=void 0;var a=i(9007),s=i(1300),u=i(1502),l=i(1280),h=function(){};e.CubismModelUserDataNode=h;var c=function(){function t(){this._userDataNodes=new u.csmVector,this._artMeshUserDataNode=new u.csmVector}return t.create=function(e,i){var r=new t;return r.parseUserData(e,i),r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},t.prototype.parseUserData=function(t,e){for(var i=new l.CubismModelUserDataJson(t,e),r=a.CubismFramework.getIdManager().getId("ArtMesh"),n=i.getUserDataCount(),o=0;o<n;o++){var u=new h;u.targetId=i.getUserDataId(o),u.targetType=a.CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),u.value=new s.csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(u),u.targetType==r&&this._artMeshUserDataNode.pushBack(u)}i.release(),i=void 0},t.prototype.release=function(){for(var t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null},t}();e.CubismModelUserData=c;var p,d=o(i(4013));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserData=d.CubismModelUserData,p.CubismModelUserDataNode=d.CubismModelUserDataNode},1280:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserDataJson=void 0;var a=i(9007),s=i(9680),u="Meta",l="UserData",h=function(){function t(t,e){this._json=s.CubismJson.create(t,e)}return t.prototype.release=function(){s.CubismJson.delete(this._json)},t.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString(u).getValueByString("UserDataCount").toInt()},t.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString(u).getValueByString("TotalUserDataSize").toInt()},t.prototype.getUserDataTargetType=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getUserDataId=function(t){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.getUserDataValue=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Value").getRawString()},t}();e.CubismModelUserDataJson=h;var c=o(i(1280));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserDataJson=c.CubismModelUserDataJson},5793:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismUserModel=void 0;var a=i(8950),s=i(8980),u=i(5450),l=i(9007),h=i(3179),c=i(6158),p=i(6541),d=i(5356),g=i(5208),_=i(8948),m=i(6753),f=i(6734),y=i(4817),v=i(4013),b=function(){function t(){this.loadMotion=function(t,e,i,r){return d.CubismMotion.create(t,e,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new g.CubismMotionManager,this._motionManager.setEventCallback(t.cubismDefaultMotionEventCallback,this),this._expressionManager=new g.CubismMotionManager,this._dragManager=new c.CubismTargetPoint}return t.prototype.isInitialized=function(){return this._initialized},t.prototype.setInitialized=function(t){this._initialized=t},t.prototype.isUpdating=function(){return this._updating},t.prototype.setUpdating=function(t){this._updating=t},t.prototype.setDragging=function(t,e){this._dragManager.set(t,e)},t.prototype.setAcceleration=function(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i},t.prototype.getModelMatrix=function(){return this._modelMatrix},t.prototype.setOpacity=function(t){this._opacity=t},t.prototype.getOpacity=function(){return this._opacity},t.prototype.loadModel=function(t){this._moc=y.CubismMoc.create(t),this._model=this._moc.createModel(),this._model.saveParameters(),null!=this._moc&&null!=this._model?this._modelMatrix=new h.CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight()):(0,f.CubismLogError)("Failed to CreateModel().")},t.prototype.loadExpression=function(t,e,i){return p.CubismExpressionMotion.create(t,e)},t.prototype.loadPose=function(t,e){this._pose=u.CubismPose.create(t,e)},t.prototype.loadUserData=function(t,e){this._modelUserData=v.CubismModelUserData.create(t,e)},t.prototype.loadPhysics=function(t,e){this._physics=_.CubismPhysics.create(t,e)},t.prototype.isHit=function(t,e,i){var r=this._model.getDrawableIndex(t);if(r<0)return!1;for(var n=this._model.getDrawableVertexCount(r),o=this._model.getDrawableVertices(r),a=o[0],s=o[0],u=o[1],h=o[1],c=1;c<n;++c){var p=o[l.Constant.vertexOffset+c*l.Constant.vertexStep],d=o[l.Constant.vertexOffset+c*l.Constant.vertexStep+1];p<a&&(a=p),p>s&&(s=p),d<u&&(u=d),d>h&&(h=d)}var g=this._modelMatrix.invertTransformX(e),_=this._modelMatrix.invertTransformY(i);return a<=g&&g<=s&&u<=_&&_<=h},t.prototype.getModel=function(){return this._model},t.prototype.getRenderer=function(){return this._renderer},t.prototype.createRenderer=function(){this._renderer&&this.deleteRenderer(),this._renderer=new m.CubismRenderer_WebGL,this._renderer.initialize(this._model)},t.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},t.prototype.motionEventFired=function(t){(0,f.CubismLogInfo)("{0}",t.s)},t.cubismDefaultMotionEventCallback=function(t,e,i){null!=i&&i.motionEventFired(e)},t.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,u.CubismPose.delete(this._pose),s.CubismEyeBlink.delete(this._eyeBlink),a.CubismBreath.delete(this._breath),this._dragManager=null,_.CubismPhysics.delete(this._physics),v.CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()},t}();e.CubismUserModel=b;var C=o(i(5793));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismUserModel=C.CubismUserModel},4229:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ACubismMotion=void 0;var a=i(9940),s=i(1502),u=i(6734),l=function(){function t(){var t=this;this.setFinishedMotionHandler=function(e){return t._onFinishedMotion=e},this.getFinishedMotionHandler=function(){return t._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s.csmVector}return t.delete=function(t){t.release(),t=null},t.prototype.release=function(){this._weight=0},t.prototype.updateParameters=function(t,e,i){if(e.isAvailable()&&!e.isFinished()){if(!e.isStarted()){e.setIsStarted(!0),e.setStartTime(i-this._offsetSeconds),e.setFadeInStartTime(i);var r=this.getDuration();e.getEndTime()<0&&e.setEndTime(r<=0?-1:e.getStartTime()+r)}var n=this._weight;n=n*(0==this._fadeInSeconds?1:a.CubismMath.getEasingSine((i-e.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||e.getEndTime()<0?1:a.CubismMath.getEasingSine((e.getEndTime()-i)/this._fadeOutSeconds)),e.setState(i,n),(0,u.CSM_ASSERT)(0<=n&&n<=1),this.doUpdateParameters(t,i,n,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}},t.prototype.setFadeInTime=function(t){this._fadeInSeconds=t},t.prototype.setFadeOutTime=function(t){this._fadeOutSeconds=t},t.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},t.prototype.getFadeInTime=function(){return this._fadeInSeconds},t.prototype.setWeight=function(t){this._weight=t},t.prototype.getWeight=function(){return this._weight},t.prototype.getDuration=function(){return-1},t.prototype.getLoopDuration=function(){return-1},t.prototype.setOffsetTime=function(t){this._offsetSeconds=t},t.prototype.getFiredEvent=function(t,e){return this._firedEventValues},t}();e.ACubismMotion=l;var h=o(i(4229));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ACubismMotion=h.ACubismMotion},6541:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ExpressionParameter=e.ExpressionBlendType=e.CubismExpressionMotion=void 0;var u,l=i(9007),h=i(1502),c=i(9680),p=i(4229),d="Parameters",g="Blend",_=function(t){function e(){var e=t.call(this)||this;return e._parameters=new h.csmVector,e}return n(e,t),e.create=function(t,i){var r=new e,n=c.CubismJson.create(t,i),o=n.getRoot();r.setFadeInTime(o.getValueByString("FadeInTime").toFloat(1)),r.setFadeOutTime(o.getValueByString("FadeOutTime").toFloat(1));var a=o.getValueByString(d).getSize();r._parameters.prepareCapacity(a);for(var s=0;s<a;++s){var h,p=o.getValueByString(d).getValueByIndex(s),_=l.CubismFramework.getIdManager().getId(p.getValueByString("Id").getRawString()),f=p.getValueByString("Value").toFloat();h=p.getValueByString(g).isNull()||"Add"==p.getValueByString(g).getString()?u.ExpressionBlendType_Add:"Multiply"==p.getValueByString(g).getString()?u.ExpressionBlendType_Multiply:"Overwrite"==p.getValueByString(g).getString()?u.ExpressionBlendType_Overwrite:u.ExpressionBlendType_Add;var y=new m;y.parameterId=_,y.blendType=h,y.value=f,r._parameters.pushBack(y)}return c.CubismJson.delete(n),r},e.prototype.doUpdateParameters=function(t,e,i,r){for(var n=0;n<this._parameters.getSize();++n){var o=this._parameters.at(n);switch(o.blendType){case u.ExpressionBlendType_Add:t.addParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Multiply:t.multiplyParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Overwrite:t.setParameterValueById(o.parameterId,o.value,i)}}},e}(p.ACubismMotion);e.CubismExpressionMotion=_,function(t){t[t.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",t[t.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",t[t.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(u=e.ExpressionBlendType||(e.ExpressionBlendType={}));var m=function(){};e.ExpressionParameter=m;var f,y=s(i(6541));(f=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismExpressionMotion=y.CubismExpressionMotion,f.ExpressionBlendType=y.ExpressionBlendType,f.ExpressionParameter=y.ExpressionParameter},5356:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotion=void 0;var u=i(9007),l=i(9940),h=i(1300),c=i(6734),p=i(4229),d=i(8386),g=i(4391);function _(t,e,i){var r=new d.CubismMotionPoint;return r.time=t.time+(e.time-t.time)*i,r.value=t.value+(e.value-t.value)*i,r}function m(t,e){var i=(e-t[0].time)/(t[1].time-t[0].time);return i<0&&(i=0),t[0].value+(t[1].value-t[0].value)*i}function f(t,e){var i=(e-t[0].time)/(t[3].time-t[0].time);i<0&&(i=0);var r=_(t[0],t[1],i),n=_(t[1],t[2],i),o=_(t[2],t[3],i),a=_(r,n,i),s=_(n,o,i);return _(a,s,i).value}function y(t,e){var i=e,r=t[0].time,n=t[3].time,o=t[1].time,a=t[2].time,s=n-3*a+3*o-r,u=3*a-6*o+3*r,h=3*o-3*r,c=r-i,p=l.CubismMath.cardanoAlgorithmForBezier(s,u,h,c),d=_(t[0],t[1],p),g=_(t[1],t[2],p),m=_(t[2],t[3],p),f=_(d,g,p),y=_(g,m,p);return _(f,y,p).value}function v(t,e){return t[0].value}function b(t,e){return t[1].value}function C(t,e,i){for(var r=t.curves.at(e),n=-1,o=r.baseSegmentIndex+r.segmentCount,a=0,s=r.baseSegmentIndex;s<o;++s)if(a=t.segments.at(s).basePointIndex+(t.segments.at(s).segmentType==d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),t.points.at(a).time>i){n=s;break}if(-1==n)return t.points.at(a).value;var u=t.segments.at(n);return u.evaluate(t.points.get(u.basePointIndex),i)}var S=function(t){function e(){var e=t.call(this)||this;return e._sourceFrameRate=30,e._loopDurationSeconds=-1,e._isLoop=!1,e._isLoopFadeIn=!0,e._lastWeight=0,e._motionData=null,e._modelCurveIdEyeBlink=null,e._modelCurveIdLipSync=null,e._eyeBlinkParameterIds=null,e._lipSyncParameterIds=null,e}return n(e,t),e.create=function(t,i,r){var n=new e;return n.parse(t,i),n._sourceFrameRate=n._motionData.fps,n._loopDurationSeconds=n._motionData.duration,n._onFinishedMotion=r,n},e.prototype.doUpdateParameters=function(t,e,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=u.CubismFramework.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=u.CubismFramework.getIdManager().getId("LipSync"));var n=e-r.getStartTime();n<0&&(n=0);var o=Number.MAX_VALUE,a=Number.MAX_VALUE,s=64,h=0,p=0;this._eyeBlinkParameterIds.getSize()>s&&(0,c.CubismLogDebug)("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>s&&(0,c.CubismLogDebug)("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var g,_,m,f=this._fadeInSeconds<=0?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/this._fadeInSeconds),y=this._fadeOutSeconds<=0||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/this._fadeOutSeconds),v=n;if(this._isLoop)for(;v>this._motionData.duration;)v-=this._motionData.duration;var b=this._motionData.curves;for(_=0;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++_)g=C(this._motionData,_,v),b.at(_).id==this._modelCurveIdEyeBlink?a=g:b.at(_).id==this._modelCurveIdLipSync&&(o=g);for(;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++_)if(-1!=(m=t.getParameterIndex(b.at(_).id))){var S=t.getParameterValueByIndex(m);if(g=C(this._motionData,_,v),a!=Number.MAX_VALUE)for(var P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)if(this._eyeBlinkParameterIds.at(P)==b.at(_).id){g*=a,p|=1<<P;break}if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)if(this._lipSyncParameterIds.at(P)==b.at(_).id){g+=o,h|=1<<P;break}var M=void 0;if(b.at(_).fadeInTime<0&&b.at(_).fadeOutTime<0)M=S+(g-S)*i;else{var x,B;x=b.at(_).fadeInTime<0?f:0==b.at(_).fadeInTime?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/b.at(_).fadeInTime),B=b.at(_).fadeOutTime<0?y:0==b.at(_).fadeOutTime||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/b.at(_).fadeOutTime),M=S+(g-S)*(this._weight*x*B)}t.setParameterValueByIndex(m,M,1)}if(a!=Number.MAX_VALUE)for(P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._eyeBlinkParameterIds.at(P)),p>>P&1||(M=S+(a-S)*i,t.setParameterValueById(this._eyeBlinkParameterIds.at(P),M));if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._lipSyncParameterIds.at(P)),h>>P&1||(M=S+(o-S)*i,t.setParameterValueById(this._lipSyncParameterIds.at(P),M));for(;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++_)-1!=(m=t.getParameterIndex(b.at(_).id))&&(g=C(this._motionData,_,v),t.setParameterValueByIndex(m,g));n>=this._motionData.duration&&(this._isLoop?(r.setStartTime(e),this._isLoopFadeIn&&r.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},e.prototype.setIsLoop=function(t){this._isLoop=t},e.prototype.isLoop=function(){return this._isLoop},e.prototype.setIsLoopFadeIn=function(t){this._isLoopFadeIn=t},e.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},e.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},e.prototype.getLoopDuration=function(){return this._loopDurationSeconds},e.prototype.setParameterFadeInTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeInTime=e)},e.prototype.setParameterFadeOutTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeOutTime=e)},e.prototype.getParameterFadeInTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1},e.prototype.getParameterFadeOutTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1},e.prototype.setEffectIds=function(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e},e.prototype.release=function(){this._motionData=void 0,this._motionData=null},e.prototype.parse=function(t,e){this._motionData=new d.CubismMotionData;var i=new g.CubismMotionJson(t,e);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();var r=i.getEvaluationOptionFlag(g.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,d.CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),d.CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),d.CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,d.CubismMotionEvent,!0);for(var n=0,o=0,a=0;a<this._motionData.curveCount;++a){"Model"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:(0,c.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(a).id=i.getMotionCurveId(a),this._motionData.curves.at(a).baseSegmentIndex=o,this._motionData.curves.at(a).fadeInTime=i.isExistMotionCurveFadeInTime(a)?i.getMotionCurveFadeInTime(a):-1,this._motionData.curves.at(a).fadeOutTime=i.isExistMotionCurveFadeOutTime(a)?i.getMotionCurveFadeOutTime(a):-1;for(var s=0;s<i.getMotionCurveSegmentCount(a);){switch(0==s?(this._motionData.segments.at(o).basePointIndex=n,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+1),n+=1,s+=2):this._motionData.segments.at(o).basePointIndex=n-1,i.getMotionCurveSegment(a,s)){case d.CubismMotionSegmentType.CubismMotionSegmentType_Linear:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=m,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier,this._motionData.segments.at(o).evaluate=r?f:y,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),this._motionData.points.at(n+1).time=i.getMotionCurveSegment(a,s+3),this._motionData.points.at(n+1).value=i.getMotionCurveSegment(a,s+4),this._motionData.points.at(n+2).time=i.getMotionCurveSegment(a,s+5),this._motionData.points.at(n+2).value=i.getMotionCurveSegment(a,s+6),n+=3,s+=7;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=v,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=b,this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;default:(0,c.CSM_ASSERT)(0)}++this._motionData.curves.at(a).segmentCount,++o}}for(var u=0;u<i.getEventCount();++u)this._motionData.events.at(u).fireTime=i.getEventTime(u),this._motionData.events.at(u).value=i.getEventValue(u);i.release(),i=void 0,i=null},e.prototype.getFiredEvent=function(t,e){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new h.csmString(this._motionData.events.at(i).value.s));return this._firedEventValues},e}(p.ACubismMotion);e.CubismMotion=S;var P=s(i(5356));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotion=P.CubismMotion},8386:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionData=e.CubismMotionEvent=e.CubismMotionCurve=e.CubismMotionSegment=e.CubismMotionPoint=e.CubismMotionSegmentType=e.CubismMotionCurveTarget=void 0;var a,s,u=i(1502);!function(t){t[t.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",t[t.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",t[t.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(a=e.CubismMotionCurveTarget||(e.CubismMotionCurveTarget={})),(s=e.CubismMotionSegmentType||(e.CubismMotionSegmentType={}))[s.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",s[s.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",s[s.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",s[s.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped";e.CubismMotionPoint=function(){this.time=0,this.value=0};e.CubismMotionSegment=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};e.CubismMotionCurve=function(){this.type=a.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};e.CubismMotionEvent=function(){this.fireTime=0};e.CubismMotionData=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new u.csmVector,this.segments=new u.csmVector,this.points=new u.csmVector,this.events=new u.csmVector};var l,h=o(i(8386));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionCurve=h.CubismMotionCurve,l.CubismMotionCurveTarget=h.CubismMotionCurveTarget,l.CubismMotionData=h.CubismMotionData,l.CubismMotionEvent=h.CubismMotionEvent,l.CubismMotionPoint=h.CubismMotionPoint,l.CubismMotionSegment=h.CubismMotionSegment,l.CubismMotionSegmentType=h.CubismMotionSegmentType},4391:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EvaluationOptionFlag=e.CubismMotionJson=void 0;var a,s=i(9007),u=i(1300),l=i(9680),h="Meta",c="Curves",p="FadeInTime",d="FadeOutTime",g="Segments",_="UserData",m=function(){function t(t,e){this._json=l.CubismJson.create(t,e)}return t.prototype.release=function(){l.CubismJson.delete(this._json)},t.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(h).getValueByString("Duration").toFloat()},t.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(h).getValueByString("Loop").toBoolean()},t.prototype.getEvaluationOptionFlag=function(t){return a.EvaluationOptionFlag_AreBeziersRistricted==t&&this._json.getRoot().getValueByString(h).getValueByString("AreBeziersRestricted").toBoolean()},t.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("CurveCount").toInt()},t.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(h).getValueByString("Fps").toFloat()},t.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalSegmentCount").toInt()},t.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalPointCount").toInt()},t.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(h).getValueByString(p).isNull()},t.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(h).getValueByString(d).isNull()},t.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(h).getValueByString(p).toFloat()},t.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(h).getValueByString(d).toFloat()},t.prototype.getMotionCurveTarget=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getMotionCurveId=function(t){return s.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.isExistMotionCurveFadeInTime=function(t){return!this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(p).isNull()},t.prototype.isExistMotionCurveFadeOutTime=function(t){return!this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(d).isNull()},t.prototype.getMotionCurveFadeInTime=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(p).toFloat()},t.prototype.getMotionCurveFadeOutTime=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(d).toFloat()},t.prototype.getMotionCurveSegmentCount=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(g).getVector().getSize()},t.prototype.getMotionCurveSegment=function(t,e){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(g).getValueByIndex(e).toFloat()},t.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("UserDataCount").toInt()},t.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalUserDataSize").toInt()},t.prototype.getEventTime=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString("Time").toFloat()},t.prototype.getEventValue=function(t){return new u.csmString(this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString("Value").getRawString())},t}();e.CubismMotionJson=m,function(t){t[t.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(a=e.EvaluationOptionFlag||(e.EvaluationOptionFlag={}));var f=o(i(4391));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionJson=f.CubismMotionJson},5208:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionManager=void 0;var u=function(t){function e(){var e=t.call(this)||this;return e._currentPriority=0,e._reservePriority=0,e}return n(e,t),e.prototype.getCurrentPriority=function(){return this._currentPriority},e.prototype.getReservePriority=function(){return this._reservePriority},e.prototype.setReservePriority=function(t){this._reservePriority=t},e.prototype.startMotionPriority=function(e,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,t.prototype.startMotion.call(this,e,i,this._userTimeSeconds)},e.prototype.updateMotion=function(e,i){this._userTimeSeconds+=i;var r=t.prototype.doUpdateMotion.call(this,e,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},e.prototype.reserveMotion=function(t){return!(t<=this._reservePriority||t<=this._currentPriority||(this._reservePriority=t,0))},e}(i(4763).CubismMotionQueueManager);e.CubismMotionManager=u;var l=s(i(5208));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionManager=l.CubismMotionManager},6458:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionQueueEntry=void 0;var a=i(4229),s=function(){function t(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}return t.prototype.release=function(){this._autoDelete&&this._motion&&a.ACubismMotion.delete(this._motion)},t.prototype.setFadeOut=function(t){this._fadeOutSeconds=t,this._isTriggeredFadeOut=!0},t.prototype.startFadeOut=function(t,e){var i=e+t;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},t.prototype.isFinished=function(){return this._finished},t.prototype.isStarted=function(){return this._started},t.prototype.getStartTime=function(){return this._startTimeSeconds},t.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},t.prototype.getEndTime=function(){return this._endTimeSeconds},t.prototype.setStartTime=function(t){this._startTimeSeconds=t},t.prototype.setFadeInStartTime=function(t){this._fadeInStartTimeSeconds=t},t.prototype.setEndTime=function(t){this._endTimeSeconds=t},t.prototype.setIsFinished=function(t){this._finished=t},t.prototype.setIsStarted=function(t){this._started=t},t.prototype.isAvailable=function(){return this._available},t.prototype.setIsAvailable=function(t){this._available=t},t.prototype.setState=function(t,e){this._stateTimeSeconds=t,this._stateWeight=e},t.prototype.getStateTime=function(){return this._stateTimeSeconds},t.prototype.getStateWeight=function(){return this._stateWeight},t.prototype.getLastCheckEventSeconds=function(){return this._lastEventCheckSeconds},t.prototype.setLastCheckEventSeconds=function(t){this._lastEventCheckSeconds=t},t.prototype.isTriggeredFadeOut=function(){return this._isTriggeredFadeOut},t.prototype.getFadeOutSeconds=function(){return this._fadeOutSeconds},t}();e.CubismMotionQueueEntry=s;var u=o(i(6458));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueEntry=u.CubismMotionQueueEntry},4763:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.InvalidMotionQueueEntryHandleValue=e.CubismMotionQueueManager=void 0;var a=i(6458),s=i(1502),u=function(){function t(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new s.csmVector}return t.prototype.release=function(){for(var t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,null));this._motions=null},t.prototype.startMotion=function(t,i,r){if(null==t)return e.InvalidMotionQueueEntryHandleValue;for(var n=null,o=0;o<this._motions.getSize();++o)null!=(n=this._motions.at(o))&&n.setFadeOut(n._motion.getFadeOutTime());return(n=new a.CubismMotionQueueEntry)._autoDelete=i,n._motion=t,this._motions.pushBack(n),n._motionQueueEntryHandle},t.prototype.isFinished=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();if(null!=e)if(null!=e._motion){if(!e.isFinished())return!1;t.preIncrement()}else e.release(),e=null,t=this._motions.erase(t);else t=this._motions.erase(t)}return!0},t.prototype.isFinishedByHandle=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t&&!i.isFinished())return!1}return!0},t.prototype.stopAllMotions=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();null!=e?(e.release(),e=null,t=this._motions.erase(t)):t=this._motions.erase(t)}},t.prototype.getCubismMotionQueueEntry=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t)return i}return null},t.prototype.setEventCallback=function(t,e){void 0===e&&(e=null),this._eventCallBack=t,this._eventCustomData=e},t.prototype.doUpdateMotion=function(t,e){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var n=r.ptr();if(null!=n){var o=n._motion;if(null!=o){o.updateParameters(t,n,e),i=!0;for(var a=o.getFiredEvent(n.getLastCheckEventSeconds()-n.getStartTime(),e-n.getStartTime()),s=0;s<a.getSize();++s)this._eventCallBack(this,a.at(s),this._eventCustomData);n.setLastCheckEventSeconds(e),n.isFinished()?(n.release(),n=null,r=this._motions.erase(r)):(n.isTriggeredFadeOut()&&n.startFadeOut(n.getFadeOutSeconds(),e),r.preIncrement())}else n.release(),n=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},t}();e.CubismMotionQueueManager=u,e.InvalidMotionQueueEntryHandleValue=-1;var l,h=o(i(4763));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueManager=h.CubismMotionQueueManager,l.InvalidMotionQueueEntryHandleValue=h.InvalidMotionQueueEntryHandleValue},8948:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.Options=e.CubismPhysics=void 0;var a=i(9940),s=i(876),u=i(9804),l=i(3629),h="Angle",c=function(){function t(){this._physicsRig=null,this._options=new p,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0}return t.create=function(e,i){var r=new t;return r.parse(e,i),r._physicsRig.gravity.y=0,r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.evaluate=function(t,e){var i,r,n,o,u,l,h,c,p,d,g,_,m=new s.CubismVector2;p=t.getModel().parameters.values,d=t.getModel().parameters.maximumValues,g=t.getModel().parameters.minimumValues,_=t.getModel().parameters.defaultValues;for(var f=0;f<this._physicsRig.subRigCount;++f){i={angle:0},m.x=0,m.y=0,u=this._physicsRig.settings.at(f),l=this._physicsRig.inputs.get(u.baseInputIndex),h=this._physicsRig.outputs.get(u.baseOutputIndex),c=this._physicsRig.particles.get(u.baseParticleIndex);for(var y=0;y<u.inputCount;++y)r=l[y].weight/100,-1==l[y].sourceParameterIndex&&(l[y].sourceParameterIndex=t.getParameterIndex(l[y].source.id)),l[y].getNormalizedParameterValue(m,i,p[l[y].sourceParameterIndex],g[l[y].sourceParameterIndex],d[l[y].sourceParameterIndex],_[l[y].sourceParameterIndex],u.normalizationPosition,u.normalizationAngle,l[y].reflect,r);for(n=a.CubismMath.degreesToRadian(-i.angle),m.x=m.x*a.CubismMath.cos(n)-m.y*a.CubismMath.sin(n),m.y=m.x*a.CubismMath.sin(n)+m.y*a.CubismMath.cos(n),S(c,u.particleCount,m,i.angle,this._options.wind,.001*u.normalizationPosition.maximum,e,5),y=0;y<u.outputCount;++y){var v=h[y].vertexIndex;if(v<1||v>=u.particleCount)break;-1==h[y].destinationParameterIndex&&(h[y].destinationParameterIndex=t.getParameterIndex(h[y].destination.id));var b=new s.CubismVector2;b.x=c[v].position.x-c[v-1].position.x,b.y=c[v].position.y-c[v-1].position.y,o=h[y].getValue(b,c,v,h[y].reflect,this._options.gravity);var C=h[y].destinationParameterIndex,M=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(p.subarray(C))):p.slice(C);P(M,g[C],d[C],o,h[y]);for(var x=C,B=0;x<p.length;x++,B++)p[x]=M[B]}}},t.prototype.setOptions=function(t){this._options=t},t.prototype.getOption=function(){return this._options},t.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},t.prototype.parse=function(t,e){this._physicsRig=new u.CubismPhysicsRig;var i=new l.CubismPhysicsJson(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,u.CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),u.CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),u.CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),u.CubismPhysicsParticle,!0);for(var r=0,n=0,o=0,a=0;a<this._physicsRig.settings.getSize();++a){this._physicsRig.settings.at(a).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(a),this._physicsRig.settings.at(a).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(a),this._physicsRig.settings.at(a).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(a),this._physicsRig.settings.at(a).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(a),this._physicsRig.settings.at(a).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(a),this._physicsRig.settings.at(a).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(a),this._physicsRig.settings.at(a).inputCount=i.getInputCount(a),this._physicsRig.settings.at(a).baseInputIndex=r;for(var s=0;s<this._physicsRig.settings.at(a).inputCount;++s)this._physicsRig.inputs.at(r+s).sourceParameterIndex=-1,this._physicsRig.inputs.at(r+s).weight=i.getInputWeight(a,s),this._physicsRig.inputs.at(r+s).reflect=i.getInputReflect(a,s),"X"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=d):"Y"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=g):i.getInputType(a,s)==h&&(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=_),this._physicsRig.inputs.at(r+s).source.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(r+s).source.id=i.getInputSourceId(a,s);for(r+=this._physicsRig.settings.at(a).inputCount,this._physicsRig.settings.at(a).outputCount=i.getOutputCount(a),this._physicsRig.settings.at(a).baseOutputIndex=n,s=0;s<this._physicsRig.settings.at(a).outputCount;++s)this._physicsRig.outputs.at(n+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(n+s).vertexIndex=i.getOutputVertexIndex(a,s),this._physicsRig.outputs.at(n+s).angleScale=i.getOutputAngleScale(a,s),this._physicsRig.outputs.at(n+s).weight=i.getOutputWeight(a,s),this._physicsRig.outputs.at(n+s).destination.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(n+s).destination.id=i.getOutputDestinationId(a,s),"X"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(n+s).getValue=m,this._physicsRig.outputs.at(n+s).getScale=v):"Y"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(n+s).getValue=f,this._physicsRig.outputs.at(n+s).getScale=b):i.getOutputType(a,s)==h&&(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(n+s).getValue=y,this._physicsRig.outputs.at(n+s).getScale=C),this._physicsRig.outputs.at(n+s).reflect=i.getOutputReflect(a,s);for(n+=this._physicsRig.settings.at(a).outputCount,this._physicsRig.settings.at(a).particleCount=i.getParticleCount(a),this._physicsRig.settings.at(a).baseParticleIndex=o,s=0;s<this._physicsRig.settings.at(a).particleCount;++s)this._physicsRig.particles.at(o+s).mobility=i.getParticleMobility(a,s),this._physicsRig.particles.at(o+s).delay=i.getParticleDelay(a,s),this._physicsRig.particles.at(o+s).acceleration=i.getParticleAcceleration(a,s),this._physicsRig.particles.at(o+s).radius=i.getParticleRadius(a,s),this._physicsRig.particles.at(o+s).position=i.getParticlePosition(a,s);o+=this._physicsRig.settings.at(a).particleCount}this.initialize(),i.release(),i=void 0,i=null},t.prototype.initialize=function(){for(var t,e,i,r=0;r<this._physicsRig.subRigCount;++r){e=this._physicsRig.settings.at(r),(t=this._physicsRig.particles.get(e.baseParticleIndex))[0].initialPosition=new s.CubismVector2(0,0),t[0].lastPosition=new s.CubismVector2(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new s.CubismVector2(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new s.CubismVector2(0,0),t[0].force=new s.CubismVector2(0,0);for(var n=1;n<e.particleCount;++n)(i=new s.CubismVector2(0,0)).y=t[n].radius,t[n].initialPosition=new s.CubismVector2(t[n-1].initialPosition.x+i.x,t[n-1].initialPosition.y+i.y),t[n].position=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastPosition=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastGravity=new s.CubismVector2(0,-1),t[n].lastGravity.y*=-1,t[n].velocity=new s.CubismVector2(0,0),t[n].force=new s.CubismVector2(0,0)}},t}();e.CubismPhysics=c;var p=function(){this.gravity=new s.CubismVector2(0,0),this.wind=new s.CubismVector2(0,0)};function d(t,e,i,r,n,o,a,s,u,l){t.x+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function g(t,e,i,r,n,o,a,s,u,l){t.y+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function _(t,e,i,r,n,o,a,s,u,l){e.angle+=M(i,r,n,0,s.minimum,s.maximum,s.defalut,u)*l}function m(t,e,i,r,n){var o=t.x;return r&&(o*=-1),o}function f(t,e,i,r,n){var o=t.y;return r&&(o*=-1),o}function y(t,e,i,r,n){var o;return n=i>=2?e[i-1].position.substract(e[i-2].position):n.multiplyByScaler(-1),o=a.CubismMath.directionToRadian(n,t),r&&(o*=-1),o}function v(t,e){return JSON.parse(JSON.stringify(t.x))}function b(t,e){return JSON.parse(JSON.stringify(t.y))}function C(t,e){return JSON.parse(JSON.stringify(e))}function S(t,e,i,r,n,o,u,l){var h,c,p,d,g=new s.CubismVector2(0,0),_=new s.CubismVector2(0,0),m=new s.CubismVector2(0,0),f=new s.CubismVector2(0,0);t[0].position=new s.CubismVector2(i.x,i.y),h=a.CubismMath.degreesToRadian(r),(d=a.CubismMath.radianToDirection(h)).normalize();for(var y=1;y<e;++y)t[y].force=d.multiplyByScaler(t[y].acceleration).add(n),t[y].lastPosition=new s.CubismVector2(t[y].position.x,t[y].position.y),c=t[y].delay*u*30,g=t[y].position.substract(t[y-1].position),p=a.CubismMath.directionToRadian(t[y].lastGravity,d)/l,g.x=a.CubismMath.cos(p)*g.x-g.y*a.CubismMath.sin(p),g.y=a.CubismMath.sin(p)*g.x+g.y*a.CubismMath.cos(p),t[y].position=t[y-1].position.add(g),_=t[y].velocity.multiplyByScaler(c),m=t[y].force.multiplyByScaler(c).multiplyByScaler(c),t[y].position=t[y].position.add(_).add(m),(f=t[y].position.substract(t[y-1].position)).normalize(),t[y].position=t[y-1].position.add(f.multiplyByScaler(t[y].radius)),a.CubismMath.abs(t[y].position.x)<o&&(t[y].position.x=0),0!=c&&(t[y].velocity=t[y].position.substract(t[y].lastPosition),t[y].velocity=t[y].velocity.divisionByScalar(c),t[y].velocity=t[y].velocity.multiplyByScaler(t[y].mobility)),t[y].force=new s.CubismVector2(0,0),t[y].lastGravity=new s.CubismVector2(d.x,d.y)}function P(t,e,i,r,n){var o,a;(o=r*n.getScale(n.translationScale,n.angleScale))<e?(o<n.valueBelowMinimum&&(n.valueBelowMinimum=o),o=e):o>i&&(o>n.valueExceededMaximum&&(n.valueExceededMaximum=o),o=i),(a=n.weight/100)>=1||(o=t[0]*(1-a)+o*a),t[0]=o}function M(t,e,i,r,n,o,s,u){var l=0,h=a.CubismMath.max(i,e);h<t&&(t=h);var c=a.CubismMath.min(i,e);c>t&&(t=c);var p,d,g=a.CubismMath.min(n,o),_=a.CubismMath.max(n,o),m=s,f=(p=c,d=h,a.CubismMath.min(p,d)+function(t,e){var i=a.CubismMath.max(t,e),r=a.CubismMath.min(t,e);return a.CubismMath.abs(i-r)}(p,d)/2),y=t-f;switch(function(t){var e=0;return t>0?e=1:t<0&&(e=-1),e}(y)){case 1:var v=_-m;0!=(b=h-f)&&(l=y*(v/b),l+=m);break;case-1:var b;v=g-m,0!=(b=c-f)&&(l=y*(v/b),l+=m);break;case 0:l=m}return u?l:-1*l}e.Options=p;var x,B=o(i(8948));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysics=B.CubismPhysics,x.Options=B.Options},9804:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsRig=e.CubismPhysicsOutput=e.CubismPhysicsInput=e.CubismPhysicsSubRig=e.CubismPhysicsParticle=e.CubismPhysicsNormalization=e.CubismPhysicsParameter=e.PhysicsJsonEffectiveForces=e.CubismPhysicsSource=e.CubismPhysicsTargetType=void 0;var a,s,u=i(876),l=i(1502);(s=e.CubismPhysicsTargetType||(e.CubismPhysicsTargetType={}))[s.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",(a=e.CubismPhysicsSource||(e.CubismPhysicsSource={}))[a.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",a[a.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",a[a.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle";e.PhysicsJsonEffectiveForces=function(){this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var h=function(){};e.CubismPhysicsParameter=h;var c=function(){};e.CubismPhysicsNormalization=c;e.CubismPhysicsParticle=function(){this.initialPosition=new u.CubismVector2(0,0),this.position=new u.CubismVector2(0,0),this.lastPosition=new u.CubismVector2(0,0),this.lastGravity=new u.CubismVector2(0,0),this.force=new u.CubismVector2(0,0),this.velocity=new u.CubismVector2(0,0)};e.CubismPhysicsSubRig=function(){this.normalizationPosition=new c,this.normalizationAngle=new c};e.CubismPhysicsInput=function(){this.source=new h};e.CubismPhysicsOutput=function(){this.destination=new h,this.translationScale=new u.CubismVector2(0,0)};e.CubismPhysicsRig=function(){this.settings=new l.csmVector,this.inputs=new l.csmVector,this.outputs=new l.csmVector,this.particles=new l.csmVector,this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var p,d=o(i(9804));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsInput=d.CubismPhysicsInput,p.CubismPhysicsNormalization=d.CubismPhysicsNormalization,p.CubismPhysicsOutput=d.CubismPhysicsOutput,p.CubismPhysicsParameter=d.CubismPhysicsParameter,p.CubismPhysicsParticle=d.CubismPhysicsParticle,p.CubismPhysicsRig=d.CubismPhysicsRig,p.CubismPhysicsSource=d.CubismPhysicsSource,p.CubismPhysicsSubRig=d.CubismPhysicsSubRig,p.CubismPhysicsTargetType=d.CubismPhysicsTargetType,p.PhysicsJsonEffectiveForces=d.PhysicsJsonEffectiveForces},3629:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsJson=void 0;var a=i(9007),s=i(876),u=i(9680),l="Position",h="Angle",c="Type",p="Meta",d="EffectiveForces",g="Gravity",_="Wind",m="PhysicsSettings",f="Normalization",y="Minimum",v="Maximum",b="Default",C="Reflect",S="Weight",P="Input",M="Output",x="Vertices",B=function(){function t(t,e){this._json=u.CubismJson.create(t,e)}return t.prototype.release=function(){u.CubismJson.delete(this._json)},t.prototype.getGravity=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("Y").toFloat(),t},t.prototype.getWind=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("Y").toFloat(),t},t.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("PhysicsSettingCount").toInt()},t.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalInputCount").toInt()},t.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalOutputCount").toInt()},t.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("VertexCount").toInt()},t.prototype.getNormalizationPositionMinimumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(y).toFloat()},t.prototype.getNormalizationPositionMaximumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(v).toFloat()},t.prototype.getNormalizationPositionDefaultValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(b).toFloat()},t.prototype.getNormalizationAngleMinimumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(y).toFloat()},t.prototype.getNormalizationAngleMaximumValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(v).toFloat()},t.prototype.getNormalizationAngleDefaultValue=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(b).toFloat()},t.prototype.getInputCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getVector().getSize()},t.prototype.getInputWeight=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getInputReflect=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getInputType=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(c).getRawString()},t.prototype.getInputSourceId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString("Source").getValueByString("Id").getRawString())},t.prototype.getOutputCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getVector().getSize()},t.prototype.getOutputVertexIndex=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("VertexIndex").toInt()},t.prototype.getOutputAngleScale=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Scale").toFloat()},t.prototype.getOutputWeight=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getOutputDestinationId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Destination").getValueByString("Id").getRawString())},t.prototype.getOutputType=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(c).getRawString()},t.prototype.getOutputReflect=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getParticleCount=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getVector().getSize()},t.prototype.getParticleMobility=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Mobility").toFloat()},t.prototype.getParticleDelay=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Delay").toFloat()},t.prototype.getParticleAcceleration=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Acceleration").toFloat()},t.prototype.getParticleRadius=function(t,e){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Radius").toFloat()},t.prototype.getParticlePosition=function(t,e){var i=new s.CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("Y").toFloat(),i},t}();e.CubismPhysicsJson=B;var w=o(i(3629));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsJson=w.CubismPhysicsJson},652:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTextureColor=e.CubismBlendMode=e.CubismRenderer=void 0;var a,s=i(1580),u=function(){function t(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisortopy=0,this._model=null,this._modelColor=new l,this._mvpMatrix4x4=new s.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}return t.create=function(){return null},t.delete=function(t){},t.prototype.initialize=function(t){this._model=t},t.prototype.drawModel=function(){null!=this.getModel()&&this.doDrawModel()},t.prototype.setMvpMatrix=function(t){this._mvpMatrix4x4.setMatrix(t.getArray())},t.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},t.prototype.setModelColor=function(t,e,i,r){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=r},t.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},t.prototype.setIsPremultipliedAlpha=function(t){this._isPremultipliedAlpha=t},t.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},t.prototype.setIsCulling=function(t){this._isCulling=t},t.prototype.isCulling=function(){return this._isCulling},t.prototype.setAnisotropy=function(t){this._anisortopy=t},t.prototype.getAnisotropy=function(){return this._anisortopy},t.prototype.getModel=function(){return this._model},t}();e.CubismRenderer=u,(a=e.CubismBlendMode||(e.CubismBlendMode={}))[a.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",a[a.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",a[a.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative";var l=function(){this.R=1,this.G=1,this.B=1,this.A=1};e.CubismTextureColor=l;var h,c=o(i(652));(h=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismBlendMode=c.CubismBlendMode,h.CubismRenderer=c.CubismRenderer,h.CubismTextureColor=c.CubismTextureColor},6753:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismRenderer_WebGL=e.fragmentShaderSrcMaskInvertedPremultipliedAlpha=e.fragmentShaderSrcMaskPremultipliedAlpha=e.fragmentShaderSrcPremultipliedAlpha=e.vertexShaderSrcMasked=e.vertexShaderSrc=e.fragmentShaderSrcsetupMask=e.vertexShaderSrcSetupMask=e.ShaderNames=e.CubismShaderSet=e.CubismShader_WebGL=e.CubismClippingContext=e.CubismRenderTextureResource=e.CubismClippingManager_WebGL=void 0;var u,l,h,c=i(9007),p=i(1580),d=i(7274),g=i(973),_=i(1502),m=i(6734),f=i(652),y=function(){function t(){this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new _.csmVector,this._clippingContextListForDraw=new _.csmVector,this._channelColors=new _.csmVector,this._tmpBoundsOnModel=new g.csmRect,this._tmpMatrix=new p.CubismMatrix44,this._tmpMatrixForMask=new p.CubismMatrix44,this._tmpMatrixForDraw=new p.CubismMatrix44,this._maskTexture=null;var t=new f.CubismTextureColor;t.R=1,t.G=0,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=1,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=1,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=0,t.A=1,this._channelColors.pushBack(t)}return t.prototype.getChannelFlagAsColor=function(t){return this._channelColors.at(t)},t.prototype.getMaskRenderTexture=function(){var t=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,t=this._maskTexture.texture),0==t){var e=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,t),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,h),this._maskTexture=new v(this._currentFrameNo,t)}return t},t.prototype.setGL=function(t){this.gl=t},t.prototype.calcClippedDrawTotalBounds=function(t,e){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,n=Number.MIN_VALUE,o=Number.MIN_VALUE,a=e._clippedDrawableIndexList.length,s=0;s<a;s++){for(var u=e._clippedDrawableIndexList[s],l=t.getDrawableVertexCount(u),h=t.getDrawableVertices(u),p=Number.MAX_VALUE,d=Number.MAX_VALUE,g=Number.MIN_VALUE,_=Number.MIN_VALUE,m=l*c.Constant.vertexStep,f=c.Constant.vertexOffset;f<m;f+=c.Constant.vertexStep){var y=h[f],v=h[f+1];y<p&&(p=y),y>g&&(g=y),v<d&&(d=v),v>_&&(_=v)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),d<r&&(r=d),g>n&&(n=g),_>o&&(o=_),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;var b=n-i,C=o-r;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=r,e._allClippedDrawRect.width=b,e._allClippedDrawRect.height=C}}},t.prototype.release=function(){for(var t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);for(this._clippingContextListForMask=null,t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);for(this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null),t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null},t.prototype.initialize=function(t,e,i,r){for(var n=0;n<e;n++)if(r[n]<=0)this._clippingContextListForDraw.pushBack(null);else{var o=this.findSameClip(i[n],r[n]);null==o&&(o=new b(this,i[n],r[n]),this._clippingContextListForMask.pushBack(o)),o.addClippedDrawable(n),this._clippingContextListForDraw.pushBack(o)}},t.prototype.setupClippingContext=function(t,e){this._currentFrameNo++;for(var i=0,r=0;r<this._clippingContextListForMask.getSize();r++){var n=this._clippingContextListForMask.at(r);this.calcClippedDrawTotalBounds(t,n),n._isUsing&&i++}if(i>0){for(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture(),e.getMvpMatrix(),e.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),r=0;r<this._clippingContextListForMask.getSize();r++){var o=this._clippingContextListForMask.at(r),a=o._allClippedDrawRect,s=o._layoutBounds;this._tmpBoundsOnModel.setRect(a),this._tmpBoundsOnModel.expand(.05*a.width,.05*a.height);var u=s.width/this._tmpBoundsOnModel.width,c=s.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,c),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,c),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),o._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),o._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());for(var p=o._clippingIdCount,d=0;d<p;d++){var g=o._clippingIdList[d];t.getDrawableDynamicFlagVertexPositionsDidChange(g)&&(e.setIsCulling(0!=t.getDrawableCulling(g)),e.setClippingContextBufferForMask(o),e.drawMesh(t.getDrawableTextureIndices(g),t.getDrawableVertexIndexCount(g),t.getDrawableVertexCount(g),t.getDrawableVertexIndices(g),t.getDrawableVertices(g),t.getDrawableVertexUvs(g),t.getDrawableOpacity(g),f.CubismBlendMode.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,h),e.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3])}},t.prototype.findSameClip=function(t,e){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),n=r._clippingIdCount;if(n==e){for(var o=0,a=0;a<n;a++)for(var s=r._clippingIdList[a],u=0;u<n;u++)if(t[u]==s){o++;break}if(o==n)return r}}return null},t.prototype.setupLayoutBounds=function(t){var e=t/4,i=t%4;e=~~e,i=~~i;for(var r=0,n=0;n<4;n++){var o=e+(n<i?1:0);if(0==o);else if(1==o){var a=this._clippingContextListForMask.at(r++);a._layoutChannelNo=n,a._layoutBounds.x=0,a._layoutBounds.y=0,a._layoutBounds.width=1,a._layoutBounds.height=1}else if(2==o)for(var s=0;s<o;s++)u=~~(u=s%2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=.5*u,h._layoutBounds.y=0,h._layoutBounds.width=.5,h._layoutBounds.height=1;else if(o<=4)for(s=0;s<o;s++)u=~~(u=s%2),l=~~(l=s/2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=.5*u,h._layoutBounds.y=.5*l,h._layoutBounds.width=.5,h._layoutBounds.height=.5;else if(o<=9)for(s=0;s<o;s++){var u,l,h;u=~~(u=s%3),l=~~(l=s/3),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=u/3,h._layoutBounds.y=l/3,h._layoutBounds.width=1/3,h._layoutBounds.height=1/3}else(0,m.CubismLogError)("not supported mask count : {0}",o)}},t.prototype.getColorBuffer=function(){return this._colorBuffer},t.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},t.prototype.setClippingMaskBufferSize=function(t){this._clippingMaskBufferSize=t},t.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},t}();e.CubismClippingManager_WebGL=y;var v=function(t,e){this.frameNo=t,this.texture=e};e.CubismRenderTextureResource=v;var b=function(){function t(t,e,i){this._owner=t,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new g.csmRect,this._layoutBounds=new g.csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new p.CubismMatrix44,this._matrixForDraw=new p.CubismMatrix44}return t.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},t.prototype.addClippedDrawable=function(t){this._clippedDrawableIndexList.push(t)},t.prototype.getClippingManager=function(){return this._owner},t.prototype.setGl=function(t){this._owner.setGL(t)},t}();e.CubismClippingContext=b;var C=function(){function t(){this._shaderSets=new _.csmVector}return t.getInstance=function(){return null==u?u=new t:u},t.deleteInstance=function(){u&&(u.release(),u=null)},t.prototype.release=function(){this.releaseShaderProgram()},t.prototype.setupShaderProgram=function(t,e,i,r,n,o,a,s,u,l,h,c,p){var d,g,_,y;if(h||(0,m.CubismLogError)("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){var v=this._shaderSets.at(S.ShaderNames_SetupMask);this.gl.useProgram(v.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(v.samplerTexture0Location,0),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributePositionLocation),this.gl.vertexAttribPointer(v.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributeTexCoordLocation),this.gl.vertexAttribPointer(v.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var b=t.getClippingContextBufferForMask()._layoutChannelNo,C=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(b);this.gl.uniform4f(v.uniformChannelFlagLocation,C.R,C.G,C.B,C.A),this.gl.uniformMatrix4fv(v.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());var M=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(v.uniformBaseColorLocation,2*M.x-1,2*M.y-1,2*M.getRight()-1,2*M.getBottom()-1),d=this.gl.ZERO,g=this.gl.ONE_MINUS_SRC_COLOR,_=this.gl.ZERO,y=this.gl.ONE_MINUS_SRC_ALPHA}else{var x=null!=t.getClippingContextBufferForDraw(),B=x?p?2:1:0;switch(v=new P,u){case f.CubismBlendMode.CubismBlendMode_Normal:default:v=this._shaderSets.at(S.ShaderNames_NormalPremultipliedAlpha+B),d=this.gl.ONE,g=this.gl.ONE_MINUS_SRC_ALPHA,_=this.gl.ONE,y=this.gl.ONE_MINUS_SRC_ALPHA;break;case f.CubismBlendMode.CubismBlendMode_Additive:v=this._shaderSets.at(S.ShaderNames_AddPremultipliedAlpha+B),d=this.gl.ONE,g=this.gl.ONE,_=this.gl.ZERO,y=this.gl.ONE;break;case f.CubismBlendMode.CubismBlendMode_Multiplicative:v=this._shaderSets.at(S.ShaderNames_MultPremultipliedAlpha+B),d=this.gl.DST_COLOR,g=this.gl.ONE_MINUS_SRC_ALPHA,_=this.gl.ZERO,y=this.gl.ONE}if(this.gl.useProgram(v.shaderProgram),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributePositionLocation),this.gl.vertexAttribPointer(v.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributeTexCoordLocation),this.gl.vertexAttribPointer(v.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),x){this.gl.activeTexture(this.gl.TEXTURE1);var w=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,w),this.gl.uniform1i(v.samplerTexture1Location,1),this.gl.uniformMatrix4fv(v.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray()),b=t.getClippingContextBufferForDraw()._layoutChannelNo,C=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(b),this.gl.uniform4f(v.uniformChannelFlagLocation,C.R,C.G,C.B,C.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(v.samplerTexture0Location,0),this.gl.uniformMatrix4fv(v.uniformMatrixLocation,!1,c.getArray()),this.gl.uniform4f(v.uniformBaseColorLocation,l.R,l.G,l.B,l.A)}null==a.index&&(a.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,a.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,n,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(d,g,_,y)},t.prototype.releaseShaderProgram=function(){for(var t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)},t.prototype.generateShaders=function(){for(var t=0;t<10;t++)this._shaderSets.pushBack(new P);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcSetupMask,e.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(e.vertexShaderSrc,e.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor")},t.prototype.loadShaderProgram=function(t,e){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!r)return(0,m.CubismLogError)("Vertex shader compile error!"),0;var n=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return n?(this.gl.attachShader(i,r),this.gl.attachShader(i,n),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(n),i):((0,m.CubismLogError)("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(n),n=0,i&&(this.gl.deleteProgram(i),i=0),0)):((0,m.CubismLogError)("Vertex shader compile error!"),0)},t.prototype.compileShaderSource=function(t,e){var i=e,r=this.gl.createShader(t);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var n=this.gl.getShaderInfoLog(r);(0,m.CubismLogError)("Shader compile log: {0} ",n)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},t.prototype.setGl=function(t){this.gl=t},t}();e.CubismShader_WebGL=C;var S,P=function(){};e.CubismShaderSet=P,function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(S=e.ShaderNames||(e.ShaderNames={})),e.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",e.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}",e.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",e.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}";var M=function(t){function e(){var e=t.call(this)||this;return e._clippingContextBufferForMask=null,e._clippingContextBufferForDraw=null,e._clippingManager=new y,e.firstDraw=!0,e._textures=new d.csmMap,e._sortedDrawableIndexList=new _.csmVector,e._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},e._textures.prepareCapacity(32,!0),e}return n(e,t),e.prototype.initialize=function(e){e.isUsingMasking()&&(this._clippingManager=new y,this._clippingManager.initialize(e,e.getDrawableCount(),e.getDrawableMasks(),e.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(e.getDrawableCount(),0),t.prototype.initialize.call(this,e)},e.prototype.bindTexture=function(t,e){this._textures.setValue(t,e)},e.prototype.getBindedTextures=function(){return this._textures},e.prototype.setClippingMaskBufferSize=function(t){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new y,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())},e.prototype.getClippingMaskBufferSize=function(){return this._clippingManager.getClippingMaskBufferSize()},e.prototype.release=function(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null},e.prototype.doDrawModel=function(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders(),i=0;i<t;++i){var r=e[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<t;++i){var n=this._sortedDrawableIndexList.at(i);this.getModel().getDrawableDynamicFlagIsVisible(n)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(n):null),this.setIsCulling(this.getModel().getDrawableCulling(n)),this.drawMesh(this.getModel().getDrawableTextureIndices(n),this.getModel().getDrawableVertexIndexCount(n),this.getModel().getDrawableVertexCount(n),this.getModel().getDrawableVertexIndices(n),this.getModel().getDrawableVertices(n),this.getModel().getDrawableVertexUvs(n),this.getModel().getDrawableOpacity(n),this.getModel().getDrawableBlendMode(n),this.getModel().getDrawableInvertedMaskBit(n)))}},e.prototype.drawMesh=function(t,e,i,r,n,o,a,s,u){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var l,h=this.getModelColor();null==this.getClippingContextBufferForMask()&&(h.A*=a,this.isPremultipliedAlpha()&&(h.R*=h.A,h.G*=h.A,h.B*=h.A)),l=null!=this._textures.getValue(t)?this._textures.getValue(t):null,C.getInstance().setupShaderProgram(this,l,i,n,r,o,this._bufferData,a,s,h,this.isPremultipliedAlpha(),this.getMvpMatrix(),u),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},e.doStaticRelease=function(){C.deleteInstance()},e.prototype.setRenderState=function(t,e){h=t,l=e},e.prototype.preDraw=function(){this.firstDraw&&(this.firstDraw=!1,this._anisortopy=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)},e.prototype.setClippingContextBufferForMask=function(t){this._clippingContextBufferForMask=t},e.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},e.prototype.setClippingContextBufferForDraw=function(t){this._clippingContextBufferForDraw=t},e.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},e.prototype.startUp=function(t){this.gl=t,this._clippingManager.setGL(t),C.getInstance().setGl(t)},e}(f.CubismRenderer);e.CubismRenderer_WebGL=M,f.CubismRenderer.staticRelease=function(){M.doStaticRelease()};var x,B=s(i(6753));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismClippingContext=B.CubismClippingContext,x.CubismClippingManager_WebGL=B.CubismClippingManager_WebGL,x.CubismRenderTextureResource=B.CubismRenderTextureResource,x.CubismRenderer_WebGL=B.CubismRenderer_WebGL,x.CubismShaderSet=B.CubismShaderSet,x.CubismShader_WebGL=B.CubismShader_WebGL,x.ShaderNames=B.ShaderNames},7274:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmMap=e.csmPair=void 0;var a=i(6734),s=function(t,e){this.first=null==t?null:t,this.second=null==e?null:e};e.csmPair=s;var u=function(){function t(t){null!=t?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}return t.prototype.release=function(){this.clear()},t.prototype.appendKey=function(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new s(t),this._size+=1},t.prototype.getValue=function(t){for(var e=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)},t.prototype.setValue=function(t,e){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==t){i=r;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)},t.prototype.isExist=function(t){for(var e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1},t.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.prepareCapacity=function(e,i){e>this._keyValues.length&&(0==this._keyValues.length?(!i&&e<t.DefaultSize&&(e=t.DefaultSize),this._keyValues.length=e):(!i&&e<2*this._keyValues.length&&(e=2*this._keyValues.length),this._keyValues.length=e))},t.prototype.begin=function(){return new l(this,0)},t.prototype.end=function(){return new l(this,this._size)},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new l(this,e))},t.prototype.dumpAsInt=function(){for(var t=0;t<this._size;t++)(0,a.CubismLogDebug)("{0} ,",this._keyValues[t]),(0,a.CubismLogDebug)("\n")},t.DefaultSize=10,t}();e.csmMap=u;var l=function(){function t(t,e){this._map=null!=t?t:new u,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._map=t._map,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._map,this._index++)},t.prototype.decrement=function(){var e=new t(this._map,this._index);return this._map=e._map,this._index=e._index,this},t.prototype.ptr=function(){return this._map._keyValues[this._index]},t.prototype.notEqual=function(t){return this._index!=t._index||this._map!=t._map},t}();e.iterator=l;var h,c=o(i(7274));(h=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmMap=c.csmMap,h.csmPair=c.csmPair,h.iterator=c.iterator},973:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmRect=void 0;var a=function(){function t(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}return t.prototype.getCenterX=function(){return this.x+.5*this.width},t.prototype.getCenterY=function(){return this.y+.5*this.height},t.prototype.getRight=function(){return this.x+this.width},t.prototype.getBottom=function(){return this.y+this.height},t.prototype.setRect=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},t.prototype.expand=function(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},t}();e.csmRect=a;var s=o(i(973));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmRect=s.csmRect},1300:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmString=void 0;var a=function(){function t(t){this.s=t}return t.prototype.append=function(t,e){return this.s+=void 0!==e?t.substr(0,e):t,this},t.prototype.expansion=function(t,e){for(var i=0;i<t;i++)this.append(e);return this},t.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},t.prototype.getLength=function(){return this.s.length},t.prototype.isLess=function(t){return this.s<t.s},t.prototype.isGreat=function(t){return this.s>t.s},t.prototype.isEqual=function(t){return this.s==t},t.prototype.isEmpty=function(){return 0==this.s.length},t}();e.csmString=a;var s=o(i(1300));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmString=s.csmString},1502:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmVector=void 0;var a=function(){function t(t){void 0===t&&(t=0),t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}return t.prototype.at=function(t){return this._ptr[t]},t.prototype.set=function(t,e){this._ptr[t]=e},t.prototype.get=function(t){void 0===t&&(t=0);for(var e=new Array,i=t;i<this._size;i++)e.push(this._ptr[i]);return e},t.prototype.pushBack=function(e){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?t.s_defaultSize:2*this._capacity),this._ptr[this._size++]=e},t.prototype.clear=function(){this._ptr.length=0,this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.assign=function(t,e){this._size<t&&this.prepareCapacity(t);for(var i=0;i<t;i++)this._ptr[i]=e;this._size=t},t.prototype.resize=function(t,e){void 0===e&&(e=null),this.updateSize(t,e,!0)},t.prototype.updateSize=function(t,e,i){if(void 0===e&&(e=null),void 0===i&&(i=!0),this._size<t)if(this.prepareCapacity(t),i)for(var r=this._size;r<t;r++)this._ptr[r]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(r=this._size;r<t;r++)this._ptr[r]=e;else{var n=this._size-t;this._ptr.splice(this._size-n,n)}this._size=t},t.prototype.insert=function(t,e,i){var r=t._index,n=e._index,o=i._index,a=o-n;this.prepareCapacity(this._size+a);var s=this._size-r;if(s>0)for(var u=0;u<s;u++)this._ptr.splice(r+u,0,null);for(u=n;u<o;u++,r++)this._ptr[r]=e._vector._ptr[u];this._size=this._size+a},t.prototype.remove=function(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new s(this,e))},t.prototype.prepareCapacity=function(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))},t.prototype.begin=function(){return 0==this._size?this.end():new s(this,0)},t.prototype.end=function(){return new s(this,this._size)},t.prototype.getOffset=function(e){var i=new t;return i._ptr=this.get(e),i._size=this.get(e).length,i._capacity=this.get(e).length,i},t.s_defaultSize=10,t}();e.csmVector=a;var s=function(){function t(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._vector,this._index++)},t.prototype.decrement=function(){return new t(this._vector,this._index--)},t.prototype.ptr=function(){return this._vector._ptr[this._index]},t.prototype.substitution=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.notEqual=function(t){return this._index!=t._index||this._vector!=t._vector},t}();e.iterator=s;var u,l=o(i(1502));(u=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmVector=l.csmVector,u.iterator=l.iterator},6734:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDebug=e.CubismLogError=e.CubismLogWarning=e.CubismLogInfo=e.CubismLogDebug=e.CubismLogVerbose=e.CSM_ASSERT=e.CubismLogPrintIn=e.CubismLogPrint=void 0;var a=i(9751),s=i(9007);e.CubismLogPrint=function(t,e,i){u.print(t,"[CSM]"+e,i)},e.CubismLogPrintIn=function(t,i,r){(0,e.CubismLogPrint)(t,i+"\n",r)},e.CSM_ASSERT=function(t){console.assert(t)},a.CSM_LOG_LEVEL<=a.CSM_LOG_LEVEL_VERBOSE?(e.CubismLogVerbose=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Verbose,"[V]"+t,i)},e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_DEBUG?(e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_INFO?(e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_WARNING?(e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_ERROR&&(e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)});var u=function(){function t(){}return t.print=function(t,e,i){if(!(t<s.CubismFramework.getLoggingLevel())){var r=s.CubismFramework.coreLogFunction;r&&r(e.replace(/\{(\d+)\}/g,(function(t,e){return i[e]})))}},t.dumpBytes=function(t,e,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(t,"\n"):r%8==0&&r>0&&this.print(t,"  "),this.print(t,"{0} ",[255&e[r]]);this.print(t,"\n")},t}();e.CubismDebug=u;var l=o(i(6734));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismDebug=l.CubismDebug},9680:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.JsonMap=e.JsonArray=e.JsonNullvalue=e.JsonError=e.JsonString=e.JsonBoolean=e.JsonFloat=e.CubismJson=e.Value=void 0;var u=i(9007),l=i(7274),h=i(1300),c=i(1502),p=i(6734),d="Error: type mismatch",g=function(){function t(){}return t.prototype.getRawString=function(t,e){return this.getString(t,e)},t.prototype.toInt=function(t){return void 0===t&&(t=0),t},t.prototype.toFloat=function(t){return void 0===t&&(t=0),t},t.prototype.toBoolean=function(t){return void 0===t&&(t=!1),t},t.prototype.getSize=function(){return 0},t.prototype.getArray=function(t){return void 0===t&&(t=null),t},t.prototype.getVector=function(t){return void 0===t&&(t=new c.csmVector),t},t.prototype.getMap=function(t){return t},t.prototype.getValueByIndex=function(e){return t.errorValue.setErrorNotForClientCall(d)},t.prototype.getValueByString=function(e){return t.nullValue.setErrorNotForClientCall(d)},t.prototype.getKeys=function(){return t.s_dummyKeys},t.prototype.isError=function(){return!1},t.prototype.isNull=function(){return!1},t.prototype.isBool=function(){return!1},t.prototype.isFloat=function(){return!1},t.prototype.isString=function(){return!1},t.prototype.isArray=function(){return!1},t.prototype.isMap=function(){return!1},t.prototype.equals=function(t){return!1},t.prototype.isStatic=function(){return!1},t.prototype.setErrorNotForClientCall=function(t){return v.errorValue},t.staticInitializeNotForClientCall=function(){f.trueValue=new f(!0),f.falseValue=new f(!1),t.errorValue=new v("ERROR",!0),t.nullValue=new b,t.s_dummyKeys=new c.csmVector},t.staticReleaseNotForClientCall=function(){f.trueValue=null,f.falseValue=null,t.errorValue=null,t.nullValue=null,t.s_dummyKeys=null},t}();e.Value=g;var _=function(){function t(t,e){this._error=null,this._lineCount=0,this._root=null,null!=t&&this.parseBytes(t,e)}return t.create=function(e,i){var r=new t;return r.parseBytes(e,i)?r:(t.delete(r),null)},t.delete=function(t){},t.prototype.getRoot=function(){return this._root},t.prototype.arrayBufferToString=function(t){for(var e=new Uint8Array(t),i="",r=0,n=e.length;r<n;++r)i+="%"+this.pad(e[r].toString(16));return decodeURIComponent(i)},t.prototype.pad=function(t){return t.length<2?"0"+t:t},t.prototype.parseBytes=function(t,e){var i,r=new Array(1),n=this.arrayBufferToString(t);return this._root=this.parseValue(n,e,0,r),this._error?(i="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new y(i),(0,p.CubismLogInfo)("{0}",this._root.getRawString()),!1):null!=this._root||(this._root=new v(new h.csmString(this._error),!1),!1)},t.prototype.getParseError=function(){return this._error},t.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},t.prototype.parseValue=function(t,e,i,r){if(this._error)return null;for(var n,o=null,a=i;a<e;a++)switch(t[a]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var s=new Array(1);return n=(0,u.strtod)(t.slice(a),s),r[0]=t.indexOf(s[0]),new m(n);case'"':return new y(this.parseString(t,e,a+1,r));case"[":return this.parseArray(t,e,a+1,r);case"{":return this.parseObject(t,e,a+1,r);case"n":return a+3<e?(o=new b,r[0]=a+4):this._error="parse null",o;case"t":return a+3<e?(o=f.trueValue,r[0]=a+4):this._error="parse true",o;case"f":return a+4<e?(o=f.falseValue,r[0]=a+5):this._error="illegal ',' position",o;case",":return this._error="illegal ',' position",null;case"]":return r[0]=a,null;case"\n":this._lineCount++}return this._error="illegal end of value",null},t.prototype.parseString=function(t,e,i,r){if(this._error)return null;for(var n=i,o=new h.csmString(""),a=i;n<e;n++)switch(t[n]){case'"':return r[0]=n+1,o.append(t.slice(a),n-a),o.s;case"//":if(++n-1>a&&o.append(t.slice(a),n-a),a=n+1,n<e)switch(t[n]){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},t.prototype.parseObject=function(t,e,i,r){if(this._error)return null;for(var n=new S,o="",a=i,s=Array(1),u=!1;a<e;a++){t:for(;a<e;a++)switch(t[a]){case'"':if(o=this.parseString(t,e,a+1,s),this._error)return null;a=s[0],u=!0;break t;case"}":return r[0]=a+1,n;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;a<e;a++)switch(t[a]){case":":u=!0,a++;break t;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(t,e,a,s);if(this._error)return null;a=s[0],n.put(o,l);t:for(;a<e;a++)switch(t[a]){case",":break t;case"}":return r[0]=a+1,n;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},t.prototype.parseArray=function(t,e,i,r){if(this._error)return null;for(var n=new C,o=i,a=new Array(1);o<e;o++){var s=this.parseValue(t,e,o,a);if(this._error)return null;o=a[0],s&&n.add(s);t:for(;o<e;o++)switch(t[o]){case",":break t;case"]":return r[0]=o+1,n;case"\n":++this._lineCount}}return n=void 0,this._error="illegal end of parseObject",null},t}();e.CubismJson=_;var m=function(t){function e(e){var i=t.call(this)||this;return i._value=e,i}return n(e,t),e.prototype.isFloat=function(){return!0},e.prototype.getString=function(t,e){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},e.prototype.toInt=function(t){return void 0===t&&(t=0),parseInt(this._value.toString())},e.prototype.toFloat=function(t){return void 0===t&&(t=0),this._value},e.prototype.equals=function(t){return"number"==typeof t&&!Math.round(t)&&t==this._value},e}(g);e.JsonFloat=m;var f=function(t){function e(e){var i=t.call(this)||this;return i._boolValue=e,i}return n(e,t),e.prototype.isBool=function(){return!0},e.prototype.toBoolean=function(t){return void 0===t&&(t=!1),this._boolValue},e.prototype.getString=function(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},e.prototype.equals=function(t){return"boolean"==typeof t&&t==this._boolValue},e.prototype.isStatic=function(){return!0},e}(g);e.JsonBoolean=f;var y=function(t){function e(e){var i=t.call(this)||this;return"string"==typeof e&&(i._stringBuffer=e),e instanceof h.csmString&&(i._stringBuffer=e.s),i}return n(e,t),e.prototype.isString=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.equals=function(t){return"string"==typeof t?this._stringBuffer==t:t instanceof h.csmString&&this._stringBuffer==t.s},e}(g);e.JsonString=y;var v=function(t){function e(e,i){var r=this;return(r=t.call(this,e)||this)._isStatic=i,r}return n(e,t),e.prototype.isStatic=function(){return this._isStatic},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,this},e.prototype.isError=function(){return!0},e}(y);e.JsonError=v;var b=function(t){function e(){var e=t.call(this)||this;return e._stringBuffer="NullValue",e}return n(e,t),e.prototype.isNull=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.isStatic=function(){return!0},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,v.nullValue},e}(g);e.JsonNullvalue=b;var C=function(t){function e(){var e=t.call(this)||this;return e._array=new c.csmVector,e}return n(e,t),e.prototype.release=function(){for(var t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){var e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}},e.prototype.isArray=function(){return!0},e.prototype.getValueByIndex=function(t){if(t<0||this._array.getSize()<=t)return g.errorValue.setErrorNotForClientCall("Error: index out of bounds");var e=this._array.at(t);return null==e?g.nullValue:e},e.prototype.getValueByString=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){for(var i=e+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var n=r.ptr();this._stringBuffer+=e+""+n.getString(e+" ")+"\n"}return this._stringBuffer=i+e+"]\n",this._stringBuffer},e.prototype.add=function(t){this._array.pushBack(t)},e.prototype.getVector=function(t){return void 0===t&&(t=null),this._array},e.prototype.getSize=function(){return this._array.getSize()},e}(g);e.JsonArray=C;var S=function(t){function e(){var e=t.call(this)||this;return e._map=new l.csmMap,e}return n(e,t),e.prototype.release=function(){for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}},e.prototype.isMap=function(){return!0},e.prototype.getValueByString=function(t){if(t instanceof h.csmString){var e=this._map.getValue(t.s);return null==e?g.nullValue:e}for(var i=this._map.begin();i.notEqual(this._map.end());i.preIncrement())if(i.ptr().first==t)return null==i.ptr().second?g.nullValue:i.ptr().second;return g.nullValue},e.prototype.getValueByIndex=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){this._stringBuffer=e+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,n=i.ptr().second;this._stringBuffer+=e+" "+r+" : "+n.getString(e+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=e+"}\n",this._stringBuffer},e.prototype.getMap=function(t){return this._map},e.prototype.put=function(t,e){this._map.setValue(t,e)},e.prototype.getKeys=function(){if(!this._keys){this._keys=new c.csmVector;for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().first;this._keys.pushBack(e),t.preIncrement()}}return this._keys},e.prototype.getSize=function(){return this._keys.getSize()},e}(g);e.JsonMap=S;var P,M=s(i(9680));(P=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismJson=M.CubismJson,P.JsonArray=M.JsonArray,P.JsonBoolean=M.JsonBoolean,P.JsonError=M.JsonError,P.JsonFloat=M.JsonFloat,P.JsonMap=M.JsonMap,P.JsonNullvalue=M.JsonNullvalue,P.JsonString=M.JsonString,P.Value=M.Value},9556:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.RenderTargetHeight=e.RenderTargetWidth=e.CubismLoggingLevel=e.DebugTouchLogEnable=e.DebugLogEnable=e.PriorityForce=e.PriorityNormal=e.PriorityIdle=e.PriorityNone=e.HitAreaNameBody=e.HitAreaNameHead=e.MotionGroupTapBody=e.MotionGroupIdle=e.ModelDirSize=e.ModelDir=e.PowerImageName=e.BackImageName=e.ResourcesPath=e.ViewLogicalMaxTop=e.ViewLogicalMaxBottom=e.ViewLogicalMaxRight=e.ViewLogicalMaxLeft=e.ViewLogicalTop=e.ViewLogicalBottom=e.ViewLogicalRight=e.ViewLogicalLeft=e.ViewMinScale=e.ViewMaxScale=e.ViewScale=e.CanvasSize=void 0;var r=i(9007);e.CanvasSize={width:800,height:800},e.ViewScale=1,e.ViewMaxScale=2,e.ViewMinScale=.8,e.ViewLogicalLeft=-1,e.ViewLogicalRight=1,e.ViewLogicalBottom=-1,e.ViewLogicalTop=1,e.ViewLogicalMaxLeft=-2,e.ViewLogicalMaxRight=2,e.ViewLogicalMaxBottom=-2,e.ViewLogicalMaxTop=2,e.ResourcesPath="../Resources/",e.BackImageName="living01.png",e.PowerImageName="CloseNormal.png",e.ModelDir=["Haru","nuru"],e.ModelDirSize=e.ModelDir.length,e.MotionGroupIdle="Idle",e.MotionGroupTapBody="TapBody",e.HitAreaNameHead="Head",e.HitAreaNameBody="Body",e.PriorityNone=0,e.PriorityIdle=1,e.PriorityNormal=2,e.PriorityForce=3,e.DebugLogEnable=!0,e.DebugTouchLogEnable=!1,e.CubismLoggingLevel=r.LogLevel.LogLevel_Verbose,e.RenderTargetWidth=1900,e.RenderTargetHeight=1e3},7551:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppDelegate=e.frameBuffer=e.gl=e.s_instance=e.canvas=void 0;var a=i(9007),s=o(i(9556)),u=i(6424),l=i(1986),h=i(3938),c=i(4585);e.canvas=null,e.s_instance=null,e.gl=null,e.frameBuffer=null;var p=function(){function t(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new a.Option,this._view=new c.LAppView,this._textureManager=new h.LAppTextureManager}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&e.s_instance.release(),e.s_instance=null},t.prototype.initialize=function(){return e.canvas=document.createElement("canvas"),"auto"===s.CanvasSize?this._resizeCanvas():(e.canvas.width=s.CanvasSize.width,e.canvas.height=s.CanvasSize.height),e.gl=e.canvas.getContext("webgl")||e.canvas.getContext("experimental-webgl"),e.gl?(document.body.appendChild(e.canvas),e.frameBuffer||(e.frameBuffer=e.gl.getParameter(e.gl.FRAMEBUFFER_BINDING)),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),"ontouchend"in e.canvas?(e.canvas.ontouchstart=m,e.canvas.ontouchmove=f,e.canvas.ontouchend=y,e.canvas.ontouchcancel=v):(e.canvas.onmousedown=d,e.canvas.onmousemove=g,e.canvas.onmouseup=_),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),e.gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)},t.prototype.onResize=function(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite()},t.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,u.LAppLive2DManager.releaseInstance(),a.CubismFramework.dispose()},t.prototype.run=function(){var t=this,i=function(){null!=e.s_instance&&(l.LAppPal.updateTime(),e.gl.clearColor(0,0,0,1),e.gl.enable(e.gl.DEPTH_TEST),e.gl.depthFunc(e.gl.LEQUAL),e.gl.clear(e.gl.COLOR_BUFFER_BIT|e.gl.DEPTH_BUFFER_BIT),e.gl.clearDepth(1),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),t._view.render(),requestAnimationFrame(i))};i()},t.prototype.createShader=function(){var t=e.gl.createShader(e.gl.VERTEX_SHADER);if(null==t)return l.LAppPal.printMessage("failed to create vertexShader"),null;e.gl.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),e.gl.compileShader(t);var i=e.gl.createShader(e.gl.FRAGMENT_SHADER);if(null==i)return l.LAppPal.printMessage("failed to create fragmentShader"),null;e.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),e.gl.compileShader(i);var r=e.gl.createProgram();return e.gl.attachShader(r,t),e.gl.attachShader(r,i),e.gl.deleteShader(t),e.gl.deleteShader(i),e.gl.linkProgram(r),e.gl.useProgram(r),r},t.prototype.getView=function(){return this._view},t.prototype.getTextureManager=function(){return this._textureManager},t.prototype.initializeCubism=function(){this._cubismOption.logFunction=l.LAppPal.printMessage,this._cubismOption.loggingLevel=s.CubismLoggingLevel,a.CubismFramework.startUp(this._cubismOption),a.CubismFramework.initialize(),u.LAppLive2DManager.getInstance(),l.LAppPal.updateTime(),this._view.initializeSprite()},t.prototype._resizeCanvas=function(){e.canvas.width=window.innerWidth,e.canvas.height=window.innerHeight},t.onEventListened=function(t){var e=u.LAppLive2DManager.getInstance();"change"==t?e.nextScene():e.onListened(Number(t))},t}();function d(t){if(p.getInstance()._view){p.getInstance()._captured=!0;var e=t.pageX,i=t.pageY;p.getInstance()._view.onTouchesBegan(e,i)}else l.LAppPal.printMessage("view notfound")}function g(t){if(p.getInstance()._captured)if(p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.clientX-e.left,r=t.clientY-e.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function _(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.clientX-e.left,r=t.clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function m(t){if(p.getInstance()._view){p.getInstance()._captured=!0;var e=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY;p.getInstance()._view.onTouchesBegan(e,i)}else l.LAppPal.printMessage("view notfound")}function f(t){if(p.getInstance()._captured)if(p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function y(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function v(t){if(p.getInstance()._captured=!1,p.getInstance()._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}e.LAppDelegate=p},6424:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppLive2DManager=e.s_instance=void 0;var a=i(1580),s=i(1502),u=o(i(9556)),l=i(7551),h=i(398),c=i(1986);e.s_instance=null;var p=function(){function t(){this._finishedMotion=function(t){c.LAppPal.printMessage("Motion Finished:"),console.log(t)},this._viewMatrix=new a.CubismMatrix44,this._models=new s.csmVector,this._sceneIndex=0,this.changeScene(this._sceneIndex)}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&(e.s_instance=void 0),e.s_instance=null},t.prototype.getModel=function(t){return t<this._models.getSize()?this._models.at(t):null},t.prototype.releaseAllModel=function(){for(var t=0;t<this._models.getSize();t++)this._models.at(t).release(),this._models.set(t,null);this._models.clear()},t.prototype.onDrag=function(t,e){for(var i=0;i<this._models.getSize();i++){var r=this.getModel(i);r&&r.setDragging(t,e)}},t.prototype.onTap=function(t,e){u.DebugLogEnable&&c.LAppPal.printMessage("[APP]tap point: {x: ".concat(t.toFixed(2)," y: ").concat(e.toFixed(2),"}"));for(var i=0;i<this._models.getSize();i++)this._models.at(i).hitTest(u.HitAreaNameHead,t,e)?(u.DebugLogEnable&&c.LAppPal.printMessage("[APP]hit area: [".concat(u.HitAreaNameHead,"]")),this._models.at(i).setRandomExpression()):this._models.at(i).hitTest(u.HitAreaNameBody,t,e)&&(u.DebugLogEnable&&c.LAppPal.printMessage("[APP]hit area: [".concat(u.HitAreaNameBody,"]")),this._models.at(i).startRandomMotion(u.MotionGroupTapBody,u.PriorityNormal,this._finishedMotion))},t.prototype.onUpdate=function(){for(var t=l.canvas.width,e=l.canvas.height,i=this._models.getSize(),r=0;r<i;++r){var n=new a.CubismMatrix44,o=this.getModel(r);o.getModel()&&(o.getModel().getCanvasWidth()>1&&t<e?(o.getModelMatrix().setWidth(2),n.scale(1,t/e)):n.scale(e/t,1),null!=this._viewMatrix&&n.multiplyByMatrix(this._viewMatrix)),o.update(),o.draw(n)}},t.prototype.nextScene=function(){var t=(this._sceneIndex+1)%u.ModelDirSize;this.changeScene(t)},t.prototype.changeScene=function(t){this._sceneIndex=t,u.DebugLogEnable&&c.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));var e=u.ModelDir[t],i=u.ResourcesPath+e+"/",r=u.ModelDir[t];r+=".model3.json",this.releaseAllModel(),this._models.pushBack(new h.LAppModel),this._models.at(0).loadAssets(i,r)},t.prototype.setViewMatrix=function(t){for(var e=0;e<16;e++)this._viewMatrix.getArray()[e]=t.getArray()[e]},t.prototype.onListened=function(t){for(var e=0;e<this._models.getSize();e++)this._models.at(e).setNumExpression(t)},t}();e.LAppLive2DManager=p},398:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppModel=void 0,i(7147);var u,l=i(5964),h=i(9394),c=i(8950),p=i(8980),d=i(9007),g=i(5793),_=i(4229),m=i(4763),f=i(7274),y=i(1502),v=i(6734),b=s(i(9556)),C=i(7551),S=i(1986),P=i(5364);!function(t){t[t.LoadAssets=0]="LoadAssets",t[t.LoadModel=1]="LoadModel",t[t.WaitLoadModel=2]="WaitLoadModel",t[t.LoadExpression=3]="LoadExpression",t[t.WaitLoadExpression=4]="WaitLoadExpression",t[t.LoadPhysics=5]="LoadPhysics",t[t.WaitLoadPhysics=6]="WaitLoadPhysics",t[t.LoadPose=7]="LoadPose",t[t.WaitLoadPose=8]="WaitLoadPose",t[t.SetupEyeBlink=9]="SetupEyeBlink",t[t.SetupBreath=10]="SetupBreath",t[t.LoadUserData=11]="LoadUserData",t[t.WaitLoadUserData=12]="WaitLoadUserData",t[t.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",t[t.SetupLipSyncIds=14]="SetupLipSyncIds",t[t.SetupLayout=15]="SetupLayout",t[t.LoadMotion=16]="LoadMotion",t[t.WaitLoadMotion=17]="WaitLoadMotion",t[t.CompleteInitialize=18]="CompleteInitialize",t[t.CompleteSetupModel=19]="CompleteSetupModel",t[t.LoadTexture=20]="LoadTexture",t[t.WaitLoadTexture=21]="WaitLoadTexture",t[t.CompleteSetup=22]="CompleteSetup"}(u||(u={}));var M=function(t){function e(){var e=t.call(this)||this;return e._modelSetting=null,e._modelHomeDir=null,e._userTimeSeconds=0,e._eyeBlinkIds=new y.csmVector,e._lipSyncIds=new y.csmVector,e._motions=new f.csmMap,e._expressions=new f.csmMap,e._hitArea=new y.csmVector,e._userArea=new y.csmVector,e._idParamAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleX),e._idParamAngleY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleY),e._idParamAngleZ=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleZ),e._idParamEyeBallX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallX),e._idParamEyeBallY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallY),e._idParamBodyAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBodyAngleX),e._state=u.LoadAssets,e._expressionCount=0,e._textureCount=0,e._motionCount=0,e._allMotionCount=0,e._wavFileHandler=new P.LAppWavFileHandler,e}return n(e,t),e.prototype.loadAssets=function(t,e){var i=this;this._modelHomeDir=t,fetch("".concat(this._modelHomeDir).concat(e)).then((function(t){return t.arrayBuffer()})).then((function(t){var e=new h.CubismModelSettingJson(t,t.byteLength);i._state=u.LoadModel,i.setupModel(e)}))},e.prototype.setupModel=function(t){var e=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=t,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch("".concat(this._modelHomeDir).concat(i)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadModel(t),e._state=u.LoadExpression,r()})),this._state=u.WaitLoadModel}else S.LAppPal.printMessage("Model data does not exist.");var r=function(){if(e._modelSetting.getExpressionCount()>0){for(var t=e._modelSetting.getExpressionCount(),i=function(i){var r=e._modelSetting.getExpressionName(i),o=e._modelSetting.getExpressionFileName(i);fetch("".concat(e._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){var o=e.loadExpression(i,i.byteLength,r);null!=e._expressions.getValue(r)&&(_.ACubismMotion.delete(e._expressions.getValue(r)),e._expressions.setValue(r,null)),e._expressions.setValue(r,o),e._expressionCount++,e._expressionCount>=t&&(e._state=u.LoadPhysics,n())}))},r=0;r<t;r++)i(r);e._state=u.WaitLoadExpression}else e._state=u.LoadPhysics,n()},n=function(){if(""!=e._modelSetting.getPhysicsFileName()){var t=e._modelSetting.getPhysicsFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPhysics(t,t.byteLength),e._state=u.LoadPose,o()})),e._state=u.WaitLoadPhysics}else e._state=u.LoadPose,o()},o=function(){if(""!=e._modelSetting.getPoseFileName()){var t=e._modelSetting.getPoseFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPose(t,t.byteLength),e._state=u.SetupEyeBlink,a()})),e._state=u.WaitLoadPose}else e._state=u.SetupEyeBlink,a()},a=function(){e._modelSetting.getEyeBlinkParameterCount()>0&&(e._eyeBlink=p.CubismEyeBlink.create(e._modelSetting),e._state=u.SetupBreath),s()},s=function(){e._breath=c.CubismBreath.create();var t=new y.csmVector;t.pushBack(new c.BreathParameterData(e._idParamAngleX,0,15,6.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamAngleY,0,8,3.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamAngleZ,0,10,5.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamBodyAngleX,0,4,15.5345,.5)),t.pushBack(new c.BreathParameterData(d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),e._breath.setParameters(t),e._state=u.LoadUserData,h()},h=function(){if(""!=e._modelSetting.getUserDataFile()){var t=e._modelSetting.getUserDataFile();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadUserData(t,t.byteLength),e._state=u.SetupEyeBlinkIds,g()})),e._state=u.WaitLoadUserData}else e._state=u.SetupEyeBlinkIds,g()},g=function(){for(var t=e._modelSetting.getEyeBlinkParameterCount(),i=0;i<t;++i)e._eyeBlinkIds.pushBack(e._modelSetting.getEyeBlinkParameterId(i));e._state=u.SetupLipSyncIds,m()},m=function(){for(var t=e._modelSetting.getLipSyncParameterCount(),i=0;i<t;++i)e._lipSyncIds.pushBack(e._modelSetting.getLipSyncParameterId(i));e._state=u.SetupLayout,v()},v=function(){var t=new f.csmMap;e._modelSetting.getLayoutMap(t),e._modelMatrix.setupFromLayout(t),e._state=u.LoadMotion,b()},b=function(){e._state=u.WaitLoadMotion,e._model.saveParameters(),e._allMotionCount=0,e._motionCount=0;for(var t=[],i=e._modelSetting.getMotionGroupCount(),r=0;r<i;r++)t[r]=e._modelSetting.getMotionGroupName(r),e._allMotionCount+=e._modelSetting.getMotionCount(t[r]);for(r=0;r<i;r++)e.preLoadMotionGroup(t[r]);0==i&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}},e.prototype.setupTextures=function(){var t=this;if(this._state==u.LoadTexture){for(var e=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var n=r._modelSetting.getTextureFileName(i);n=r._modelHomeDir+n,C.LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(n,!0,(function(r){t.getRenderer().bindTexture(i,r.id),t._textureCount++,t._textureCount>=e&&(t._state=u.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,n=0;n<e;n++)i(n);this._state=u.WaitLoadTexture}},e.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},e.prototype.update=function(){if(this._state==u.CompleteSetup){var t=S.LAppPal.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(b.MotionGroupIdle,b.PriorityIdle):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,t),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,t),null!=this._physics&&this._physics.evaluate(this._model,t),this._lipsync){var i;this._wavFileHandler.update(t),i=this._wavFileHandler.getRms();for(var r=0;r<this._lipSyncIds.getSize();++r)this._model.addParameterValueById(this._lipSyncIds.at(r),i,.8)}null!=this._pose&&this._pose.updateParameters(this._model,t),this._model.update()}},e.prototype.startMotion=function(t,e,i,r){var n=this;if(i==b.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&S.LAppPal.printMessage("[APP]can't start motion."),m.InvalidMotionQueueEntryHandleValue;var o=this._modelSetting.getMotionFileName(t,e),a="".concat(t,"_").concat(e),s=this._motions.getValue(a),u=!1;null==s?fetch("".concat(this._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){s=n.loadMotion(i,i.byteLength,null,r);var o=n._modelSetting.getMotionFadeInTimeValue(t,e);o>=0&&s.setFadeInTime(o),(o=n._modelSetting.getMotionFadeOutTimeValue(t,e))>=0&&s.setFadeOutTime(o),s.setEffectIds(n._eyeBlinkIds,n._lipSyncIds),u=!0})):s.setFinishedMotionHandler(r);var l=this._modelSetting.getMotionSoundFileName(t,e);if(0!=l.localeCompare("")){var h=l;h=this._modelHomeDir+h,this._wavFileHandler.start(h)}return this._debugMode&&S.LAppPal.printMessage("[APP]start motion: [".concat(t,"_").concat(e)),this._motionManager.startMotionPriority(s,u,i)},e.prototype.startRandomMotion=function(t,e,i){if(0==this._modelSetting.getMotionCount(t))return m.InvalidMotionQueueEntryHandleValue;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,r,e,i)},e.prototype.setExpression=function(t){var e=this._expressions.getValue(t);this._debugMode&&S.LAppPal.printMessage("[APP]expression: [".concat(t,"]")),null!=e?this._expressionManager.startMotionPriority(e,!1,b.PriorityForce):this._debugMode&&S.LAppPal.printMessage("[APP]expression[".concat(t,"] is null"))},e.prototype.setNumExpression=function(t){if(!(this._expressions.getSize()<=t)){var e=this._expressions._keyValues[t].first;this.setExpression(e)}},e.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var t=Math.floor(Math.random()*this._expressions.getSize()),e=0;e<this._expressions.getSize();e++)if(e==t){var i=this._expressions._keyValues[e].first;return void this.setExpression(i)}},e.prototype.motionEventFired=function(t){(0,v.CubismLogInfo)("{0} is fired on LAppModel!!",t.s)},e.prototype.hitTest=function(t,e,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),n=0;n<r;n++)if(this._modelSetting.getHitAreaName(n)==t){var o=this._modelSetting.getHitAreaId(n);return this.isHit(o,e,i)}return!1},e.prototype.preLoadMotionGroup=function(t){for(var e=this,i=function(i){var n=r._modelSetting.getMotionFileName(t,i),o="".concat(t,"_").concat(i);r._debugMode&&S.LAppPal.printMessage("[APP]load motion: ".concat(n," => [").concat(o,"]")),fetch("".concat(r._modelHomeDir).concat(n)).then((function(t){return t.arrayBuffer()})).then((function(r){var n=e.loadMotion(r,r.byteLength,o),a=e._modelSetting.getMotionFadeInTimeValue(t,i);a>=0&&n.setFadeInTime(a),(a=e._modelSetting.getMotionFadeOutTimeValue(t,i))>=0&&n.setFadeOutTime(a),n.setEffectIds(e._eyeBlinkIds,e._lipSyncIds),null!=e._motions.getValue(o)&&_.ACubismMotion.delete(e._motions.getValue(o)),e._motions.setValue(o,n),e._motionCount++,e._motionCount>=e._allMotionCount&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}))},r=this,n=0;n<this._modelSetting.getMotionCount(t);n++)i(n)},e.prototype.releaseMotions=function(){this._motions.clear()},e.prototype.releaseExpressions=function(){this._expressions.clear()},e.prototype.doDraw=function(){if(null!=this._model){var t=[0,0,C.canvas.width,C.canvas.height];this.getRenderer().setRenderState(C.frameBuffer,t),this.getRenderer().drawModel()}},e.prototype.draw=function(t){null!=this._model&&this._state==u.CompleteSetup&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())},e}(g.CubismUserModel);e.LAppModel=M},1986:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.LAppPal=void 0;var i=function(){function t(){}return t.loadFileAsBytes=function(t,e){fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return e(t,t.byteLength)}))},t.getDeltaTime=function(){return this.s_deltaTime},t.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},t.printMessage=function(t){console.log(t)},t.lastUpdate=Date.now(),t.s_currentFrame=0,t.s_lastFrame=0,t.s_deltaTime=0,t}();e.LAppPal=i},5279:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Rect=e.LAppSprite=void 0;var r=i(7551),n=function(){function t(t,e,i,r,n){this._rect=new o,this._rect.left=t-.5*i,this._rect.right=t+.5*i,this._rect.up=e+.5*r,this._rect.down=e-.5*r,this._texture=n,this._vertexBuffer=null,this._uvBuffer=null,this._indexBuffer=null,this._positionLocation=null,this._uvLocation=null,this._textureLocation=null,this._positionArray=null,this._uvArray=null,this._indexArray=null,this._firstDraw=!0}return t.prototype.release=function(){this._rect=null,r.gl.deleteTexture(this._texture),this._texture=null,r.gl.deleteBuffer(this._uvBuffer),this._uvBuffer=null,r.gl.deleteBuffer(this._vertexBuffer),this._vertexBuffer=null,r.gl.deleteBuffer(this._indexBuffer),this._indexBuffer=null},t.prototype.getTexture=function(){return this._texture},t.prototype.render=function(t){if(null!=this._texture){if(this._firstDraw){this._positionLocation=r.gl.getAttribLocation(t,"position"),r.gl.enableVertexAttribArray(this._positionLocation),this._uvLocation=r.gl.getAttribLocation(t,"uv"),r.gl.enableVertexAttribArray(this._uvLocation),this._textureLocation=r.gl.getUniformLocation(t,"texture"),r.gl.uniform1i(this._textureLocation,0),this._uvArray=new Float32Array([1,0,0,0,0,1,1,1]),this._uvBuffer=r.gl.createBuffer();var e=r.canvas.width,i=r.canvas.height;this._positionArray=new Float32Array([(this._rect.right-.5*e)/(.5*e),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*e)/(.5*e),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*e)/(.5*e),(this._rect.down-.5*i)/(.5*i),(this._rect.right-.5*e)/(.5*e),(this._rect.down-.5*i)/(.5*i)]),this._vertexBuffer=r.gl.createBuffer(),this._indexArray=new Uint16Array([0,1,2,3,2,0]),this._indexBuffer=r.gl.createBuffer(),this._firstDraw=!1}r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._uvBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._uvArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._uvLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._vertexBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._positionArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._positionLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ELEMENT_ARRAY_BUFFER,this._indexBuffer),r.gl.bufferData(r.gl.ELEMENT_ARRAY_BUFFER,this._indexArray,r.gl.DYNAMIC_DRAW),r.gl.bindTexture(r.gl.TEXTURE_2D,this._texture),r.gl.drawElements(r.gl.TRIANGLES,this._indexArray.length,r.gl.UNSIGNED_SHORT,0)}},t.prototype.isHit=function(t,e){var i=r.canvas.height-e;return t>=this._rect.left&&t<=this._rect.right&&i<=this._rect.up&&i>=this._rect.down},t}();e.LAppSprite=n;var o=function(){};e.Rect=o},3938:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.TextureInfo=e.LAppTextureManager=void 0;var r=i(1502),n=i(7551),o=function(){function t(){this._textures=new r.csmVector}return t.prototype.release=function(){for(var t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())n.gl.deleteTexture(t.ptr().id);this._textures=null},t.prototype.createTextureFromPngFile=function(t,e,i){for(var r=this,o=function(r){if(r.ptr().fileName==t&&r.ptr().usePremultply==e)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=t,{value:void 0}},s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement()){var u=o(s);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var o=n.gl.createTexture();n.gl.bindTexture(n.gl.TEXTURE_2D,o),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MIN_FILTER,n.gl.LINEAR_MIPMAP_LINEAR),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MAG_FILTER,n.gl.LINEAR),e&&n.gl.pixelStorei(n.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),n.gl.texImage2D(n.gl.TEXTURE_2D,0,n.gl.RGBA,n.gl.RGBA,n.gl.UNSIGNED_BYTE,l),n.gl.generateMipmap(n.gl.TEXTURE_2D),n.gl.bindTexture(n.gl.TEXTURE_2D,null);var s=new a;null!=s&&(s.fileName=t,s.width=l.width,s.height=l.height,s.id=o,s.img=l,s.usePremultply=e,r._textures.pushBack(s)),i(s)},l.src=t},t.prototype.releaseTextures=function(){for(var t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()},t.prototype.releaseTextureByTexture=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}},t.prototype.releaseTextureByFilePath=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}},t}();e.LAppTextureManager=o;var a=function(){this.id=null,this.width=0,this.height=0};e.TextureInfo=a},4585:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppView=void 0;var a=i(1580),s=i(8530),u=o(i(9556)),l=i(7551),h=i(6424),c=i(1986),p=i(5279),d=i(9307),g=function(){function t(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new d.TouchManager,this._deviceToScreen=new a.CubismMatrix44,this._viewMatrix=new s.CubismViewMatrix}return t.prototype.initialize=function(){var t=l.canvas.width,e=l.canvas.height,i=t/e,r=-i,n=i,o=u.ViewLogicalLeft,a=u.ViewLogicalRight;if(this._viewMatrix.setScreenRect(r,n,o,a),this._viewMatrix.scale(u.ViewScale,u.ViewScale),this._deviceToScreen.loadIdentity(),t>e){var s=Math.abs(n-r);this._deviceToScreen.scaleRelative(s/t,-s/t)}else{var h=Math.abs(a-o);this._deviceToScreen.scaleRelative(h/e,-h/e)}this._deviceToScreen.translateRelative(.5*-t,.5*-e),this._viewMatrix.setMaxScale(u.ViewMaxScale),this._viewMatrix.setMinScale(u.ViewMinScale),this._viewMatrix.setMaxScreenRect(u.ViewLogicalMaxLeft,u.ViewLogicalMaxRight,u.ViewLogicalMaxBottom,u.ViewLogicalMaxTop)},t.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,l.gl.deleteProgram(this._programId),this._programId=null},t.prototype.render=function(){l.gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),l.gl.flush();var t=h.LAppLive2DManager.getInstance();t.setViewMatrix(this._viewMatrix),t.onUpdate()},t.prototype.initializeSprite=function(){var t,e=this,i=l.canvas.width,r=l.canvas.height,n=l.LAppDelegate.getInstance().getTextureManager(),o=u.ResourcesPath;t=u.BackImageName,n.createTextureFromPngFile(o+t,!1,(function(t){var n=.5*i,o=.5*r,a=2*t.width,s=.95*r;e._back=new p.LAppSprite(n,o,a,s,t.id)})),console.log(o+t+"です"),null==this._programId&&(this._programId=l.LAppDelegate.getInstance().createShader())},t.prototype.onTouchesBegan=function(t,e){this._touchManager.touchesBegan(t,e)},t.prototype.onTouchesMoved=function(t,e){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t,e),h.LAppLive2DManager.getInstance().onDrag(i,r)},t.prototype.onTouchesEnded=function(t,e){var i=h.LAppLive2DManager.getInstance();i.onDrag(0,0);var r=this._deviceToScreen.transformX(this._touchManager.getX()),n=this._deviceToScreen.transformY(this._touchManager.getY());u.DebugTouchLogEnable&&c.LAppPal.printMessage("[APP]touchesEnded x: ".concat(r," y: ").concat(n)),i.onTap(r,n)},t.prototype.transformViewX=function(t){var e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)},t.prototype.transformViewY=function(t){var e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)},t.prototype.transformScreenX=function(t){return this._deviceToScreen.transformX(t)},t.prototype.transformScreenY=function(t){return this._deviceToScreen.transformY(t)},t}();e.LAppView=g},5364:function(t,e){var i=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,r,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){a.label=o[1];break}if(6===o[0]&&a.label<n[1]){a.label=n[1],n=o;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(o);break}n[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ByteReader=e.WavFileInfo=e.LAppWavFileHandler=e.s_instance=void 0,e.s_instance=null;var n=function(){function t(){var t=this;this._loadFiletoBytes=function(e,i){t._byteReader._fileByte=e,t._byteReader._fileDataView=new DataView(t._byteReader._fileByte),t._byteReader._fileSize=i},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new o,this._byteReader=new a}return t.getInstance=function(){return null==e.s_instance&&(e.s_instance=new t),e.s_instance},t.releaseInstance=function(){null!=e.s_instance&&(e.s_instance=void 0),e.s_instance=null},t.prototype.update=function(t){var e,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=t,(e=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(e=this._wavFileInfo._samplesPerChannel),i=0;for(var r=0;r<this._wavFileInfo._numberOfChannels;r++)for(var n=this._sampleOffset;n<e;n++){var o=this._pcmData[r][n];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(e-this._sampleOffset))),this._lastRms=i,this._sampleOffset=e,!0},t.prototype.start=function(t){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(t)},t.prototype.getRms=function(){return this._lastRms},t.prototype.loadWavFile=function(t){var e=this,n=!1;return null!=this._pcmData&&this.releasePcmData(),i(e,void 0,void 0,(function(){var o,a,s,u,l;return r(this,(function(h){switch(h.label){case 0:return o=this._byteReader,[4,i(e,void 0,void 0,(function(){return r(this,(function(e){return[2,fetch(t).then((function(t){return t.arrayBuffer()}))]}))}))];case 1:if(o._fileByte=h.sent(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return[2,!1];this._wavFileInfo._fileName=t;try{if(!this._byteReader.getCheckSignature("RIFF"))throw n=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw n=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw n=!1,new Error('Cannot find Signeture "fmt".');if(a=this._byteReader.get32LittleEndian(),1!=this._byteReader.get16LittleEndian())throw n=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),a>16&&(this._byteReader._readOffset+=a-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw n=!1,new Error('Cannot find "data" Chunk.');for(s=this._byteReader.get32LittleEndian(),this._wavFileInfo._samplesPerChannel=8*s/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels),l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(u=0;u<this._wavFileInfo._samplesPerChannel;u++)for(l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l][u]=this.getPcmSample();n=!0}catch(t){console.log(t)}return[2]}}))})),n},t.prototype.getPcmSample=function(){var t;switch(this._wavFileInfo._bitsPerSample){case 8:t=this._byteReader.get8()-128,t<<=24;break;case 16:t=this._byteReader.get16LittleEndian()<<16;break;case 24:t=this._byteReader.get24LittleEndian()<<8;break;default:t=0}return t/2147483647},t.prototype.releasePcmData=function(){for(var t=0;t<this._wavFileInfo._numberOfChannels;t++)delete this._pcmData[t];delete this._pcmData,this._pcmData=null},t}();e.LAppWavFileHandler=n;var o=function(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0};e.WavFileInfo=o;var a=function(){function t(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}return t.prototype.get8=function(){var t=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,t},t.prototype.get16LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,t},t.prototype.get24LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,t},t.prototype.get32LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,t},t.prototype.getCheckSignature=function(t){var e=new Uint8Array(4),i=(new TextEncoder).encode(t);if(4!=t.length)return!1;for(var r=0;r<4;r++)e[r]=this.get8();return e[0]==i[0]&&e[1]==i[1]&&e[2]==i[2]&&e[3]==i[3]},t}();e.ByteReader=a},8519:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var a=i(7551),s=o(i(9556));window.onload=function(){0!=a.LAppDelegate.getInstance().initialize()&&a.LAppDelegate.getInstance().run()},window.onbeforeunload=function(){return a.LAppDelegate.releaseInstance()},window.onresize=function(){"auto"===s.CanvasSize&&a.LAppDelegate.getInstance().onResize()},window.addEventListener("message",(function(t){"http://localhost:8000"==t.origin&&a.LAppDelegate.onEventListened(t.data)}),!1)},9307:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.TouchManager=void 0;var i=function(){function t(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return t.prototype.getCenterX=function(){return this._lastX},t.prototype.getCenterY=function(){return this._lastY},t.prototype.getDeltaX=function(){return this._deltaX},t.prototype.getDeltaY=function(){return this._deltaY},t.prototype.getStartX=function(){return this._startX},t.prototype.getStartY=function(){return this._startY},t.prototype.getScale=function(){return this._scale},t.prototype.getX=function(){return this._lastX},t.prototype.getY=function(){return this._lastY},t.prototype.getX1=function(){return this._lastX1},t.prototype.getY1=function(){return this._lastY1},t.prototype.getX2=function(){return this._lastX2},t.prototype.getY2=function(){return this._lastY2},t.prototype.isSingleTouch=function(){return this._touchSingle},t.prototype.isFlickAvailable=function(){return this._flipAvailable},t.prototype.disableFlick=function(){this._flipAvailable=!1},t.prototype.touchesBegan=function(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},t.prototype.touchesMoved=function(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0},t.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},t.prototype.calculateDistance=function(t,e,i,r){return Math.sqrt((t-i)*(t-i)+(e-r)*(e-r))},t.prototype.calculateMovingAmount=function(t,e){if(t>0!=e>0)return 0;var i=t>0?1:-1,r=Math.abs(t),n=Math.abs(e);return i*(r<n?r:n)},t}();e.TouchManager=i},7147:function(t,e,i){i.r(e),i.d(e,{Headers:function(){return g},Request:function(){return C},Response:function(){return P},DOMException:function(){return x},fetch:function(){return B}});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,n="URLSearchParams"in r,o="Symbol"in r&&"iterator"in Symbol,a="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in r,u="ArrayBuffer"in r;if(u)var l=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],h=ArrayBuffer.isView||function(t){return t&&l.indexOf(Object.prototype.toString.call(t))>-1};function c(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function p(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function g(t){this.map={},t instanceof g?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function _(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function m(t){return new Promise((function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}}))}function f(t){var e=new FileReader,i=m(e);return e.readAsArrayBuffer(t),i}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:a&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():u&&a&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(t)||h(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},a&&(this.blob=function(){var t=_(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?_(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var t,e,i,r=_(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,i=m(e=new FileReader),e.readAsText(t),i;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),r=0;r<e.length;r++)i[r]=String.fromCharCode(e[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(S)}),this.json=function(){return this.text().then(JSON.parse)},this}g.prototype.append=function(t,e){t=c(t),e=p(e);var i=this.map[t];this.map[t]=i?i+", "+e:e},g.prototype.delete=function(t){delete this.map[c(t)]},g.prototype.get=function(t){return t=c(t),this.has(t)?this.map[t]:null},g.prototype.has=function(t){return this.map.hasOwnProperty(c(t))},g.prototype.set=function(t,e){this.map[c(t)]=p(e)},g.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},g.prototype.keys=function(){var t=[];return this.forEach((function(e,i){t.push(i)})),d(t)},g.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},g.prototype.entries=function(){var t=[];return this.forEach((function(e,i){t.push([i,e])})),d(t)},o&&(g.prototype[Symbol.iterator]=g.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function C(t,e){if(!(this instanceof C))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,r,n=(e=e||{}).body;if(t instanceof C){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new g(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new g(e.headers)),this.method=(r=(i=e.method||this.method||"GET").toUpperCase(),b.indexOf(r)>-1?r:i),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function S(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var i=t.split("="),r=i.shift().replace(/\+/g," "),n=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}})),e}function P(t,e){if(!(this instanceof P))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new g(e.headers),this.url=e.url||"",this._initBody(t)}C.prototype.clone=function(){return new C(this,{body:this._bodyInit})},v.call(C.prototype),v.call(P.prototype),P.prototype.clone=function(){return new P(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new g(this.headers),url:this.url})},P.error=function(){var t=new P(null,{status:0,statusText:""});return t.type="error",t};var M=[301,302,303,307,308];P.redirect=function(t,e){if(-1===M.indexOf(e))throw new RangeError("Invalid status code");return new P(null,{status:e,headers:{location:t}})};var x=r.DOMException;try{new x}catch(t){(x=function(t,e){this.message=t,this.name=e;var i=Error(t);this.stack=i.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function B(t,e){return new Promise((function(i,n){var o=new C(t,e);if(o.signal&&o.signal.aborted)return n(new x("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var t,e,r={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new g,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var i=t.split(":"),r=i.shift().trim();if(r){var n=i.join(":").trim();e.append(r,n)}})),e)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var n="response"in s?s.response:s.responseText;setTimeout((function(){i(new P(n,r))}),0)},s.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){n(new x("Aborted","AbortError"))}),0)},s.open(o.method,function(t){try{return""===t&&r.location.href?r.location.href:t}catch(e){return t}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(a?s.responseType="blob":u&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof g?o.headers.forEach((function(t,e){s.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){s.setRequestHeader(t,p(e.headers[t]))})),o.signal&&(o.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",l)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}B.polyfill=!0,r.fetch||(r.fetch=B,r.Headers=g,r.Request=C,r.Response=P)}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,i),o.exports}i.d=function(t,e){for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(8519)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU9BLEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLElBT1YsT0FIQUUsRUFBb0JKLEdBQVVySCxLQUFLd0gsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0gsR0FHcEVJLEVBQU9ELFFDcEJmSCxFQUFvQjF0RCxFQUFJLFNBQVM2dEQsRUFBU0csR0FDekMsSUFBSSxJQUFJNWtELEtBQU80a0QsRUFDWE4sRUFBb0IvZ0IsRUFBRXFoQixFQUFZNWtELEtBQVNza0QsRUFBb0IvZ0IsRUFBRWtoQixFQUFTemtELElBQzVFbGMsT0FBTytnRSxlQUFlSixFQUFTemtELEVBQUssQ0FBRThrRCxZQUFZLEVBQU16dUMsSUFBS3V1QyxFQUFXNWtELE1DSjNFc2tELEVBQW9CL2dCLEVBQUksU0FBUzBaLEVBQUs4SCxHQUFRLE9BQU9qaEUsT0FBTzQrQixVQUFVKzlCLGVBQWV2RCxLQUFLRCxFQUFLOEgsSUNDL0ZULEVBQW9CL3lELEVBQUksU0FBU2t6RCxHQUNYLG9CQUFYOUgsUUFBMEJBLE9BQU9xSSxhQUMxQ2xoRSxPQUFPK2dFLGVBQWVKLEVBQVM5SCxPQUFPcUksWUFBYSxDQUFFdHJELE1BQU8sV0FFN0Q1VixPQUFPK2dFLGVBQWVKLEVBQVMsYUFBYyxDQUFFL3FELE9BQU8sS0NGN0I0cUQsRUFBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZC50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9jdWJpc21mcmFtZXdvcmtjb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvY3ViaXNtbW9kZWxzZXR0aW5nanNvbi50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21leWVibGluay50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtcG9zZS50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9pY3ViaXNtbW9kZWxzZXR0aW5nLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9saXZlMmRjdWJpc21mcmFtZXdvcmsudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRoLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbWF0cml4NDQudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tb2RlbG1hdHJpeC50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXRhcmdldHBvaW50LnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZpZXdtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtdXNlcm1vZGVsLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9hY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbmludGVybmFsLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25qc29uLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5LnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvcGh5c2ljcy9jdWJpc21waHlzaWNzLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2ludGVybmFsLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4vQ3ViaXNtU2RrRm9yV2ViLTQtci40L0ZyYW1ld29yay9zcmMvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbC50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly8vLi9DdWJpc21TZGtGb3JXZWItNC1yLjQvRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3R5cGUvY3Ntc3RyaW5nLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWRlYnVnLnRzIiwid2VicGFjazovLy8uL0N1YmlzbVNka0ZvcldlYi00LXIuNC9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBkZWZpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBkZWxlZ2F0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGxpdmUyZG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBtb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHBhbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHNwcml0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHRleHR1cmVtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwdmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHdhdmZpbGVoYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy90b3VjaG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICogQGJyaWVmIOODkeODqeODoeODvOOCv0lE44Gu44OH44OV44Kp44Or44OI5YCk44KS5L+d5oyB44GZ44KL5a6a5pWwPGJyPlxuICogICAgICAgICDjg4fjg5Xjgqnjg6vjg4jlgKTjga7ku5Xmp5jjga/ku6XkuIvjga7jg57jg4vjg6XjgqLjg6vjgavln7rjgaXjgY88YnI+XG4gKiAgICAgICAgIGh0dHBzOi8vZG9jcy5saXZlMmQuY29tL2N1YmlzbS1lZGl0b3ItbWFudWFsL3N0YW5kYXJkLXBhcmFtZXRvci1saXN0L1xuICovXG5leHBvcnQgY29uc3QgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkID0gT2JqZWN0LmZyZWV6ZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pih7XG4gIC8vIOODkeODvOODhElEXG4gIEhpdEFyZWFQcmVmaXg6ICdIaXRBcmVhJyxcbiAgSGl0QXJlYUhlYWQ6ICdIZWFkJyxcbiAgSGl0QXJlYUJvZHk6ICdCb2R5JyxcbiAgUGFydHNJZENvcmU6ICdQYXJ0czAxQ29yZScsXG4gIFBhcnRzQXJtUHJlZml4OiAnUGFydHMwMUFybV8nLFxuICBQYXJ0c0FybUxQcmVmaXg6ICdQYXJ0czAxQXJtTF8nLFxuICBQYXJ0c0FybVJQcmVmaXg6ICdQYXJ0czAxQXJtUl8nLFxuICAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxuICBQYXJhbUFuZ2xlWDogJ1BhcmFtQW5nbGVYJyxcbiAgUGFyYW1BbmdsZVk6ICdQYXJhbUFuZ2xlWScsXG4gIFBhcmFtQW5nbGVaOiAnUGFyYW1BbmdsZVonLFxuICBQYXJhbUV5ZUxPcGVuOiAnUGFyYW1FeWVMT3BlbicsXG4gIFBhcmFtRXllTFNtaWxlOiAnUGFyYW1FeWVMU21pbGUnLFxuICBQYXJhbUV5ZVJPcGVuOiAnUGFyYW1FeWVST3BlbicsXG4gIFBhcmFtRXllUlNtaWxlOiAnUGFyYW1FeWVSU21pbGUnLFxuICBQYXJhbUV5ZUJhbGxYOiAnUGFyYW1FeWVCYWxsWCcsXG4gIFBhcmFtRXllQmFsbFk6ICdQYXJhbUV5ZUJhbGxZJyxcbiAgUGFyYW1FeWVCYWxsRm9ybTogJ1BhcmFtRXllQmFsbEZvcm0nLFxuICBQYXJhbUJyb3dMWTogJ1BhcmFtQnJvd0xZJyxcbiAgUGFyYW1Ccm93Ulk6ICdQYXJhbUJyb3dSWScsXG4gIFBhcmFtQnJvd0xYOiAnUGFyYW1Ccm93TFgnLFxuICBQYXJhbUJyb3dSWDogJ1BhcmFtQnJvd1JYJyxcbiAgUGFyYW1Ccm93TEFuZ2xlOiAnUGFyYW1Ccm93TEFuZ2xlJyxcbiAgUGFyYW1Ccm93UkFuZ2xlOiAnUGFyYW1Ccm93UkFuZ2xlJyxcbiAgUGFyYW1Ccm93TEZvcm06ICdQYXJhbUJyb3dMRm9ybScsXG4gIFBhcmFtQnJvd1JGb3JtOiAnUGFyYW1Ccm93UkZvcm0nLFxuICBQYXJhbU1vdXRoRm9ybTogJ1BhcmFtTW91dGhGb3JtJyxcbiAgUGFyYW1Nb3V0aE9wZW5ZOiAnUGFyYW1Nb3V0aE9wZW5ZJyxcbiAgUGFyYW1DaGVlazogJ1BhcmFtQ2hlZWsnLFxuICBQYXJhbUJvZHlBbmdsZVg6ICdQYXJhbUJvZHlBbmdsZVgnLFxuICBQYXJhbUJvZHlBbmdsZVk6ICdQYXJhbUJvZHlBbmdsZVknLFxuICBQYXJhbUJvZHlBbmdsZVo6ICdQYXJhbUJvZHlBbmdsZVonLFxuICBQYXJhbUJyZWF0aDogJ1BhcmFtQnJlYXRoJyxcbiAgUGFyYW1Bcm1MQTogJ1BhcmFtQXJtTEEnLFxuICBQYXJhbUFybVJBOiAnUGFyYW1Bcm1SQScsXG4gIFBhcmFtQXJtTEI6ICdQYXJhbUFybUxCJyxcbiAgUGFyYW1Bcm1SQjogJ1BhcmFtQXJtUkInLFxuICBQYXJhbUhhbmRMOiAnUGFyYW1IYW5kTCcsXG4gIFBhcmFtSGFuZFI6ICdQYXJhbUhhbmRSJyxcbiAgUGFyYW1IYWlyRnJvbnQ6ICdQYXJhbUhhaXJGcm9udCcsXG4gIFBhcmFtSGFpclNpZGU6ICdQYXJhbUhhaXJTaWRlJyxcbiAgUGFyYW1IYWlyQmFjazogJ1BhcmFtSGFpckJhY2snLFxuICBQYXJhbUhhaXJGbHVmZnk6ICdQYXJhbUhhaXJGbHVmZnknLFxuICBQYXJhbVNob3VsZGVyWTogJ1BhcmFtU2hvdWxkZXJZJyxcbiAgUGFyYW1CdXN0WDogJ1BhcmFtQnVzdFgnLFxuICBQYXJhbUJ1c3RZOiAnUGFyYW1CdXN0WScsXG4gIFBhcmFtQmFzZVg6ICdQYXJhbUJhc2VYJyxcbiAgUGFyYW1CYXNlWTogJ1BhcmFtQmFzZVknLFxuICBQYXJhbU5PTkU6ICdOT05FOidcbn0pO1xuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFCb2R5ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYUJvZHk7XG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhSGVhZCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLkhpdEFyZWFIZWFkO1xuICBleHBvcnQgY29uc3QgSGl0QXJlYVByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLkhpdEFyZWFQcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYO1xuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVaID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVo7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxBID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1MQTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybUxCO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtUkE7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJCID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1SQjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQmFzZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJhc2VYO1xuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQmFzZVk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVogPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVo7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJlYXRoO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TEFuZ2xlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TEFuZ2xlO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TEZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TFg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd0xZO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkFuZ2xlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93UkFuZ2xlO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93Ulg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JZO1xuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnVzdFg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJ1c3RZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CdXN0WTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQ2hlZWsgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUNoZWVrO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbEZvcm07XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxZO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMT3BlbiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllTE9wZW47XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxTbWlsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllTFNtaWxlO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVST3BlbiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllUk9wZW47XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZVJTbWlsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllUlNtaWxlO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyQmFjayA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckJhY2s7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGbHVmZnkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhaXJGbHVmZnk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGcm9udCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckZyb250O1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyU2lkZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpclNpZGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhbmRMID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYW5kTDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhbmRSO1xuICBleHBvcnQgY29uc3QgUGFyYW1Nb3V0aEZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbU1vdXRoRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTW91dGhPcGVuWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTW91dGhPcGVuWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTk9ORSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTk9ORTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtU2hvdWxkZXJZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1TaG91bGRlclk7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybUxQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0FybUxQcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzQXJtUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFydHNBcm1SUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNBcm1SUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFydHNJZENvcmUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0lkQ29yZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICDjg63jgrDlh7rlipvplqLmlbDjga7oqK3lrppcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8tLS0tLS0tLS0tIOODreOCsOWHuuWKm+ODrOODmeODqyDpgbjmip7poIXnm64g5a6a576pIC0tLS0tLS0tLS1cbi8vIOips+e0sOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfVkVSQk9TRSA9IDA7XG4vLyDjg4fjg5Djg4PjgrDjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0RFQlVHID0gMTtcbi8vIEluZm/jg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0lORk8gPSAyO1xuLy8g6K2m5ZGK44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9XQVJOSU5HID0gMztcbi8vIOOCqOODqeODvOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfRVJST1IgPSA0O1xuLy8g44Ot44Kw5Ye65Yqb44Kq44OV6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9PRkYgPSA1O1xuXG4vKipcbiAqIOODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOAglxuICpcbiAqIOW8t+WItueahOOBq+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuWkieOBiOOCi+aZguOBq+Wumue+qeOCkuacieWKueOBq+OBmeOCi+OAglxuICogQ1NNX0xPR19MRVZFTF9WRVJCT1NFIO+9niBDU01fTE9HX0xFVkVMX09GRiDjgpLpgbjmip7jgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUw6IG51bWJlciA9IENTTV9MT0dfTEVWRUxfVkVSQk9TRTtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IElDdWJpc21Nb2RlbFNldHRpbmcgfSBmcm9tICcuL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IGNzbU1hcCwgaXRlcmF0b3IgfSBmcm9tICcuL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiwgVmFsdWUgfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vKipcbiAqIE1vZGVsM0pzb27jga7jgq3jg7zmloflrZfliJdcbiAqL1xuXG4vLyBKU09OIEtleXNcbmNvbnN0IFZlcnNpb24gPSAnVmVyc2lvbic7XG5jb25zdCBGaWxlUmVmZXJlbmNlcyA9ICdGaWxlUmVmZXJlbmNlcyc7XG5jb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbmNvbnN0IExheW91dCA9ICdMYXlvdXQnO1xuY29uc3QgSGl0QXJlYXMgPSAnSGl0QXJlYXMnO1xuXG5jb25zdCBNb2MgPSAnTW9jJztcbmNvbnN0IFRleHR1cmVzID0gJ1RleHR1cmVzJztcbmNvbnN0IFBoeXNpY3MgPSAnUGh5c2ljcyc7XG5jb25zdCBQb3NlID0gJ1Bvc2UnO1xuY29uc3QgRXhwcmVzc2lvbnMgPSAnRXhwcmVzc2lvbnMnO1xuY29uc3QgTW90aW9ucyA9ICdNb3Rpb25zJztcblxuY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuY29uc3QgTmFtZSA9ICdOYW1lJztcbmNvbnN0IEZpbGVQYXRoID0gJ0ZpbGUnO1xuY29uc3QgSWQgPSAnSWQnO1xuY29uc3QgSWRzID0gJ0lkcyc7XG5jb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcblxuLy8gTW90aW9uc1xuY29uc3QgSWRsZSA9ICdJZGxlJztcbmNvbnN0IFRhcEJvZHkgPSAnVGFwQm9keSc7XG5jb25zdCBQaW5jaEluID0gJ1BpbmNoSW4nO1xuY29uc3QgUGluY2hPdXQgPSAnUGluY2hPdXQnO1xuY29uc3QgU2hha2UgPSAnU2hha2UnO1xuY29uc3QgRmxpY2tIZWFkID0gJ0ZsaWNrSGVhZCc7XG5jb25zdCBQYXJhbWV0ZXIgPSAnUGFyYW1ldGVyJztcblxuY29uc3QgU291bmRQYXRoID0gJ1NvdW5kJztcbmNvbnN0IEZhZGVJblRpbWUgPSAnRmFkZUluVGltZSc7XG5jb25zdCBGYWRlT3V0VGltZSA9ICdGYWRlT3V0VGltZSc7XG5cbi8vIExheW91dFxuY29uc3QgQ2VudGVyWCA9ICdDZW50ZXJYJztcbmNvbnN0IENlbnRlclkgPSAnQ2VudGVyWSc7XG5jb25zdCBYID0gJ1gnO1xuY29uc3QgWSA9ICdZJztcbmNvbnN0IFdpZHRoID0gJ1dpZHRoJztcbmNvbnN0IEhlaWdodCA9ICdIZWlnaHQnO1xuXG5jb25zdCBMaXBTeW5jID0gJ0xpcFN5bmMnO1xuY29uc3QgRXllQmxpbmsgPSAnRXllQmxpbmsnO1xuXG5jb25zdCBJbml0UGFyYW1ldGVyID0gJ2luaXRfcGFyYW0nO1xuY29uc3QgSW5pdFBhcnRzVmlzaWJsZSA9ICdpbml0X3BhcnRzX3Zpc2libGUnO1xuY29uc3QgVmFsID0gJ3ZhbCc7XG5cbmVudW0gRnJlcXVlc3ROb2RlIHtcbiAgRnJlcXVlc3ROb2RlX0dyb3VwcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKVxuICBGcmVxdWVzdE5vZGVfTW9jLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb2MpXG4gIEZyZXF1ZXN0Tm9kZV9Nb3Rpb25zLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICBGcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25zKVxuICBGcmVxdWVzdE5vZGVfVGV4dHVyZXMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFRleHR1cmVzKVxuICBGcmVxdWVzdE5vZGVfUGh5c2ljcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljcylcbiAgRnJlcXVlc3ROb2RlX1Bvc2UsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gIEZyZXF1ZXN0Tm9kZV9IaXRBcmVhcyAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhIaXRBcmVhcylcbn1cblxuLyoqXG4gKiBNb2RlbDNKc29u44OR44O844K144O8XG4gKlxuICogbW9kZWwzLmpzb27jg5XjgqHjgqTjg6vjgpLjg5Hjg7zjgrnjgZfjgablgKTjgpLlj5blvpfjgZnjgotcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gZXh0ZW5kcyBJQ3ViaXNtTW9kZWxTZXR0aW5nIHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIE1vZGVsM0pzb27jgpLjg5DjgqTjg4jphY3liJfjgajjgZfjgaboqq3jgb/ovrzjgpPjgaDjg4fjg7zjgr/jg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICBNb2RlbDNKc29u44Gu44OH44O844K/44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcblxuICAgIGlmICh0aGlzLl9qc29uKSB7XG4gICAgICB0aGlzLl9qc29uVmFsdWUgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xuXG4gICAgICAvLyDpoIbnlarjga9lbnVtIEZyZXF1ZXN0Tm9kZeOBqOS4gOiHtOOBleOBm+OCi1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKSk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW9jKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9ucylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGV4dHVyZXMpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3MpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoSGl0QXJlYXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcblxuICAgIHRoaXMuX2pzb25WYWx1ZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtSnNvbuOCquODluOCuOOCp+OCr+ODiOOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIEN1YmlzbUpzb25cbiAgICovXG4gIHB1YmxpYyBHZXRKc29uKCk6IEN1YmlzbUpzb24ge1xuICAgIHJldHVybiB0aGlzLl9qc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vZGVsRmlsZSgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb2MpLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFRleHR1cmVGaWxlcygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxuICAgKi9cbiAgcHVibGljIGdldEhpdEFyZWFzQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEhpdEFyZWFzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcykuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lE44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXG4gICAqL1xuICBwdWJsaWMgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRIaXRBcmVhTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0UGh5c2ljc0ZpbGUoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKS5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFBvc2VGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUG9zZSkuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeHByZXNzaW9uRmlsZSgpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldEV4cHJlc3Npb25OYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVBhdGgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0S2V5cygpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0S2V5cygpXG4gICAgICAuYXQoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWUpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVBhdGgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291bmRQYXRoKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+aZguOBruODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uRmFkZUluKGdyb3VwTmFtZSwgaW5kZXgpKSB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkZhZGVPdXQoZ3JvdXBOYW1lLCBpbmRleCkpIHtcbiAgICAgIHJldHVybiAtMS4wO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjVxuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0VXNlckRhdGFGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIG91dExheW91dE1hcCBjc21NYXDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHJldHVybiB0cnVlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGdldExheW91dE1hcChvdXRMYXlvdXRNYXA6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiBib29sZWFuIHtcbiAgICAvLyDlrZjlnKjjgZfjgarjgYTopoHntKDjgavjgqLjgq/jgrvjgrnjgZnjgovjgajjgqjjg6njg7zjgavjgarjgovjgZ/jgoFWYWx1ZeOBjG51bGzjga7loLTlkIjjga9udWxs44KS5Luj5YWl44GZ44KLXG4gICAgY29uc3QgbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhMYXlvdXQpXG4gICAgICAuZ2V0TWFwKCk7XG5cbiAgICBpZiAobWFwID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gZmFsc2U7XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IG1hcC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKG1hcC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIG91dExheW91dE1hcC5zZXRWYWx1ZShpdGUucHRyKCkuZmlyc3QsIGl0ZS5wdHIoKS5zZWNvbmQudG9GbG9hdCgpKTtcbiAgICAgIHJldCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IG51bSA9IDA7XG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspIHtcbiAgICAgICAgbnVtID0gcmVmSVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkcylcbiAgICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVtO1xuICB9XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEV5ZUJsaW5rUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaykge1xuICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIHJlZklcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkcylcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgbnVtID0gMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgIG51bSA9IHJlZklcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXG4gICAgICAgICAgLmdldFZlY3RvcigpXG4gICAgICAgICAgLmdldFNpemUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgcmVmSVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWRzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW9kZWxGaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW9jKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RUZXh0dXJlRmlsZXMoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0SGl0QXJlYXMoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0UGh5c2ljc0ZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODneODvOOCuuioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RQb3NlRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1Bvc2UpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdEV4cHJlc3Npb25GaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KFxuICAgICAgRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9uc1xuICAgICk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZFBhdGgpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkZhZGVJbihncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkZhZGVPdXQoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VyRGF0YeOBruODleOCoeOCpOODq+WQjeOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RVc2VyRGF0YUZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOebruOBseOBoeOBq+WvvuW/nOS7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc051bGwoKSB8fFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgKytpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmtcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNFcnJvcigpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICArK2lcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XG4gIHByaXZhdGUgX2pzb25WYWx1ZTogY3NtVmVjdG9yPFZhbHVlPjtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiA9ICQuQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiA9ICQuQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICog5ZG85ZC45qmf6IO9XG4gKlxuICog5ZG85ZC45qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGgge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21CcmVhdGgge1xuICAgIHJldHVybiBuZXcgQ3ViaXNtQnJlYXRoKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqIEBwYXJhbSBpbnN0YW5jZSDlr77osaHjga5DdWJpc21CcmVhdGhcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkIHtcbiAgICBpZiAoaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgaW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/jga7ntJDjgaXjgZFcbiAgICogQHBhcmFtIGJyZWF0aFBhcmFtZXRlcnMg5ZG85ZC444KS57SQ44Gl44GR44Gf44GE44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4pOiB2b2lkIHtcbiAgICB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzID0gYnJlYXRoUGFyYW1ldGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7lj5blvpdcbiAgICogQHJldHVybiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJzKCk6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIGNvbnN0IHQ6IG51bWJlciA9IHRoaXMuX2N1cnJlbnRUaW1lICogMi4wICogMy4xNDE1OTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgY29uc3QgZGF0YTogQnJlYXRoUGFyYW1ldGVyRGF0YSA9IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuYXQoaSk7XG5cbiAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgZGF0YS5wYXJhbWV0ZXJJZCxcbiAgICAgICAgZGF0YS5vZmZzZXQgKyBkYXRhLnBlYWsgKiBNYXRoLnNpbih0IC8gZGF0YS5jeWNsZSksXG4gICAgICAgIGRhdGEud2VpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jdXJyZW50VGltZSA9IDAuMDtcbiAgfVxuXG4gIF9icmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT47IC8vIOWRvOWQuOOBq+OBsuOCguOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICBfY3VycmVudFRpbWU6IG51bWJlcjsgLy8g56mN566X5pmC6ZaTW+enkl1cbn1cblxuLyoqXG4gKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGEge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXG4gICAqIEBwYXJhbSBvZmZzZXQgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxuICAgKiBAcGFyYW0gcGVhayAgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcbiAgICogQHBhcmFtIGN5Y2xlICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gICAqIEBwYXJhbSB3ZWlnaHQgICAgICAgIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcGFyYW1ldGVySWQ/OiBDdWJpc21JZEhhbmRsZSxcbiAgICBvZmZzZXQ/OiBudW1iZXIsXG4gICAgcGVhaz86IG51bWJlcixcbiAgICBjeWNsZT86IG51bWJlcixcbiAgICB3ZWlnaHQ/OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkID09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbWV0ZXJJZDtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldCA9PSB1bmRlZmluZWQgPyAwLjAgOiBvZmZzZXQ7XG4gICAgdGhpcy5wZWFrID0gcGVhayA9PSB1bmRlZmluZWQgPyAwLjAgOiBwZWFrO1xuICAgIHRoaXMuY3ljbGUgPSBjeWNsZSA9PSB1bmRlZmluZWQgPyAwLjAgOiBjeWNsZTtcbiAgICB0aGlzLndlaWdodCA9IHdlaWdodCA9PSB1bmRlZmluZWQgPyAwLjAgOiB3ZWlnaHQ7XG4gIH1cblxuICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXFxcbiAgb2Zmc2V0OiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxuICBwZWFrOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxuICBjeWNsZTogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7lkajmnJ9cbiAgd2VpZ2h0OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21icmVhdGgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEJyZWF0aFBhcmFtZXRlckRhdGEgPSAkLkJyZWF0aFBhcmFtZXRlckRhdGE7XG4gIGV4cG9ydCB0eXBlIEJyZWF0aFBhcmFtZXRlckRhdGEgPSAkLkJyZWF0aFBhcmFtZXRlckRhdGE7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21CcmVhdGggPSAkLkN1YmlzbUJyZWF0aDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQnJlYXRoID0gJC5DdWJpc21CcmVhdGg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnLi4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDvVxuICpcbiAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRXllQmxpbmsge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBub3RlIOW8leaVsOOBjE5VTEzjga7loLTlkIjjgIHjg5Hjg6njg6Hjg7zjgr9JROOBjOioreWumuOBleOCjOOBpuOBhOOBquOBhOepuuOBruOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgbW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gbnVsbFxuICApOiBDdWJpc21FeWVCbGluayB7XG4gICAgcmV0dXJuIG5ldyBDdWJpc21FeWVCbGluayhtb2RlbFNldHRpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgKiBAcGFyYW0gZXllQmxpbmsg5a++6LGh44GuQ3ViaXNtRXllQmxpbmtcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGV5ZUJsaW5rOiBDdWJpc21FeWVCbGluayk6IHZvaWQge1xuICAgIGlmIChleWVCbGluayAhPSBudWxsKSB7XG4gICAgICBleWVCbGluayA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruioreWumlxuICAgKiBAcGFyYW0gYmxpbmtpbmdJbnRlcnZhbCDjgb7jgbDjgZ/jgY3jga7plpPpmpTjga7mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEJsaW5raW5nSW50ZXJ2YWwoYmxpbmtpbmdJbnRlcnZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSBibGlua2luZ0ludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBruODouODvOOCt+ODp+ODs+OBruips+e0sOioreWumlxuICAgKiBAcGFyYW0gY2xvc2luZyAgIOOBvuOBtuOBn+OCkumWieOBmOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBjbG9zZWQgICAg44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIG9wZW5pbmcgICDjgb7jgbbjgZ/jgpLplovjgY/li5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEJsaW5raW5nU2V0dGluZyhcbiAgICBjbG9zaW5nOiBudW1iZXIsXG4gICAgY2xvc2VkOiBudW1iZXIsXG4gICAgb3BlbmluZzogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzID0gY2xvc2luZztcbiAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gY2xvc2VkO1xuICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzID0gb3BlbmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jgZXjgZvjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiOOBruioreWumlxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWRzIOODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVySWRzKHBhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPik6IHZvaWQge1xuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IHBhcmFtZXRlcklkcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jgZXjgZvjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVySWRzKCk6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJJZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG4gICAgbGV0IHBhcmFtZXRlclZhbHVlOiBudW1iZXI7XG4gICAgbGV0IHQgPSAwLjA7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX2JsaW5raW5nU3RhdGUpIHtcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfQ2xvc2luZzpcbiAgICAgICAgdCA9XG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzO1xuXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xuICAgICAgICAgIHQgPSAxLjA7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDtcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMCAtIHQ7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDpcbiAgICAgICAgdCA9XG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHM7XG5cbiAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc7XG4gICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAwLjA7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc6XG4gICAgICAgIHQgPVxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcztcblxuICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICB0ID0gMS4wO1xuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDtcbiAgICAgICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gdGhpcy5kZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSB0O1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDpcbiAgICAgICAgaWYgKHRoaXMuX25leHRCbGlua2luZ1RpbWUgPCB0aGlzLl91c2VyVGltZVNlY29uZHMpIHtcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfQ2xvc2luZztcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAxLjA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghQ3ViaXNtRXllQmxpbmsuQ2xvc2VJZlplcm8pIHtcbiAgICAgIHBhcmFtZXRlclZhbHVlID0gLXBhcmFtZXRlclZhbHVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFyYW1ldGVySWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fcGFyYW1ldGVySWRzLmF0KGkpLCBwYXJhbWV0ZXJWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZykge1xuICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9GaXJzdDtcbiAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gMC4wO1xuICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyA9IDQuMDtcbiAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IDAuMTtcbiAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gMC4wNTtcbiAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcyA9IDAuMTU7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG5cbiAgICBpZiAobW9kZWxTZXR0aW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7ICsraSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu556s44GN44Gu44K/44Kk44Of44Oz44Kw44Gu5rG65a6aXG4gICAqXG4gICAqIEByZXR1cm4g5qyh44Gu44G+44Gw44Gf44GN44KS6KGM44GG5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBkZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpOiBudW1iZXIge1xuICAgIGNvbnN0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArIHIgKiAoMi4wICogdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgLSAxLjApXG4gICAgKTtcbiAgfVxuXG4gIF9ibGlua2luZ1N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi1xuICBfcGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDmk43kvZzlr77osaHjga7jg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxuICBfbmV4dEJsaW5raW5nVGltZTogbnVtYmVyOyAvLyDmrKHjga7jgb7jgbDjgZ/jgY3jga7mmYLliLtb56eSXVxuICBfc3RhdGVTdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi+OBjOmWi+Wni+OBl+OBn+aZguWIu1vnp5JdXG4gIF9ibGlua2luZ0ludGVydmFsU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbDjgZ/jgY3jga7plpPpmpRb56eSXVxuICBfY2xvc2luZ1NlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgX2Nsb3NlZFNlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgX29wZW5pbmdTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICAvKipcbiAgICogSUTjgafmjIflrprjgZXjgozjgZ/nm67jga7jg5Hjg6njg6Hjg7zjgr/jgYzjgIEw44Gu44Go44GN44Gr6ZaJ44GY44KL44Gq44KJIHRydWUg44CBMeOBruaZguOBq+mWieOBmOOCi+OBquOCiSBmYWxzZSDjgIJcbiAgICovXG4gIHN0YXRpYyByZWFkb25seSBDbG9zZUlmWmVybzogYm9vbGVhbiA9IHRydWU7XG59XG5cbi8qKlxuICog44G+44Gw44Gf44GN44Gu54q25oWLXG4gKlxuICog44G+44Gw44Gf44GN44Gu54q25oWL44KS6KGo44GZ5YiX5oyZ5Z6LXG4gKi9cbmV4cG9ydCBlbnVtIEV5ZVN0YXRlIHtcbiAgRXllU3RhdGVfRmlyc3QgPSAwLCAvLyDliJ3mnJ/nirbmhYtcbiAgRXllU3RhdGVfSW50ZXJ2YWwsIC8vIOOBvuOBsOOBn+OBjeOBl+OBpuOBhOOBquOBhOeKtuaFi1xuICBFeWVTdGF0ZV9DbG9zaW5nLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcbiAgRXllU3RhdGVfQ2xvc2VkLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgovnirbmhYtcbiAgRXllU3RhdGVfT3BlbmluZyAvLyDjgb7jgbbjgZ/jgYzplovjgYTjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZXllYmxpbmsnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV5ZUJsaW5rID0gJC5DdWJpc21FeWVCbGluaztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtRXllQmxpbmsgPSAkLkN1YmlzbUV5ZUJsaW5rO1xuICBleHBvcnQgY29uc3QgRXllU3RhdGUgPSAkLkV5ZVN0YXRlO1xuICBleHBvcnQgdHlwZSBFeWVTdGF0ZSA9ICQuRXllU3RhdGU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG5jb25zdCBFcHNpbG9uID0gMC4wMDE7XG5jb25zdCBEZWZhdWx0RmFkZUluU2Vjb25kcyA9IDAuNTtcblxuLy8gUG9zZS5qc29u44Gu44K/44KwXG5jb25zdCBGYWRlSW4gPSAnRmFkZUluVGltZSc7XG5jb25zdCBMaW5rID0gJ0xpbmsnO1xuY29uc3QgR3JvdXBzID0gJ0dyb3Vwcyc7XG5jb25zdCBJZCA9ICdJZCc7XG5cbi8qKlxuICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aXG4gKlxuICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu566h55CG44Go6Kit5a6a44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Qb3NlIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKiBAcGFyYW0gcG9zZTNqc29uIHBvc2UzLmpzb27jga7jg4fjg7zjgr9cbiAgICogQHBhcmFtIHNpemUgcG9zZTMuanNvbuOBruODh+ODvOOCv+OBruOCteOCpOOCultieXRlXVxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUocG9zZTNqc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUG9zZSB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21Qb3NlID0gbmV3IEN1YmlzbVBvc2UoKTtcbiAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUocG9zZTNqc29uLCBzaXplKTtcbiAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xuXG4gICAgLy8g44OV44Kn44O844OJ5pmC6ZaT44Gu5oyH5a6aXG4gICAgaWYgKCFyb290LmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKS5pc051bGwoKSkge1xuICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSByb290XG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJbilcbiAgICAgICAgLnRvRmxvYXQoRGVmYXVsdEZhZGVJblNlY29uZHMpO1xuXG4gICAgICBpZiAocmV0Ll9mYWRlVGltZVNlY29uZHMgPD0gMC4wKSB7XG4gICAgICAgIHJldC5fZmFkZVRpbWVTZWNvbmRzID0gRGVmYXVsdEZhZGVJblNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44OR44O844OE44Kw44Or44O844OXXG4gICAgY29uc3QgcG9zZUxpc3RJbmZvOiBWYWx1ZSA9IHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpO1xuICAgIGNvbnN0IHBvc2VDb3VudDogbnVtYmVyID0gcG9zZUxpc3RJbmZvLmdldFNpemUoKTtcblxuICAgIGZvciAobGV0IHBvc2VJbmRleCA9IDA7IHBvc2VJbmRleCA8IHBvc2VDb3VudDsgKytwb3NlSW5kZXgpIHtcbiAgICAgIGNvbnN0IGlkTGlzdEluZm86IFZhbHVlID0gcG9zZUxpc3RJbmZvLmdldFZhbHVlQnlJbmRleChwb3NlSW5kZXgpO1xuICAgICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gaWRMaXN0SW5mby5nZXRTaXplKCk7XG4gICAgICBsZXQgZ3JvdXBDb3VudCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGdyb3VwSW5kZXggPSAwOyBncm91cEluZGV4IDwgaWRDb3VudDsgKytncm91cEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhcnRJbmZvOiBWYWx1ZSA9IGlkTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGdyb3VwSW5kZXgpO1xuICAgICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIHBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoSWQpLmdldFJhd1N0cmluZygpXG4gICAgICAgICk7XG5cbiAgICAgICAgcGFydERhdGEucGFydElkID0gcGFyYW1ldGVySWQ7XG5cbiAgICAgICAgLy8g44Oq44Oz44Kv44GZ44KL44OR44O844OE44Gu6Kit5a6aXG4gICAgICAgIGlmICghcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhMaW5rKS5pc051bGwoKSkge1xuICAgICAgICAgIGNvbnN0IGxpbmtMaXN0SW5mbzogVmFsdWUgPSBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspO1xuICAgICAgICAgIGNvbnN0IGxpbmtDb3VudDogbnVtYmVyID0gbGlua0xpc3RJbmZvLmdldFNpemUoKTtcblxuICAgICAgICAgIGZvciAobGV0IGxpbmtJbmRleCA9IDA7IGxpbmtJbmRleCA8IGxpbmtDb3VudDsgKytsaW5rSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICAgICAgY29uc3QgbGlua0lkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgICAgbGlua0xpc3RJbmZvLmdldFZhbHVlQnlJbmRleChsaW5rSW5kZXgpLmdldFN0cmluZygpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBsaW5rUGFydC5wYXJ0SWQgPSBsaW5rSWQ7XG5cbiAgICAgICAgICAgIHBhcnREYXRhLmxpbmsucHVzaEJhY2sobGlua1BhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldC5fcGFydEdyb3Vwcy5wdXNoQmFjayhwYXJ0RGF0YS5jbG9uZSgpKTtcblxuICAgICAgICArK2dyb3VwQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIHJldC5fcGFydEdyb3VwQ291bnRzLnB1c2hCYWNrKGdyb3VwQ291bnQpO1xuICAgIH1cblxuICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICogQHBhcmFtIHBvc2Ug5a++6LGh44GuQ3ViaXNtUG9zZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUocG9zZTogQ3ViaXNtUG9zZSk6IHZvaWQge1xuICAgIGlmIChwb3NlICE9IG51bGwpIHtcbiAgICAgIHBvc2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDliY3lm57jga7jg6Ljg4fjg6vjgajlkIzjgZjjgafjgarjgYTloLTlkIjjga/liJ3mnJ/ljJbjgYzlv4XopoFcbiAgICBpZiAobW9kZWwgIT0gdGhpcy5fbGFzdE1vZGVsKSB7XG4gICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrnjga7liJ3mnJ/ljJZcbiAgICAgIHRoaXMucmVzZXQobW9kZWwpO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3RNb2RlbCA9IG1vZGVsO1xuXG4gICAgLy8g6Kit5a6a44GL44KJ5pmC6ZaT44KS5aSJ5pu044GZ44KL44Go44CB57WM6YGO5pmC6ZaT44GM44Oe44Kk44OK44K544Gr44Gq44KL5LqL44GM44GC44KL44Gu44Gn44CB57WM6YGO5pmC6ZaTMOOBqOOBl+OBpuWvvuW/nFxuICAgIGlmIChkZWx0YVRpbWVTZWNvbmRzIDwgMC4wKSB7XG4gICAgICBkZWx0YVRpbWVTZWNvbmRzID0gMC4wO1xuICAgIH1cblxuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJ0R3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICB0aGlzLmRvRmFkZShtb2RlbCwgZGVsdGFUaW1lU2Vjb25kcywgYmVnaW5JbmRleCwgcGFydEdyb3VwQ291bnQpO1xuXG4gICAgICBiZWdpbkluZGV4ICs9IHBhcnRHcm91cENvdW50O1xuICAgIH1cblxuICAgIHRoaXMuY29weVBhcnRPcGFjaXRpZXMobW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOekuuOCkuWIneacn+WMllxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBub3RlIOS4jemAj+aYjuW6puOBruWIneacn+WApOOBjDDjgafjgarjgYTjg5Hjg6njg6Hjg7zjgr/jga/jgIHkuI3pgI/mmI7luqbjgpLvvJHjgavoqK3lrprjgZnjgotcbiAgICovXG4gIHB1YmxpYyByZXNldChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBsZXQgYmVnaW5JbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgY29uc3QgZ3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSBiZWdpbkluZGV4OyBqIDwgYmVnaW5JbmRleCArIGdyb3VwQ291bnQ7ICsraikge1xuICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmluaXRpYWxpemUobW9kZWwpO1xuXG4gICAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFydEluZGV4O1xuICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICAgIGlmIChwYXJ0c0luZGV4IDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIGogPT0gYmVnaW5JbmRleCA/IDEuMCA6IDAuMCk7XG4gICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4LCBqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjApO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5saW5rLmdldFNpemUoKTsgKytrKSB7XG4gICAgICAgICAgdGhpcy5fcGFydEdyb3Vwc1xuICAgICAgICAgICAgLmF0KGopXG4gICAgICAgICAgICAubGluay5hdChrKVxuICAgICAgICAgICAgLmluaXRpYWxpemUobW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJlZ2luSW5kZXggKz0gZ3JvdXBDb3VudDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44KS44Kz44OU44O8XG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBjb3B5UGFydE9wYWNpdGllcyhtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGdyb3VwSW5kZXggPSAwO1xuICAgICAgZ3JvdXBJbmRleCA8IHRoaXMuX3BhcnRHcm91cHMuZ2V0U2l6ZSgpO1xuICAgICAgKytncm91cEluZGV4XG4gICAgKSB7XG4gICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpO1xuXG4gICAgICBpZiAocGFydERhdGEubGluay5nZXRTaXplKCkgPT0gMCkge1xuICAgICAgICBjb250aW51ZTsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/44Gv44Gq44GEXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChncm91cEluZGV4KS5wYXJ0SW5kZXg7XG4gICAgICBjb25zdCBvcGFjaXR5OiBudW1iZXIgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4KTtcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGxpbmtJbmRleCA9IDA7XG4gICAgICAgIGxpbmtJbmRleCA8IHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpO1xuICAgICAgICArK2xpbmtJbmRleFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IHBhcnREYXRhLmxpbmsuYXQobGlua0luZGV4KTtcbiAgICAgICAgY29uc3QgbGlua1BhcnRJbmRleDogbnVtYmVyID0gbGlua1BhcnQucGFydEluZGV4O1xuXG4gICAgICAgIGlmIChsaW5rUGFydEluZGV4IDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KGxpbmtQYXJ0SW5kZXgsIG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7jg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjgIJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKiBAcGFyYW0gYmVnaW5JbmRleCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lhYjpoK3jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHBhcnRHcm91cENvdW50IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGRvRmFkZShcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIGJlZ2luSW5kZXg6IG51bWJlcixcbiAgICBwYXJ0R3JvdXBDb3VudDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGxldCB2aXNpYmxlUGFydEluZGV4ID0gLTE7XG4gICAgbGV0IG5ld09wYWNpdHkgPSAxLjA7XG5cbiAgICBjb25zdCBwaGkgPSAwLjU7XG4gICAgY29uc3QgYmFja09wYWNpdHlUaHJlc2hvbGQgPSAwLjE1O1xuXG4gICAgLy8g54++5Zyo44CB6KGo56S654q25oWL44Gr44Gq44Gj44Gm44GE44KL44OR44O844OE44KS5Y+W5b6XXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJ0SW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFydEluZGV4O1xuICAgICAgY29uc3QgcGFyYW1JbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJhbWV0ZXJJbmRleDtcblxuICAgICAgaWYgKG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4KSA+IEVwc2lsb24pIHtcbiAgICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlzaWJsZVBhcnRJbmRleCA9IGk7XG4gICAgICAgIG5ld09wYWNpdHkgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4KTtcblxuICAgICAgICAvLyDmlrDjgZfjgYTkuI3pgI/mmI7luqbjgpLoqIjnrpdcbiAgICAgICAgbmV3T3BhY2l0eSArPSBkZWx0YVRpbWVTZWNvbmRzIC8gdGhpcy5fZmFkZVRpbWVTZWNvbmRzO1xuXG4gICAgICAgIGlmIChuZXdPcGFjaXR5ID4gMS4wKSB7XG4gICAgICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2aXNpYmxlUGFydEluZGV4IDwgMCkge1xuICAgICAgdmlzaWJsZVBhcnRJbmRleCA9IDA7XG4gICAgICBuZXdPcGFjaXR5ID0gMS4wO1xuICAgIH1cblxuICAgIC8vIOihqOekuuODkeODvOODhOOAgemdnuihqOekuuODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuioreWumuOBmeOCi1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG5cbiAgICAgIC8vIOihqOekuuODkeODvOODhOOBruioreWumlxuICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPT0gaSkge1xuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgbmV3T3BhY2l0eSk7IC8vIOWFiOOBq+ioreWumlxuICAgICAgfVxuICAgICAgLy8g6Z2e6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4KTtcbiAgICAgICAgbGV0IGExOiBudW1iZXI7IC8vIOioiOeul+OBq+OCiOOBo+OBpuaxguOCgeOCieOCjOOCi+S4jemAj+aYjuW6plxuXG4gICAgICAgIGlmIChuZXdPcGFjaXR5IDwgcGhpKSB7XG4gICAgICAgICAgYTEgPSAobmV3T3BhY2l0eSAqIChwaGkgLSAxKSkgLyBwaGkgKyAxLjA7IC8vICgwLDEpLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGExID0gKCgxIC0gbmV3T3BhY2l0eSkgKiBwaGkpIC8gKDEuMCAtIHBoaSk7IC8vICgxLDApLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6IOM5pmv44Gu6KaL44GI44KL5Ymy5ZCI44KS5Yi26ZmQ44GZ44KL5aC05ZCIXG4gICAgICAgIGNvbnN0IGJhY2tPcGFjaXR5OiBudW1iZXIgPSAoMS4wIC0gYTEpICogKDEuMCAtIG5ld09wYWNpdHkpO1xuXG4gICAgICAgIGlmIChiYWNrT3BhY2l0eSA+IGJhY2tPcGFjaXR5VGhyZXNob2xkKSB7XG4gICAgICAgICAgYTEgPSAxLjAgLSBiYWNrT3BhY2l0eVRocmVzaG9sZCAvICgxLjAgLSBuZXdPcGFjaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcGFjaXR5ID4gYTEpIHtcbiAgICAgICAgICBvcGFjaXR5ID0gYTE7IC8vIOioiOeul+OBruS4jemAj+aYjuW6puOCiOOCiuOCguWkp+OBjeOBkeOCjOOBsO+8iOa/g+OBkeOCjOOBsO+8ieS4jemAj+aYjuW6puOCkuS4iuOBkuOCi1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICB0aGlzLl9sYXN0TW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX3BhcnRHcm91cHMgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuICAgIHRoaXMuX3BhcnRHcm91cENvdW50cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xuICB9XG5cbiAgX3BhcnRHcm91cHM6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOODkeODvOODhOOCsOODq+ODvOODl1xuICBfcGFydEdyb3VwQ291bnRzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g44Gd44KM44Ge44KM44Gu44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gIF9mYWRlVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ5pmC6ZaTW+enkl1cbiAgX2xhc3RNb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOWJjeWbnuaTjeS9nOOBl+OBn+ODouODh+ODq1xufVxuXG4vKipcbiAqIOODkeODvOODhOOBq+OBvuOBpOOCj+OCi+ODh+ODvOOCv+OCkueuoeeQhlxuICovXG5leHBvcnQgY2xhc3MgUGFydERhdGEge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2PzogUGFydERhdGEpIHtcbiAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gMDtcbiAgICB0aGlzLnBhcnRJbmRleCA9IDA7XG4gICAgdGhpcy5saW5rID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcblxuICAgIGlmICh2ICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcblxuICAgICAgZm9yIChcbiAgICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBhc3NpZ25tZW50KHY6IFBhcnREYXRhKTogUGFydERhdGEge1xuICAgIHRoaXMucGFydElkID0gdi5wYXJ0SWQ7XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMllxuICAgKiBAcGFyYW0gbW9kZWwg5Yid5pyf5YyW44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgodGhpcy5wYXJ0SWQpO1xuICAgIHRoaXMucGFydEluZGV4ID0gbW9kZWwuZ2V0UGFydEluZGV4KHRoaXMucGFydElkKTtcblxuICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleCh0aGlzLnBhcmFtZXRlckluZGV4LCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcbiAgICovXG4gIHB1YmxpYyBjbG9uZSgpOiBQYXJ0RGF0YSB7XG4gICAgY29uc3QgY2xvbmVQYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcblxuICAgIGNsb25lUGFydERhdGEucGFydElkID0gdGhpcy5wYXJ0SWQ7XG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJhbWV0ZXJJbmRleCA9IHRoaXMucGFyYW1ldGVySW5kZXg7XG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SW5kZXggPSB0aGlzLnBhcnRJbmRleDtcbiAgICBjbG9uZVBhcnREYXRhLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHRoaXMubGluay5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMubGluay5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNsb25lUGFydERhdGEubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lUGFydERhdGE7XG4gIH1cblxuICBwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg7zjg4RJRFxuICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgcGFydEluZGV4OiBudW1iZXI7IC8vIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBsaW5rOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDpgKPli5XjgZnjgovjg5Hjg6njg6Hjg7zjgr9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcG9zZSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUG9zZSA9ICQuQ3ViaXNtUG9zZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUG9zZSA9ICQuQ3ViaXNtUG9zZTtcbiAgZXhwb3J0IGNvbnN0IFBhcnREYXRhID0gJC5QYXJ0RGF0YTtcbiAgZXhwb3J0IHR5cGUgUGFydERhdGEgPSAkLlBhcnREYXRhO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xuXG4vKipcbiAqIOODouODh+ODq+ioreWumuaDheWgseOCkuWPluOCiuaJseOBhumWouaVsOOCkuWuo+iogOOBl+OBn+e0lOeyi+S7ruaDs+OCr+ODqeOCueOAglxuICpcbiAqIOOBk+OBruOCr+ODqeOCueOCkue2meaJv+OBmeOCi+OBk+OBqOOBp+OAgeODouODh+ODq+ioreWumuaDheWgseOCkuWPluOCiuaJseOBhuOCr+ODqeOCueOBq+OBquOCi+OAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSUN1YmlzbU1vZGVsU2V0dGluZyB7XG4gIC8qKlxuICAgKiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb2RlbEZpbGVOYW1lKCk6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIOODhuOCr+OCueODgeODo+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBrmluZGV4XG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhSWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFBvc2VGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25Db3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g6KGo5oOF44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKFxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKFxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShcbiAgICBncm91cE5hbWU6IHN0cmluZyxcbiAgICBpbmRleDogbnVtYmVyXG4gICk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZztcblxuICAvKipcbiAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbjtcblxuICAvKipcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgSUN1YmlzbU1vZGVsU2V0dGluZyA9ICQuSUN1YmlzbU1vZGVsU2V0dGluZztcbiAgZXhwb3J0IHR5cGUgSUN1YmlzbU1vZGVsU2V0dGluZyA9ICQuSUN1YmlzbU1vZGVsU2V0dGluZztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcblxuLyoqXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgVxuICpcbiAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyB44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21JZCB7XG4gIC8qKlxuICAgKiBJROWQjeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldFN0cmluZygpOiBjc21TdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2lkID0gbmV3IGNzbVN0cmluZyhpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZOOCkuavlOi8g1xuICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxuICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGlk44KS5q+U6LyDXG4gICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIGMgPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkOiBjc21TdHJpbmc7IC8vIElE5ZCNXG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUlkID0gJC5DdWJpc21JZDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWQgPSAkLkN1YmlzbUlkO1xuICBleHBvcnQgdHlwZSBDdWJpc21JZEhhbmRsZSA9ICQuQ3ViaXNtSWRIYW5kbGU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21JZCB9IGZyb20gJy4vY3ViaXNtaWQnO1xuXG4vKipcbiAqIElE5ZCN44Gu566h55CGXG4gKlxuICogSUTlkI3jgpLnrqHnkIbjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUlkTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIHRoaXMuX2lkcy5zZXQoaSwgdm9pZCAwKTtcbiAgICB9XG4gICAgdGhpcy5faWRzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOCkuODquOCueODiOOBi+OCieeZu+mMslxuICAgKlxuICAgKiBAcGFyYW0gaWRzIElE5ZCN44Oq44K544OIXG4gICAqIEBwYXJhbSBjb3VudCBJROOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVySWRzKGlkczogc3RyaW5nW10gfCBjc21TdHJpbmdbXSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVySWQoaWRzW2ldKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgpLnmbvpjLJcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nIHwgY3NtU3RyaW5nKTogQ3ViaXNtSWQge1xuICAgIGxldCByZXN1bHQ6IEN1YmlzbUlkID0gbnVsbDtcblxuICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcbiAgICAgIGlmICgocmVzdWx0ID0gdGhpcy5maW5kSWQoaWQpKSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IG5ldyBDdWJpc21JZChpZCk7XG4gICAgICB0aGlzLl9pZHMucHVzaEJhY2socmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZC5zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44GL44KJSUTjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqL1xuICBwdWJsaWMgZ2V0SWQoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOBi+OCiUlE44Gu56K66KqNXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0KGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kSWQoaWQpICE9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlzRXhpc3QoaWQucyk7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgYvjgolJROOCkuaknOe0ouOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgotJROOAguOBquOBkeOCjOOBsE5VTEzjgIJcbiAgICovXG4gIHByaXZhdGUgZmluZElkKGlkOiBzdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5faWRzXG4gICAgICAgICAgLmF0KGkpXG4gICAgICAgICAgLmdldFN0cmluZygpXG4gICAgICAgICAgLmlzRXF1YWwoaWQpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkcy5hdChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX2lkczogY3NtVmVjdG9yPEN1YmlzbUlkPjsgLy8g55m76Yyy44GV44KM44Gm44GE44KLSUTjga7jg6rjgrnjg4hcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtaWRtYW5hZ2VyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21JZE1hbmFnZXIgPSAkLkN1YmlzbUlkTWFuYWdlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWRNYW5hZ2VyID0gJC5DdWJpc21JZE1hbmFnZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZE1hbmFnZXIgfSBmcm9tICcuL2lkL2N1YmlzbWlkbWFuYWdlcic7XG5pbXBvcnQgeyBDdWJpc21SZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIENTTV9BU1NFUlQsXG4gIEN1YmlzbUxvZ0luZm8sXG4gIEN1YmlzbUxvZ1dhcm5pbmdcbn0gZnJvbSAnLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJ0b2Qoczogc3RyaW5nLCBlbmRQdHI6IHN0cmluZ1tdKTogbnVtYmVyIHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDE7IDsgaSsrKSB7XG4gICAgY29uc3QgdGVzdEM6IHN0cmluZyA9IHMuc2xpY2UoaSAtIDEsIGkpO1xuXG4gICAgLy8g5oyH5pWw44O744Oe44Kk44OK44K544Gu5Y+v6IO95oCn44GM44GC44KL44Gu44Gn44K544Kt44OD44OX44GZ44KLXG4gICAgaWYgKHRlc3RDID09ICdlJyB8fCB0ZXN0QyA9PSAnLScgfHwgdGVzdEMgPT0gJ0UnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIOaWh+Wtl+WIl+OBruevhOWbsuOCkuW6g+OBkuOBpuOBhOOBj1xuXG4gICAgY29uc3QgdGVzdDogc3RyaW5nID0gcy5zdWJzdHJpbmcoMCwgaSk7XG4gICAgY29uc3QgbnVtYmVyID0gTnVtYmVyKHRlc3QpO1xuICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAvLyDmlbDlgKTjgajjgZfjgaboqo3orZjjgafjgY3jgarjgY/jgarjgaPjgZ/jga7jgafntYLkuoZcbiAgICAgIGJyZWFrO1xuICAgIH0gLy8g5pyA5b6M44Gr5pWw5YCk44Go44GX44Gm44Gn44GN44GfaW5kZXjjgpLmoLzntI3jgZfjgabjgYrjgY9cblxuICAgIGluZGV4ID0gaTtcbiAgfVxuICBsZXQgZCA9IHBhcnNlRmxvYXQocyk7IC8vIOODkeODvOOCueOBl+OBn+aVsOWApFxuXG4gIGlmIChpc05hTihkKSkge1xuICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxuICAgIGQgPSBOYU47XG4gIH1cblxuICBlbmRQdHJbMF0gPSBzLnNsaWNlKGluZGV4KTsgLy8g5b6M57aa44Gu5paH5a2X5YiXXG4gIHJldHVybiBkO1xufVxuXG4vLyDjg5XjgqHjgqTjg6vjgrnjgrPjg7zjg5fjga7lpInmlbDjgpLliJ3mnJ/ljJZcblxubGV0IHNfaXNTdGFydGVkID0gZmFsc2U7XG5sZXQgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgc19vcHRpb246IE9wdGlvbiA9IG51bGw7XG5sZXQgc19jdWJpc21JZE1hbmFnZXI6IEN1YmlzbUlkTWFuYWdlciA9IG51bGw7XG5cbi8qKlxuICogRnJhbWV3b3Jr5YaF44Gn5L2/44GG5a6a5pWw44Gu5a6j6KiAXG4gKi9cbmV4cG9ydCBjb25zdCBDb25zdGFudCA9IE9iamVjdC5mcmVlemU8UmVjb3JkPHN0cmluZywgbnVtYmVyPj4oe1xuICB2ZXJ0ZXhPZmZzZXQ6IDAsIC8vIOODoeODg+OCt+ODpemggueCueOBruOCquODleOCu+ODg+ODiOWApFxuICB2ZXJ0ZXhTdGVwOiAyIC8vIOODoeODg+OCt+ODpemggueCueOBruOCueODhuODg+ODl+WApFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjc21EZWxldGU8VD4oYWRkcmVzczogVCk6IHZvaWQge1xuICBpZiAoIWFkZHJlc3MpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhZGRyZXNzID0gdm9pZCAwO1xufVxuXG4vKipcbiAqIExpdmUyRCBDdWJpc20gU0RLIE9yaWdpbmFsIFdvcmtmbG93IFNES+OBruOCqOODs+ODiOODquODneOCpOODs+ODiFxuICog5Yip55So6ZaL5aeL5pmC44GvQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeOCkuWRvOOBs+OAgUN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCnjgafntYLkuobjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So5Y+v6IO944Gr44GZ44KL44CCXG4gICAqICBBUEnjgpLlrp/ooYzjgZnjgovliY3jgavlv4XjgZrjgZPjga7plqLmlbDjgpLlrp/ooYzjgZnjgovjgZPjgajjgIJcbiAgICogIOS4gOW6pua6luWCmeOBjOWujOS6huOBl+OBpuS7pemZjeOBr+OAgeWGjeOBs+Wun+ihjOOBl+OBpuOCguWGhemDqOWHpueQhuOBjOOCueOCreODg+ODl+OBleOCjOOBvuOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0gICAgb3B0aW9uICAgICAgT3B0aW9u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqXG4gICAqIEByZXR1cm4gICDmupblgpnlh6bnkIbjgYzlrozkuobjgZfjgZ/jgol0cnVl44GM6L+U44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXJ0VXAob3B0aW9uOiBPcHRpb24gPSBudWxsKTogYm9vbGVhbiB7XG4gICAgaWYgKHNfaXNTdGFydGVkKSB7XG4gICAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCgpIGlzIGFscmVhZHkgZG9uZS4nKTtcbiAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgICB9XG5cbiAgICBzX29wdGlvbiA9IG9wdGlvbjtcblxuICAgIGlmIChzX29wdGlvbiAhPSBudWxsKSB7XG4gICAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtU2V0TG9nRnVuY3Rpb24oc19vcHRpb24ubG9nRnVuY3Rpb24pO1xuICAgIH1cblxuICAgIHNfaXNTdGFydGVkID0gdHJ1ZTtcblxuICAgIC8vIExpdmUyRCBDdWJpc20gQ29yZeODkOODvOOCuOODp+ODs+aDheWgseOCkuihqOekulxuICAgIGlmIChzX2lzU3RhcnRlZCkge1xuICAgICAgY29uc3QgdmVyc2lvbjogbnVtYmVyID0gTGl2ZTJEQ3ViaXNtQ29yZS5WZXJzaW9uLmNzbUdldFZlcnNpb24oKTtcbiAgICAgIGNvbnN0IG1ham9yOiBudW1iZXIgPSAodmVyc2lvbiAmIDB4ZmYwMDAwMDApID4+IDI0O1xuICAgICAgY29uc3QgbWlub3I6IG51bWJlciA9ICh2ZXJzaW9uICYgMHgwMGZmMDAwMCkgPj4gMTY7XG4gICAgICBjb25zdCBwYXRjaDogbnVtYmVyID0gdmVyc2lvbiAmIDB4MDAwMGZmZmY7XG4gICAgICBjb25zdCB2ZXJzaW9uTnVtYmVyOiBudW1iZXIgPSB2ZXJzaW9uO1xuXG4gICAgICBDdWJpc21Mb2dJbmZvKFxuICAgICAgICBgTGl2ZTJEIEN1YmlzbSBDb3JlIHZlcnNpb246IHswfS57MX0uezJ9ICh7M30pYCxcbiAgICAgICAgKCcwMCcgKyBtYWpvcikuc2xpY2UoLTIpLFxuICAgICAgICAoJzAwJyArIG1pbm9yKS5zbGljZSgtMiksXG4gICAgICAgICgnMDAwMCcgKyBwYXRjaCkuc2xpY2UoLTQpLFxuICAgICAgICB2ZXJzaW9uTnVtYmVyXG4gICAgICApO1xuICAgIH1cblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5zdGFydFVwKCkgaXMgY29tcGxldGUuJyk7XG5cbiAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRVcCgp44Gn5Yid5pyf5YyW44GX44GfQ3ViaXNtRnJhbWV3b3Jr44Gu5ZCE44OR44Op44Oh44O844K/44KS44Kv44Oq44Ki44GX44G+44GZ44CCXG4gICAqIERpc3Bvc2UoKeOBl+OBn0N1YmlzbUZyYW1ld29ya+OCkuWGjeWIqeeUqOOBmeOCi+mam+OBq+WIqeeUqOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjbGVhblVwKCk6IHZvaWQge1xuICAgIHNfaXNTdGFydGVkID0gZmFsc2U7XG4gICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgc19vcHRpb24gPSBudWxsO1xuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu44Oq44K944O844K544KS5Yid5pyf5YyW44GX44Gm44Oi44OH44Or44KS6KGo56S65Y+v6IO944Gq54q25oWL44Gr44GX44G+44GZ44CCPGJyPlxuICAgKiAgICAg5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XG4gICAgaWYgKCFzX2lzU3RhcnRlZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovpgKPntprliJ3mnJ/ljJbjgqzjg7zjg4kgLS0tXG4gICAgLy8g6YCj57aa44GX44Gm44Oq44K944O844K556K65L+d44GM6KGM44KP44KM44Gq44GE44KI44GG44Gr44GZ44KL44CCXG4gICAgLy8g5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgaWYgKHNfaXNJbml0aWFsaXplZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZyhcbiAgICAgICAgJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgc2tpcHBlZCwgYWxyZWFkeSBpbml0aWFsaXplZC4nXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vLS0tLSBzdGF0aWMg5Yid5pyf5YyWIC0tLS1cbiAgICBWYWx1ZS5zdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpO1xuXG4gICAgc19jdWJpc21JZE1hbmFnZXIgPSBuZXcgQ3ViaXNtSWRNYW5hZ2VyKCk7XG5cbiAgICBzX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKSBpcyBjb21wbGV0ZS4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu5YWo44Gm44Gu44Oq44K944O844K544KS6Kej5pS+44GX44G+44GZ44CCXG4gICAqICAgICAg44Gf44Gg44GX44CB5aSW6YOo44Gn56K65L+d44GV44KM44Gf44Oq44K944O844K544Gr44Gk44GE44Gm44Gv6Kej5pS+44GX44G+44Gb44KT44CCXG4gICAqICAgICAg5aSW6YOo44Gn6YGp5YiH44Gr56C05qOE44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XG4gICAgaWYgKCFzX2lzU3RhcnRlZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovmnKrliJ3mnJ/ljJbop6PmlL7jgqzjg7zjg4kgLS0tXG4gICAgLy8gZGlzcG9zZSgp44GZ44KL44Gr44Gv5YWI44GraW5pdGlhbGl6ZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgaWYgKCFzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIC8vIGZhbHNlLi4u44Oq44K944O844K55pyq56K65L+d44Gu5aC05ZCIXG4gICAgICBDdWJpc21Mb2dXYXJuaW5nKCdDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpIHNraXBwZWQsIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBWYWx1ZS5zdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCgpO1xuXG4gICAgc19jdWJpc21JZE1hbmFnZXIucmVsZWFzZSgpO1xuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcblxuICAgIC8vIOODrOODs+ODgOODqeOBrumdmeeahOODquOCveODvOOCue+8iOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOS7lu+8ieOCkuino+aUvuOBmeOCi1xuICAgIEN1YmlzbVJlbmRlcmVyLnN0YXRpY1JlbGVhc2UoKTtcblxuICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBpcyBjb21wbGV0ZS4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gf44GL44Gp44GG44GLXG4gICAqIEByZXR1cm4gQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga7jg6rjgr3jg7zjgrnliJ3mnJ/ljJbjgYzjgZnjgafjgavooYzjgo/jgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICogQHJldHVybiDjg6rjgr3jg7zjgrnnorrkv53jgYzlrozkuobjgZfjgabjgYTjgozjgbB0cnVl44GM6L+U44KK44G+44GZXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNfaXNJbml0aWFsaXplZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3JlIEFQSeOBq+ODkOOCpOODs+ODieOBl+OBn+ODreOCsOmWouaVsOOCkuWun+ihjOOBmeOCi1xuICAgKlxuICAgKiBAcHJhcmFtIG1lc3NhZ2Ug44Ot44Kw44Oh44OD44K744O844K4XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNvcmVMb2dGdW5jdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBSZXR1cm4gaWYgbG9nZ2luZyBub3QgcG9zc2libGUuXG4gICAgaWYgKCFMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtR2V0TG9nRnVuY3Rpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIExpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbigpKG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOBruWApOOCkui/lOOBmeOAglxuICAgKlxuICAgKiBAcmV0dXJuICDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9nZ2luZ0xldmVsKCk6IExvZ0xldmVsIHtcbiAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNfb3B0aW9uLmxvZ2dpbmdMZXZlbDtcbiAgICB9XG4gICAgcmV0dXJuIExvZ0xldmVsLkxvZ0xldmVsX09mZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIEN1YmlzbU1hbmFnZXLjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SWRNYW5hZ2VyKCk6IEN1YmlzbUlkTWFuYWdlciB7XG4gICAgcmV0dXJuIHNfY3ViaXNtSWRNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIOmdmeeahOOCr+ODqeOCueOBqOOBl+OBpuS9v+eUqOOBmeOCi1xuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZXjgZvjgarjgYRcbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgT3B0aW9uIHtcbiAgbG9nRnVuY3Rpb246IExpdmUyREN1YmlzbUNvcmUuY3NtTG9nRnVuY3Rpb247IC8vIOODreOCsOWHuuWKm+OBrumWouaVsOOCquODluOCuOOCp+OCr+ODiFxuICBsb2dnaW5nTGV2ZWw6IExvZ0xldmVsOyAvLyDjg63jgrDlh7rlipvjg6zjg5njg6vjga7oqK3lrppcbn1cblxuLyoqXG4gKiDjg63jgrDlh7rlipvjga7jg6zjg5njg6tcbiAqL1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBMb2dMZXZlbF9WZXJib3NlID0gMCwgLy8g6Kmz57Sw44Ot44KwXG4gIExvZ0xldmVsX0RlYnVnLCAvLyDjg4fjg5Djg4PjgrDjg63jgrBcbiAgTG9nTGV2ZWxfSW5mbywgLy8gSW5mb+ODreOCsFxuICBMb2dMZXZlbF9XYXJuaW5nLCAvLyDorablkYrjg63jgrBcbiAgTG9nTGV2ZWxfRXJyb3IsIC8vIOOCqOODqeODvOODreOCsFxuICBMb2dMZXZlbF9PZmYgLy8g44Ot44Kw5Ye65Yqb54Sh5Yq5XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ29uc3RhbnQgPSAkLkNvbnN0YW50O1xuICBleHBvcnQgY29uc3QgY3NtRGVsZXRlID0gJC5jc21EZWxldGU7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21GcmFtZXdvcmsgPSAkLkN1YmlzbUZyYW1ld29yaztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtRnJhbWV3b3JrID0gJC5DdWJpc21GcmFtZXdvcms7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi9jdWJpc212ZWN0b3IyJztcblxuLyoqXG4gKiDmlbDlgKToqIjnrpfjgarjganjgavkvb/nlKjjgZnjgovjg6bjg7zjg4bjgqPjg6rjg4bjgqPjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1hdGgge1xuICBzdGF0aWMgcmVhZG9ubHkgRXBzaWxvbjogbnVtYmVyID0gMC4wMDAwMTtcblxuICAvKipcbiAgICog56ys5LiA5byV5pWw44Gu5YCk44KS5pyA5bCP5YCk44Go5pyA5aSn5YCk44Gu56+E5Zuy44Gr5Y+O44KB44Gf5YCk44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSDlj47jgoHjgonjgozjgovlgKRcbiAgICogQHBhcmFtIG1pbiAgIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0gbWF4ICAg56+E5Zuy44Gu5pyA5aSn5YCkXG4gICAqIEByZXR1cm4g5pyA5bCP5YCk44Go5pyA5aSn5YCk44Gu56+E5Zuy44Gr5Y+O44KB44Gf5YCkXG4gICAqL1xuICBzdGF0aWMgcmFuZ2UodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICAgIHZhbHVlID0gbWluO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgIHZhbHVlID0gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjg7PplqLmlbDjga7lgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIHgg6KeS5bqm5YCk77yI44Op44K444Ki44Oz77yJXG4gICAqIEByZXR1cm4g44K144Kk44Oz6Zai5pWwc2luKHgp44Gu5YCkXG4gICAqL1xuICBzdGF0aWMgc2luKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc2luKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+OCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCDop5LluqblgKQo44Op44K444Ki44OzKVxuICAgKiBAcmV0dXJuIOOCs+OCteOCpOODs+mWouaVsGNvcyh4KeOBruWApFxuICAgKi9cbiAgc3RhdGljIGNvcyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmNvcyh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlgKTjga7ntbblr77lgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIHgg57W25a++5YCk44KS5rGC44KB44KL5YCkXG4gICAqIEByZXR1cm4g5YCk44Gu57W25a++5YCkXG4gICAqL1xuICBzdGF0aWMgYWJzKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW5s+aWueaguSjjg6vjg7zjg4gp44KS5rGC44KB44KLXG4gICAqIEBwYXJhbSB4IC0+IOW5s+aWueagueOCkuaxguOCgeOCi+WApFxuICAgKiBAcmV0dXJuIOWApOOBruW5s+aWueaguVxuICAgKi9cbiAgc3RhdGljIHNxcnQoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeri+aWueagueOCkuaxguOCgeOCi1xuICAgKiBAcGFyYW0geCAtPiDnq4vmlrnmoLnjgpLmsYLjgoHjgovlgKRcbiAgICogQHJldHVybiDlgKTjga7nq4vmlrnmoLlcbiAgICovXG4gIHN0YXRpYyBjYnJ0KHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIGxldCBjeDogbnVtYmVyID0geDtcbiAgICBjb25zdCBpc05lZ2F0aXZlTnVtYmVyOiBib29sZWFuID0gY3ggPCAwO1xuXG4gICAgaWYgKGlzTmVnYXRpdmVOdW1iZXIpIHtcbiAgICAgIGN4ID0gLWN4O1xuICAgIH1cblxuICAgIGxldCByZXQ6IG51bWJlcjtcbiAgICBpZiAoY3ggPT09IEluZmluaXR5KSB7XG4gICAgICByZXQgPSBJbmZpbml0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0ID0gTWF0aC5leHAoTWF0aC5sb2coY3gpIC8gMyk7XG4gICAgICByZXQgPSAoY3ggLyAocmV0ICogcmV0KSArIDIgKiByZXQpIC8gMztcbiAgICB9XG4gICAgcmV0dXJuIGlzTmVnYXRpdmVOdW1iZXIgPyAtcmV0IDogcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+OCkuaxguOCgeOCi1xuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjg7vjgqLjgqbjg4jmmYLjga7jgqTjg7zjgrjjg7PjgrDjgavliKnnlKjjgafjgY3jgotcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIOOCpOODvOOCuOODs+OCsOOCkuihjOOBhuWApFxuICAgKiBAcmV0dXJuIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+WApFxuICAgKi9cbiAgc3RhdGljIGdldEVhc2luZ1NpbmUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHZhbHVlIDwgMC4wKSB7XG4gICAgICByZXR1cm4gMC4wO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPiAxLjApIHtcbiAgICAgIHJldHVybiAxLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIDAuNSAtIDAuNSAqIHRoaXMuY29zKHZhbHVlICogTWF0aC5QSSk7XG4gIH1cblxuICAvKipcbiAgICog5aSn44GN44GE5pa544Gu5YCk44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSBsZWZ0IOW3pui+uuOBruWApFxuICAgKiBAcGFyYW0gcmlnaHQg5Y+z6L6644Gu5YCkXG4gICAqIEByZXR1cm4g5aSn44GN44GE5pa544Gu5YCkXG4gICAqL1xuICBzdGF0aWMgbWF4KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQgPiByaWdodCA/IGxlZnQgOiByaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlsI/jgZXjgYTmlrnjga7lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGxlZnQgIOW3pui+uuOBruWApFxuICAgKiBAcGFyYW0gcmlnaHQg5Y+z6L6644Gu5YCkXG4gICAqIEByZXR1cm4g5bCP44GV44GE5pa544Gu5YCkXG4gICAqL1xuICBzdGF0aWMgbWluKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGxlZnQgPiByaWdodCA/IHJpZ2h0IDogbGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDop5LluqblgKTjgpLjg6njgrjjgqLjg7PlgKTjgavlpInmj5vjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGRlZ3JlZXMgICDop5LluqblgKRcbiAgICogQHJldHVybiDop5LluqblgKTjgYvjgonlpInmj5vjgZfjgZ/jg6njgrjjgqLjg7PlgKRcbiAgICovXG4gIHN0YXRpYyBkZWdyZWVzVG9SYWRpYW4oZGVncmVlczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKGRlZ3JlZXMgLyAxODAuMCkgKiBNYXRoLlBJO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeOCuOOCouODs+WApOOCkuinkuW6puWApOOBq+WkieaPm+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gcmFkaWFuICAgIOODqeOCuOOCouODs+WApFxuICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieWkieaPm+OBl+OBn+inkuW6puWApFxuICAgKi9cbiAgc3RhdGljIHJhZGlhblRvRGVncmVlcyhyYWRpYW46IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChyYWRpYW4gKiAxODAuMCkgLyBNYXRoLlBJO1xuICB9XG5cbiAgLyoqXG4gICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieODqeOCuOOCouODs+WApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZnJvbSAg5aeL54K544OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB0byAgICDntYLngrnjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyBkaXJlY3Rpb25Ub1JhZGlhbihmcm9tOiBDdWJpc21WZWN0b3IyLCB0bzogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgY29uc3QgcTE6IG51bWJlciA9IE1hdGguYXRhbjIodG8ueSwgdG8ueCk7XG4gICAgY29uc3QgcTI6IG51bWJlciA9IE1hdGguYXRhbjIoZnJvbS55LCBmcm9tLngpO1xuXG4gICAgbGV0IHJldDogbnVtYmVyID0gcTEgLSBxMjtcblxuICAgIHdoaWxlIChyZXQgPCAtTWF0aC5QSSkge1xuICAgICAgcmV0ICs9IE1hdGguUEkgKiAyLjA7XG4gICAgfVxuXG4gICAgd2hpbGUgKHJldCA+IE1hdGguUEkpIHtcbiAgICAgIHJldCAtPSBNYXRoLlBJICogMi4wO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog77yS44Gk44Gu44OZ44Kv44OI44Or44GL44KJ6KeS5bqm5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHRvICAgIOe1gueCueODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieaxguOCgeOBn+aWueWQkeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGRpcmVjdGlvblRvRGVncmVlcyhmcm9tOiBDdWJpc21WZWN0b3IyLCB0bzogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgY29uc3QgcmFkaWFuOiBudW1iZXIgPSB0aGlzLmRpcmVjdGlvblRvUmFkaWFuKGZyb20sIHRvKTtcbiAgICBsZXQgZGVncmVlOiBudW1iZXIgPSB0aGlzLnJhZGlhblRvRGVncmVlcyhyYWRpYW4pO1xuXG4gICAgaWYgKHRvLnggLSBmcm9tLnggPiAwLjApIHtcbiAgICAgIGRlZ3JlZSA9IC1kZWdyZWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZ3JlZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njgrjjgqLjg7PlgKTjgpLmlrnlkJHjg5njgq/jg4jjg6vjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHRvdGFsQW5nbGUgICAg44Op44K444Ki44Oz5YCkXG4gICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAqL1xuXG4gIHN0YXRpYyByYWRpYW5Ub0RpcmVjdGlvbih0b3RhbEFuZ2xlOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuXG4gICAgcmV0LnggPSB0aGlzLnNpbih0b3RhbEFuZ2xlKTtcbiAgICByZXQueSA9IHRoaXMuY29zKHRvdGFsQW5nbGUpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuInmrKHmlrnnqIvlvI/jga7kuInmrKHpoIXjga7kv4LmlbDjgYww44Gr44Gq44Gj44Gf44Go44GN44Gr6KOc5qyg55qE44Gr5LqM5qyh5pa556iL5byP44Gu6Kej44KS44KC44Go44KB44KL44CCXG4gICAqIGEgKiB4XjIgKyBiICogeCArIGMgPSAwXG4gICAqXG4gICAqIEBwYXJhbSAgIGEgLT4g5LqM5qyh6aCF44Gu5L+C5pWw5YCkXG4gICAqIEBwYXJhbSAgIGIgLT4g5LiA5qyh6aCF44Gu5L+C5pWw5YCkXG4gICAqIEBwYXJhbSAgIGMgLT4g5a6a5pWw6aCF44Gu5YCkXG4gICAqIEByZXR1cm4gIOS6jOasoeaWueeoi+W8j+OBruino1xuICAgKi9cbiAgc3RhdGljIHF1YWRyYXRpY0VxdWF0aW9uKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmFicyhhKSA8IEN1YmlzbU1hdGguRXBzaWxvbikge1xuICAgICAgaWYgKHRoaXMuYWJzKGIpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XG4gICAgICAgIHJldHVybiAtYztcbiAgICAgIH1cbiAgICAgIHJldHVybiAtYyAvIGI7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0oYiArIHRoaXMuc3FydChiICogYiAtIDQuMCAqIGEgKiBjKSkgLyAoMi4wICogYSk7XG4gIH1cblxuICAvKipcbiAgICog44Kr44Or44OA44OO44Gu5YWs5byP44Gr44KI44Gj44Gm44OZ44K444Kn44GudOWApOOBq+ipsuW9k+OBmeOCi++8k+asoeaWueeoi+W8j+OBruino+OCkuaxguOCgeOCi+OAglxuICAgKiDph43op6PjgavjgarjgaPjgZ/jgajjgY3jgavjga8wLjDvvZ4xLjDjga7lgKTjgavjgarjgovop6PjgpLov5TjgZnjgIJcbiAgICpcbiAgICogYSAqIHheMyArIGIgKiB4XjIgKyBjICogeCArIGQgPSAwXG4gICAqXG4gICAqIEBwYXJhbSAgIGEgLT4g5LiJ5qyh6aCF44Gu5L+C5pWw5YCkXG4gICAqIEBwYXJhbSAgIGIgLT4g5LqM5qyh6aCF44Gu5L+C5pWw5YCkXG4gICAqIEBwYXJhbSAgIGMgLT4g5LiA5qyh6aCF44Gu5L+C5pWw5YCkXG4gICAqIEBwYXJhbSAgIGQgLT4g5a6a5pWw6aCF44Gu5YCkXG4gICAqIEByZXR1cm4gIDAuMO+9njEuMOOBrumWk+OBq+OBguOCi+ino1xuICAgKi9cbiAgc3RhdGljIGNhcmRhbm9BbGdvcml0aG1Gb3JCZXppZXIoXG4gICAgYTogbnVtYmVyLFxuICAgIGI6IG51bWJlcixcbiAgICBjOiBudW1iZXIsXG4gICAgZDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuc3FydChhKSA8IEN1YmlzbU1hdGguRXBzaWxvbikge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2UodGhpcy5xdWFkcmF0aWNFcXVhdGlvbihiLCBjLCBkKSwgMC4wLCAxLjApO1xuICAgIH1cblxuICAgIGNvbnN0IGJhOiBudW1iZXIgPSBiIC8gYTtcbiAgICBjb25zdCBjYTogbnVtYmVyID0gYyAvIGE7XG4gICAgY29uc3QgZGE6IG51bWJlciA9IGQgLyBhO1xuXG4gICAgY29uc3QgcDogbnVtYmVyID0gKDMuMCAqIGNhIC0gYmEgKiBiYSkgLyAzLjA7XG4gICAgY29uc3QgcDM6IG51bWJlciA9IHAgLyAzLjA7XG4gICAgY29uc3QgcTogbnVtYmVyID0gKDIuMCAqIGJhICogYmEgKiBiYSAtIDkuMCAqIGJhICogY2EgKyAyNy4wICogZGEpIC8gMjcuMDtcbiAgICBjb25zdCBxMjogbnVtYmVyID0gcSAvIDIuMDtcbiAgICBjb25zdCBkaXNjcmltaW5hbnQ6IG51bWJlciA9IHEyICogcTIgKyBwMyAqIHAzICogcDM7XG5cbiAgICBjb25zdCBjZW50ZXIgPSAwLjU7XG4gICAgY29uc3QgdGhyZXNob2xkOiBudW1iZXIgPSBjZW50ZXIgKyAwLjAxO1xuXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDAuMCkge1xuICAgICAgY29uc3QgbXAzOiBudW1iZXIgPSAtcCAvIDMuMDtcbiAgICAgIGNvbnN0IG1wMzM6IG51bWJlciA9IG1wMyAqIG1wMyAqIG1wMztcbiAgICAgIGNvbnN0IHI6IG51bWJlciA9IHRoaXMuc3FydChtcDMzKTtcbiAgICAgIGNvbnN0IHQ6IG51bWJlciA9IC1xIC8gKDIuMCAqIHIpO1xuICAgICAgY29uc3QgY29zcGhpOiBudW1iZXIgPSB0aGlzLnJhbmdlKHQsIC0xLjAsIDEuMCk7XG4gICAgICBjb25zdCBwaGk6IG51bWJlciA9IE1hdGguYWNvcyhjb3NwaGkpO1xuICAgICAgY29uc3QgY3J0cjogbnVtYmVyID0gdGhpcy5jYnJ0KHIpO1xuICAgICAgY29uc3QgdDE6IG51bWJlciA9IDIuMCAqIGNydHI7XG5cbiAgICAgIGNvbnN0IHJvb3QxOiBudW1iZXIgPSB0MSAqIHRoaXMuY29zKHBoaSAvIDMuMCkgLSBiYSAvIDMuMDtcbiAgICAgIGlmICh0aGlzLmFicyhyb290MSAtIGNlbnRlcikgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9vdDI6IG51bWJlciA9XG4gICAgICAgIHQxICogdGhpcy5jb3MoKHBoaSArIDIuMCAqIE1hdGguUEkpIC8gMy4wKSAtIGJhIC8gMy4wO1xuICAgICAgaWYgKHRoaXMuYWJzKHJvb3QyIC0gY2VudGVyKSA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MiwgMC4wLCAxLjApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MzogbnVtYmVyID1cbiAgICAgICAgdDEgKiB0aGlzLmNvcygocGhpICsgNC4wICogTWF0aC5QSSkgLyAzLjApIC0gYmEgLyAzLjA7XG4gICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MywgMC4wLCAxLjApO1xuICAgIH1cblxuICAgIGlmIChkaXNjcmltaW5hbnQgPT0gMC4wKSB7XG4gICAgICBsZXQgdTE6IG51bWJlcjtcbiAgICAgIGlmIChxMiA8IDAuMCkge1xuICAgICAgICB1MSA9IHRoaXMuY2JydCgtcTIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdTEgPSAtdGhpcy5jYnJ0KHEyKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9vdDE6IG51bWJlciA9IDIuMCAqIHUxIC0gYmEgLyAzLjA7XG4gICAgICBpZiAodGhpcy5hYnMocm9vdDEgLSBjZW50ZXIpIDwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QxLCAwLjAsIDEuMCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvb3QyOiBudW1iZXIgPSAtdTEgLSBiYSAvIDMuMDtcbiAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QyLCAwLjAsIDEuMCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2Q6IG51bWJlciA9IHRoaXMuc3FydChkaXNjcmltaW5hbnQpO1xuICAgIGNvbnN0IHUxOiBudW1iZXIgPSB0aGlzLmNicnQoc2QgLSBxMik7XG4gICAgY29uc3QgdjE6IG51bWJlciA9IHRoaXMuY2JydChzZCArIHEyKTtcbiAgICBjb25zdCByb290MTogbnVtYmVyID0gdTEgLSB2MSAtIGJhIC8gMy4wO1xuICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QxLCAwLjAsIDEuMCk7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbWF0aCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTWF0aCA9ICQuQ3ViaXNtTWF0aDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTWF0aCA9ICQuQ3ViaXNtTWF0aDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICogNHg044Gu6KGM5YiXXG4gKlxuICogNHg06KGM5YiX44Gu5L6/5Yip44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21NYXRyaXg0NCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl90ciA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpOyAvLyA0ICogNOOBruOCteOCpOOCulxuICAgIHRoaXMubG9hZElkZW50aXR5KCk7XG4gIH1cblxuICAvKipcbiAgICog5Y+X44GR5Y+W44Gj44Gf77yS44Gk44Gu6KGM5YiX44Gu5LmX566X44KS6KGM44GG44CCXG4gICAqXG4gICAqIEBwYXJhbSBhIOihjOWIl2FcbiAgICogQHBhcmFtIGIg6KGM5YiXYlxuICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBtdWx0aXBseShcbiAgICBhOiBGbG9hdDMyQXJyYXksXG4gICAgYjogRmxvYXQzMkFycmF5LFxuICAgIGRzdDogRmxvYXQzMkFycmF5XG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGM6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wXG4gICAgXSk7XG5cbiAgICBjb25zdCBuID0gNDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG47ICsraykge1xuICAgICAgICAgIGNbaiArIGkgKiA0XSArPSBhW2sgKyBpICogNF0gKiBiW2ogKyBrICogNF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGRzdFtpXSA9IGNbaV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWNmOS9jeihjOWIl+OBq+WIneacn+WMluOBmeOCi1xuICAgKi9cbiAgcHVibGljIGxvYWRJZGVudGl0eSgpOiB2b2lkIHtcbiAgICBjb25zdCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMFxuICAgIF0pO1xuXG4gICAgdGhpcy5zZXRNYXRyaXgoYyk7XG4gIH1cblxuICAvKipcbiAgICog6KGM5YiX44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB0ciAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIHNldE1hdHJpeCh0cjogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICB0aGlzLl90cltpXSA9IHRyW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcbiAgICpcbiAgICogQHJldHVybiAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIGdldEFycmF5KCk6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7mi6HlpKfnjofjgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7mi6HlpKfnjofjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBZ6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7np7vli5Xph4/jgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNsYXRlWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruenu+WLlemHj+OCkuWPluW+l1xuICAgKiBAcmV0dXJuIFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzEzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXG4gICAqXG4gICAqIEBwYXJhbSBzcmMgWOi7uOOBruWApFxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1jou7jjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbMF0gKiBzcmMgKyB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+ioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gc3JjIFnou7jjga7lgKRcbiAgICogQHJldHVybiDnj77lnKjjga7ooYzliJfjgafoqIjnrpfjgZXjgozjgZ9Z6Lu444Gu5YCkXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdICogc3JjICsgdGhpcy5fdHJbMTNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICovXG4gIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEyXSkgLyB0aGlzLl90clswXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXG4gICAqL1xuICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS6LW354K544Gr44GX44Gm56e75YuVXG4gICAqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkui1t+eCueOBq+OBl+OBpuebuOWvvueahOOBq+enu+WLleOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVSZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkuenu+WLlVxuICAgKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKiBAcGFyYW0geSB56Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdHJbMTJdID0geDtcbiAgICB0aGlzLl90clsxM10gPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBrljou7jjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIHRyYW5zbGF0ZVgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdHJbMTJdID0geDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga5Z6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVZKHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEzXSA9IHk7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS55u45a++55qE44Gr6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcbiAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNjYWxlUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgeCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIHksXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjBcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7mi6HlpKfnjofjgpLmjIflrprjgZfjgZ/lgI3njofjgavoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruaLoeWkp+eOh1xuICAgKiBAcGFyYW0geSBZ6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgc2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90clswXSA9IHg7XG4gICAgdGhpcy5fdHJbNV0gPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBq+ihjOWIl+OCkuS5l+eul1xuICAgKlxuICAgKiBAcGFyYW0gbSDooYzliJdcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseUJ5TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkobS5nZXRBcnJheSgpLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCs+ODlOODvOOCkueUn+aIkOOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICBjb25zdCBjbG9uZU1hdHJpeDogQ3ViaXNtTWF0cml4NDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNsb25lTWF0cml4Ll90cltpXSA9IHRoaXMuX3RyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZU1hdHJpeDtcbiAgfVxuXG4gIHByb3RlY3RlZCBfdHI6IEZsb2F0MzJBcnJheTsgLy8gNHg06KGM5YiX44OH44O844K/XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1hdHJpeDQ0Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21NYXRyaXg0NCA9ICQuQ3ViaXNtTWF0cml4NDQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1hdHJpeDQ0ID0gJC5DdWJpc21NYXRyaXg0NDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbU1hcCwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuXG4vKipcbiAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl1xuICpcbiAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxNYXRyaXggZXh0ZW5kcyBDdWJpc21NYXRyaXg0NCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICpcbiAgICogQHBhcmFtIHcg5qiq5bmFXG4gICAqIEBwYXJhbSBoIOe4puW5hVxuICAgKi9cbiAgY29uc3RydWN0b3Iodz86IG51bWJlciwgaD86IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl93aWR0aCA9IHcgIT09IHVuZGVmaW5lZCA/IHcgOiAwLjA7XG4gICAgdGhpcy5faGVpZ2h0ID0gaCAhPT0gdW5kZWZpbmVkID8gaCA6IDAuMDtcblxuICAgIHRoaXMuc2V0SGVpZ2h0KDIuMCk7XG4gIH1cblxuICAvKipcbiAgICog5qiq5bmF44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB3IOaoquW5hVxuICAgKi9cbiAgcHVibGljIHNldFdpZHRoKHc6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gdyAvIHRoaXMuX3dpZHRoO1xuICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID0gc2NhbGVYO1xuICAgIHRoaXMuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOe4puW5heOCkuioreWumlxuICAgKiBAcGFyYW0gaCDnuKbluYVcbiAgICovXG4gIHB1YmxpYyBzZXRIZWlnaHQoaDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPSBoIC8gdGhpcy5faGVpZ2h0O1xuICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID0gc2NhbGVYO1xuICAgIHRoaXMuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSB5IFnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudHJhbnNsYXRlKHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4reW/g+S9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5Lit5b+D5L2N572uXG4gICAqIEBwYXJhbSB5IFnou7jjga7kuK3lv4PkvY3nva5cbiAgICpcbiAgICogQG5vdGUgd2lkdGjjgYtoZWlnaHTjgpLoqK3lrprjgZfjgZ/jgYLjgajjgafjgarjgYTjgajjgIHmi6HlpKfnjofjgYzmraPjgZfjgY/lj5blvpfjgafjgY3jgarjgYTjgZ/jgoHjgZrjgozjgovjgIJcbiAgICovXG4gIHB1YmxpYyBzZXRDZW50ZXJQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMuY2VudGVyWCh4KTtcbiAgICB0aGlzLmNlbnRlclkoeSk7XG4gIH1cblxuICAvKipcbiAgICog5LiK6L6644Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IOS4iui+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyB0b3AoeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zZXRZKHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+i+uuOBruS9jee9ruOCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geSDkuIvovrrjga5Z6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgYm90dG9tKHk6IG51bWJlcikge1xuICAgIGNvbnN0IGg6IG51bWJlciA9IHRoaXMuX2hlaWdodCAqIHRoaXMuZ2V0U2NhbGVZKCk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVkoeSAtIGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW3pui+uuOBruS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCDlt6bovrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgbGVmdCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldFgoeCk7XG4gIH1cblxuICAvKipcbiAgICog5Y+z6L6644Gu5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IOWPs+i+uuOBrljou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyByaWdodCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3ID0gdGhpcy5fd2lkdGggKiB0aGlzLmdldFNjYWxlWCgpO1xuXG4gICAgdGhpcy50cmFuc2xhdGVYKHggLSB3KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cbiAgICovXG4gIHB1YmxpYyBjZW50ZXJYKHg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcgLyAyLjApO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7kvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldFgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50cmFuc2xhdGVYKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7kuK3lv4PkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgKi9cbiAgcHVibGljIGNlbnRlclkoeTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgaDogbnVtYmVyID0gdGhpcy5faGVpZ2h0ICogdGhpcy5nZXRTY2FsZVkoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWSh5IC0gaCAvIDIuMCk7XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruS9jee9ruOCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0WSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zbGF0ZVkoeSk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44GL44KJ5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSBsYXlvdXQg44Os44Kk44Ki44Km44OI5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgc2V0dXBGcm9tTGF5b3V0KGxheW91dDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IHZvaWQge1xuICAgIGNvbnN0IGtleVdpZHRoID0gJ3dpZHRoJztcbiAgICBjb25zdCBrZXlIZWlnaHQgPSAnaGVpZ2h0JztcbiAgICBjb25zdCBrZXlYID0gJ3gnO1xuICAgIGNvbnN0IGtleVkgPSAneSc7XG4gICAgY29uc3Qga2V5Q2VudGVyWCA9ICdjZW50ZXJfeCc7XG4gICAgY29uc3Qga2V5Q2VudGVyWSA9ICdjZW50ZXJfeSc7XG4gICAgY29uc3Qga2V5VG9wID0gJ3RvcCc7XG4gICAgY29uc3Qga2V5Qm90dG9tID0gJ2JvdHRvbSc7XG4gICAgY29uc3Qga2V5TGVmdCA9ICdsZWZ0JztcbiAgICBjb25zdCBrZXlSaWdodCA9ICdyaWdodCc7XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIG51bWJlcj4gPSBsYXlvdXQuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbChsYXlvdXQuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICBpZiAoa2V5ID09IGtleVdpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0V2lkdGgodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5SGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIG51bWJlcj4gPSBsYXlvdXQuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbChsYXlvdXQuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICBpZiAoa2V5ID09IGtleVgpIHtcbiAgICAgICAgdGhpcy5zZXRYKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleVkpIHtcbiAgICAgICAgdGhpcy5zZXRZKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUNlbnRlclgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXJYKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUNlbnRlclkpIHtcbiAgICAgICAgdGhpcy5jZW50ZXJZKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleVRvcCkge1xuICAgICAgICB0aGlzLnRvcCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlCb3R0b20pIHtcbiAgICAgICAgdGhpcy5ib3R0b20odmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5TGVmdCkge1xuICAgICAgICB0aGlzLmxlZnQodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5UmlnaHQpIHtcbiAgICAgICAgdGhpcy5yaWdodCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjsgLy8g5qiq5bmFXG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyOyAvLyDnuKbluYVcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWxtYXRyaXgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsTWF0cml4ID0gJC5DdWJpc21Nb2RlbE1hdHJpeDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxNYXRyaXggPSAkLkN1YmlzbU1vZGVsTWF0cml4O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0aCB9IGZyb20gJy4vY3ViaXNtbWF0aCc7XG5cbmNvbnN0IEZyYW1lUmF0ZSA9IDMwO1xuY29uc3QgRXBzaWxvbiA9IDAuMDE7XG5cbi8qKlxuICog6aGU44Gu5ZCR44GN44Gu5Yi25b6h5qmf6IO9XG4gKlxuICog6aGU44Gu5ZCR44GN44Gu5Yi25b6h5qmf6IO944KS5o+Q5L6b44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21UYXJnZXRQb2ludCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WCA9IDAuMDtcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IDAuMDtcbiAgICB0aGlzLl9mYWNlWCA9IDAuMDtcbiAgICB0aGlzLl9mYWNlWSA9IDAuMDtcbiAgICB0aGlzLl9mYWNlVlggPSAwLjA7XG4gICAgdGhpcy5fZmFjZVZZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw5Yem55CGXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOODh+ODq+OCv+aZgumWk+OCkuWKoOeul+OBmeOCi1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgLy8g6aaW44KS5Lit5aSu44GL44KJ5bem5Y+z44Gr5oyv44KL44Go44GN44Gu5bmz5Z2H55qE44Gq6YCf44GV44GvIOenkumAn+W6puOAguWKoOmAn+ODu+a4m+mAn+OCkuiAg+aFruOBl+OBpuOAgeOBneOBru+8kuWAjeOCkuacgOmrmOmAn+W6puOBqOOBmeOCi1xuICAgIC8vIOmhlOOBruaMr+OCiuWFt+WQiOOCkuOAgeS4reWkru+8iDAuMO+8ieOBi+OCieOAgeW3puWPs+OBr++8iCstMS4w77yJ44Go44GZ44KLXG4gICAgY29uc3QgZmFjZVBhcmFtTWF4VjogbnVtYmVyID0gNDAuMCAvIDEwLjA7IC8vIDcuNeenkumWk+OBqzQw5YiG56e75YuVKDUuMy9zYylcbiAgICBjb25zdCBtYXhWOiBudW1iZXIgPSAoZmFjZVBhcmFtTWF4ViAqIDEuMCkgLyBGcmFtZVJhdGU7IC8vIDFmcmFtZeOBguOBn+OCiuOBq+WkieWMluOBp+OBjeOCi+mAn+W6puOBruS4iumZkFxuXG4gICAgaWYgKHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9PSAwLjApIHtcbiAgICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWx0YVRpbWVXZWlnaHQ6IG51bWJlciA9XG4gICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fbGFzdFRpbWVTZWNvbmRzKSAqIEZyYW1lUmF0ZTtcbiAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG5cbiAgICAvLyDmnIDpq5jpgJ/luqbjgavjgarjgovjgb7jgafjga7mmYLplpPjgpJcbiAgICBjb25zdCB0aW1lVG9NYXhTcGVlZCA9IDAuMTU7XG4gICAgY29uc3QgZnJhbWVUb01heFNwZWVkOiBudW1iZXIgPSB0aW1lVG9NYXhTcGVlZCAqIEZyYW1lUmF0ZTsgLy8gc2VjICogZnJhbWUvc2VjXG4gICAgY29uc3QgbWF4QTogbnVtYmVyID0gKGRlbHRhVGltZVdlaWdodCAqIG1heFYpIC8gZnJhbWVUb01heFNwZWVkOyAvLyAxZnJhbWXjgYLjgZ/jgorjga7liqDpgJ/luqZcblxuICAgIC8vIOebruaMh+OBmeWQkeOBjeOBr+OAge+8iGR4LCBkee+8ieaWueWQkeOBruODmeOCr+ODiOODq+OBqOOBquOCi1xuICAgIGNvbnN0IGR4OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WCAtIHRoaXMuX2ZhY2VYO1xuICAgIGNvbnN0IGR5OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WSAtIHRoaXMuX2ZhY2VZO1xuXG4gICAgaWYgKEN1YmlzbU1hdGguYWJzKGR4KSA8PSBFcHNpbG9uICYmIEN1YmlzbU1hdGguYWJzKGR5KSA8PSBFcHNpbG9uKSB7XG4gICAgICByZXR1cm47IC8vIOWkieWMluOBquOBl1xuICAgIH1cblxuICAgIC8vIOmAn+W6puOBruacgOWkp+OCiOOCiuOCguWkp+OBjeOBhOWgtOWQiOOBr+OAgemAn+W6puOCkuiQveOBqOOBmVxuICAgIGNvbnN0IGQ6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICAvLyDpgLLooYzmlrnlkJHjga7mnIDlpKfpgJ/luqbjg5njgq/jg4jjg6tcbiAgICBjb25zdCB2eDogbnVtYmVyID0gKG1heFYgKiBkeCkgLyBkO1xuICAgIGNvbnN0IHZ5OiBudW1iZXIgPSAobWF4ViAqIGR5KSAvIGQ7XG5cbiAgICAvLyDnj77lnKjjga7pgJ/luqbjgYvjgonjgIHmlrDopo/pgJ/luqbjgbjjga7lpInljJbvvIjliqDpgJ/luqbvvInjgpLmsYLjgoHjgotcbiAgICBsZXQgYXg6IG51bWJlciA9IHZ4IC0gdGhpcy5fZmFjZVZYO1xuICAgIGxldCBheTogbnVtYmVyID0gdnkgLSB0aGlzLl9mYWNlVlk7XG5cbiAgICBjb25zdCBhOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpO1xuXG4gICAgLy8g5Yqg6YCf44Gu44Go44GNXG4gICAgaWYgKGEgPCAtbWF4QSB8fCBhID4gbWF4QSkge1xuICAgICAgYXggKj0gbWF4QSAvIGE7XG4gICAgICBheSAqPSBtYXhBIC8gYTtcbiAgICB9XG5cbiAgICAvLyDliqDpgJ/luqbjgpLlhYPjga7pgJ/luqbjgavotrPjgZfjgabjgIHmlrDpgJ/luqbjgajjgZnjgotcbiAgICB0aGlzLl9mYWNlVlggKz0gYXg7XG4gICAgdGhpcy5fZmFjZVZZICs9IGF5O1xuXG4gICAgLy8g55uu55qE44Gu5pa55ZCR44Gr6L+R44Gl44GE44Gf44Go44GN44CB5ruR44KJ44GL44Gr5rib6YCf44GZ44KL44Gf44KB44Gu5Yem55CGXG4gICAgLy8g6Kit5a6a44GV44KM44Gf5Yqg6YCf5bqm44Gn5q2i44G+44KL5LqL44Gu5Ye65p2l44KL6Led6Zui44Go6YCf5bqm44Gu6Zai5L+C44GL44KJXG4gICAgLy8g54++5Zyo44Go44KK44GG44KL5pyA6auY6YCf5bqm44KS6KiI566X44GX44CB44Gd44KM5Lul5LiK44Gu5pmC44Gv6YCf5bqm44KS6JC944Go44GZXG4gICAgLy8g4oC75pys5p2l44CB5Lq66ZaT44Gv562L5Yqb44Gn5Yqb77yI5Yqg6YCf5bqm77yJ44KS6Kq/5pW044Gn44GN44KL44Gf44KB44CB44KI44KK6Ieq55Sx5bqm44GM6auY44GE44GM44CB57Ch5Y2Y44Gq5Yem55CG44Gn5riI44G+44Gb44Gm44GE44KLXG4gICAge1xuICAgICAgLy8g5Yqg6YCf5bqm44CB6YCf5bqm44CB6Led6Zui44Gu6Zai5L+C5byP44CCXG4gICAgICAvLyAgICAgICAgICAgIDIgIDYgICAgICAgICAgIDIgICAgICAgICAgICAgICAzXG4gICAgICAvLyAgICAgIHNxcnQoYSAgdCAgKyAxNiBhIGggdCAgLSA4IGEgaCkgLSBhIHRcbiAgICAgIC8vIHYgPSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgIDJcbiAgICAgIC8vICAgICAgICAgICAgICAgICA0IHQgIC0gMlxuICAgICAgLy8gKHQ9MSlcbiAgICAgIC8vIFx05pmC5Yi7dOOBr+OAgeOBguOCieOBi+OBmOOCgeWKoOmAn+W6puOAgemAn+W6puOCkjEvNjAo44OV44Os44O844Og44Os44O844OI44CB5Y2Y5L2N44Gq44GXKeOBp1xuICAgICAgLy8gXHTogIPjgYjjgabjgYTjgovjga7jgafjgIF077yd77yR44Go44GX44Gm5raI44GX44Gm44KI44GE77yI4oC75pyq5qSc6Ki877yJXG5cbiAgICAgIGNvbnN0IG1heFY6IG51bWJlciA9XG4gICAgICAgIDAuNSAqXG4gICAgICAgIChDdWJpc21NYXRoLnNxcnQobWF4QSAqIG1heEEgKyAxNi4wICogbWF4QSAqIGQgLSA4LjAgKiBtYXhBICogZCkgLVxuICAgICAgICAgIG1heEEpO1xuICAgICAgY29uc3QgY3VyVjogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KFxuICAgICAgICB0aGlzLl9mYWNlVlggKiB0aGlzLl9mYWNlVlggKyB0aGlzLl9mYWNlVlkgKiB0aGlzLl9mYWNlVllcbiAgICAgICk7XG5cbiAgICAgIGlmIChjdXJWID4gbWF4Vikge1xuICAgICAgICAvLyDnj77lnKjjga7pgJ/luqYgPiDmnIDpq5jpgJ/luqbjga7jgajjgY3jgIHmnIDpq5jpgJ/luqbjgb7jgafmuJvpgJ9cbiAgICAgICAgdGhpcy5fZmFjZVZYICo9IG1heFYgLyBjdXJWO1xuICAgICAgICB0aGlzLl9mYWNlVlkgKj0gbWF4ViAvIGN1clY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZmFjZVggKz0gdGhpcy5fZmFjZVZYO1xuICAgIHRoaXMuX2ZhY2VZICs9IHRoaXMuX2ZhY2VWWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk44KS5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4gWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICovXG4gIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhY2VYO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7poZTjga7lkJHjgY3jga7lgKTjgpLlj5blvpdcbiAgICpcbiAgICogQHJldHVybiBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFjZVk7XG4gIH1cblxuICAvKipcbiAgICog6aGU44Gu5ZCR44GN44Gu55uu5qiZ5YCk44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAqIEBwYXJhbSB5IFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFjZVRhcmdldFggPSB4O1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRZID0geTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZhY2VUYXJnZXRYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBrljnm67mqJnlgKTvvIjjgZPjga7lgKTjgavov5HjgaXjgYTjgabjgYTjgY/vvIlcbiAgcHJpdmF0ZSBfZmFjZVRhcmdldFk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWeebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxuICBwcml2YXRlIF9mYWNlWDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY1Y77yILTEuMCB+IDEuMO+8iVxuICBwcml2YXRlIF9mYWNlWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY1Z77yILTEuMCB+IDEuMO+8iVxuICBwcml2YXRlIF9mYWNlVlg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44Gu5aSJ5YyW6YCf5bqmWFxuICBwcml2YXRlIF9mYWNlVlk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44Gu5aSJ5YyW6YCf5bqmWVxuICBwcml2YXRlIF9sYXN0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g5pyA5b6M44Gu5a6f6KGM5pmC6ZaTW+enkl1cbiAgcHJpdmF0ZSBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXRhcmdldHBvaW50Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21UYXJnZXRQb2ludCA9ICQuQ3ViaXNtVGFyZ2V0UG9pbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVRhcmdldFBvaW50ID0gJC5DdWJpc21UYXJnZXRQb2ludDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICogMuasoeWFg+ODmeOCr+ODiOODq+Wei1xuICpcbiAqIDLmrKHlhYPjg5njgq/jg4jjg6vlnovjga7mqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVZlY3RvcjIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHg/OiBudW1iZXIsIHB1YmxpYyB5PzogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geCA9PSB1bmRlZmluZWQgPyAwLjAgOiB4O1xuXG4gICAgdGhpcy55ID0geSA9PSB1bmRlZmluZWQgPyAwLjAgOiB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBruWKoOeul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDliqDnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDliqDnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgYWRkKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggKyB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgKyB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7muJvnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg5rib566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g5rib566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIHN1YnN0cmFjdCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHJldC54ID0gdGhpcy54IC0gdmVjdG9yMi54O1xuICAgIHJldC55ID0gdGhpcy55IC0gdmVjdG9yMi55O1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5LmX566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOS5l+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseSh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHJldC54ID0gdGhpcy54ICogdmVjdG9yMi54O1xuICAgIHJldC55ID0gdGhpcy55ICogdmVjdG9yMi55O1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5LmX566XKOOCueOCq+ODqeODvClcbiAgICpcbiAgICogQHBhcmFtIHNjYWxhciDkuZfnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlCeVNjYWxlcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG5ldyBDdWJpc21WZWN0b3IyKHNjYWxhciwgc2NhbGFyKSk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6Zmk566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOmZpOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBkaXZpc2lvbih2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHJldC54ID0gdGhpcy54IC8gdmVjdG9yMi54O1xuICAgIHJldC55ID0gdGhpcy55IC8gdmVjdG9yMi55O1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6Zmk566XKOOCueOCq+ODqeODvClcbiAgICpcbiAgICogQHBhcmFtIHNjYWxhciDpmaTnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICogQHJldHVybiDpmaTnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgZGl2aXNpb25CeVNjYWxhcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLmRpdmlzaW9uKG5ldyBDdWJpc21WZWN0b3IyKHNjYWxhciwgc2NhbGFyKSk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6ZW344GV44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6ZW344GVXG4gICAqL1xuICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xuICAgKlxuICAgKiBAcGFyYW0gYSDngrlcbiAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXREaXN0YW5jZVdpdGgoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydChcbiAgICAgICh0aGlzLnggLSBhLngpICogKHRoaXMueCAtIGEueCkgKyAodGhpcy55IC0gYS55KSAqICh0aGlzLnkgLSBhLnkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4njg4Pjg4jnqY3jga7oqIjnrpdcbiAgICpcbiAgICogQHBhcmFtIGEg5YCkXG4gICAqIEByZXR1cm4g57WQ5p6cXG4gICAqL1xuICBwdWJsaWMgZG90KGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKiBhLnggKyB0aGlzLnkgKiBhLnk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44Gu6YGp55SoXG4gICAqL1xuICBwdWJsaWMgbm9ybWFsaXplKCk6IHZvaWQge1xuICAgIGNvbnN0IGxlbmd0aDogbnVtYmVyID0gTWF0aC5wb3codGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55LCAwLjUpO1xuXG4gICAgdGhpcy54ID0gdGhpcy54IC8gbGVuZ3RoO1xuICAgIHRoaXMueSA9IHRoaXMueSAvIGxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYnjgZfjgZXjga7norroqo3vvIjnrYnjgZfjgYTjgYvvvJ/vvIlcbiAgICpcbiAgICog5YCk44GM562J44GX44GE44GL77yfXG4gICAqXG4gICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgYRcbiAgICogQHJldHVybiBmYWxzZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnggPT0gcmhzLnggJiYgdGhpcy55ID09IHJocy55O1xuICB9XG5cbiAgLyoqXG4gICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBj+OBquOBhOOBi++8n++8iVxuICAgKlxuICAgKiDlgKTjgYznrYnjgZfjgY/jgarjgYTjgYvvvJ9cbiAgICpcbiAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcbiAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBhFxuICAgKi9cbiAgcHVibGljIGlzTm90RXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzRXF1YWwocmhzKTtcbiAgfVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc212ZWN0b3IyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21WZWN0b3IyID0gJC5DdWJpc21WZWN0b3IyO1xuICBleHBvcnQgdHlwZSBDdWJpc21WZWN0b3IyID0gJC5DdWJpc21WZWN0b3IyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuL2N1YmlzbW1hdHJpeDQ0JztcblxuLyoqXG4gKiDjgqvjg6Hjg6njga7kvY3nva7lpInmm7Tjgavkvb/jgYbjgajkvr/liKnjgao0eDTooYzliJdcbiAqXG4gKiDjgqvjg6Hjg6njga7kvY3nva7lpInmm7Tjgavkvb/jgYbjgajkvr/liKnjgao0eDTooYzliJfjga7jgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVZpZXdNYXRyaXggZXh0ZW5kcyBDdWJpc21NYXRyaXg0NCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NjcmVlbkxlZnQgPSAwLjA7XG4gICAgdGhpcy5fc2NyZWVuUmlnaHQgPSAwLjA7XG4gICAgdGhpcy5fc2NyZWVuVG9wID0gMC4wO1xuICAgIHRoaXMuX3NjcmVlbkJvdHRvbSA9IDAuMDtcbiAgICB0aGlzLl9tYXhMZWZ0ID0gMC4wO1xuICAgIHRoaXMuX21heFJpZ2h0ID0gMC4wO1xuICAgIHRoaXMuX21heFRvcCA9IDAuMDtcbiAgICB0aGlzLl9tYXhCb3R0b20gPSAwLjA7XG4gICAgdGhpcy5fbWF4U2NhbGUgPSAwLjA7XG4gICAgdGhpcy5fbWluU2NhbGUgPSAwLjA7XG4gIH1cblxuICAvKipcbiAgICog56e75YuV44KS6Kq/5pW0XG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGFkanVzdFRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl90clswXSAqIHRoaXMuX21heExlZnQgKyAodGhpcy5fdHJbMTJdICsgeCkgPiB0aGlzLl9zY3JlZW5MZWZ0KSB7XG4gICAgICB4ID0gdGhpcy5fc2NyZWVuTGVmdCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4TGVmdCAtIHRoaXMuX3RyWzEyXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhSaWdodCArICh0aGlzLl90clsxMl0gKyB4KSA8IHRoaXMuX3NjcmVlblJpZ2h0KSB7XG4gICAgICB4ID0gdGhpcy5fc2NyZWVuUmlnaHQgLSB0aGlzLl90clswXSAqIHRoaXMuX21heFJpZ2h0IC0gdGhpcy5fdHJbMTJdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90cls1XSAqIHRoaXMuX21heFRvcCArICh0aGlzLl90clsxM10gKyB5KSA8IHRoaXMuX3NjcmVlblRvcCkge1xuICAgICAgeSA9IHRoaXMuX3NjcmVlblRvcCAtIHRoaXMuX3RyWzVdICogdGhpcy5fbWF4VG9wIC0gdGhpcy5fdHJbMTNdO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHRoaXMuX3RyWzVdICogdGhpcy5fbWF4Qm90dG9tICsgKHRoaXMuX3RyWzEzXSArIHkpID5cbiAgICAgIHRoaXMuX3NjcmVlbkJvdHRvbVxuICAgICkge1xuICAgICAgeSA9IHRoaXMuX3NjcmVlbkJvdHRvbSAtIHRoaXMuX3RyWzVdICogdGhpcy5fbWF4Qm90dG9tIC0gdGhpcy5fdHJbMTNdO1xuICAgIH1cblxuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OCkuiqv+aVtFxuICAgKlxuICAgKiBAcGFyYW0gY3gg5ouh5aSn44KS6KGM44GGWOi7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gY3kg5ouh5aSn44KS6KGM44GGWei7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gc2NhbGUg5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgYWRqdXN0U2NhbGUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG1heFNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1heFNjYWxlKCk7XG4gICAgY29uc3QgbWluU2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWluU2NhbGUoKTtcblxuICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcblxuICAgIGlmICh0YXJnZXRTY2FsZSA8IG1pblNjYWxlKSB7XG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcbiAgICAgICAgc2NhbGUgPSBtaW5TY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0U2NhbGUgPiBtYXhTY2FsZSkge1xuICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgIHNjYWxlID0gbWF4U2NhbGUgLyB0aGlzLl90clswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgY3gsXG4gICAgICBjeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMFxuICAgIF0pO1xuXG4gICAgY29uc3QgdHIyOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIHNjYWxlLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgc2NhbGUsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjBcbiAgICBdKTtcblxuICAgIGNvbnN0IHRyMzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAtY3gsXG4gICAgICAtY3ksXG4gICAgICAwLjAsXG4gICAgICAxLjBcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMywgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjIsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCAgICAgIOW3pui+uuOBrljou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gdG9wICAgICAgIOS4iui+uuOBrlnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRTY3JlZW5SZWN0KFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICByaWdodDogbnVtYmVyLFxuICAgIGJvdHRvbTogbnVtYmVyLFxuICAgIHRvcDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3NjcmVlbkxlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3NjcmVlblJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xuICAgIHRoaXMuX3NjcmVlblRvcCA9IHRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7Ljga7oqK3lrppcbiAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSByaWdodCAgICAg5Y+z6L6644GuWOi7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gYm90dG9tICAgIOS4i+i+uuOBrlnou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0TWF4U2NyZWVuUmVjdChcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICB0b3A6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9tYXhMZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl9tYXhSaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuX21heFRvcCA9IHRvcDtcbiAgICB0aGlzLl9tYXhCb3R0b20gPSBib3R0b207XG4gIH1cblxuICAvKipcbiAgICog5pyA5aSn5ouh5aSn546H44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBtYXhTY2FsZSDmnIDlpKfmi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzZXRNYXhTY2FsZShtYXhTY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbWF4U2NhbGUgPSBtYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlsI/mi6HlpKfnjofjga7oqK3lrppcbiAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNldE1pblNjYWxlKG1pblNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWkp+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWkp+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1heFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWwj+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1pblNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OBjOacgOWkp+OBq+OBquOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjeOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5aSnXG4gICAqIEByZXR1cm4gZmFsc2Ug5ouh5aSn546H44Gv5pyA5aSn44Gn44Gv44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNNYXhTY2FsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY2FsZVgoKSA+PSB0aGlzLl9tYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmi6HlpKfnjofjgYzmnIDlsI/jgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcbiAgICpcbiAgICogQHJldHVybiB0cnVlIOaLoeWkp+eOh+OBr+acgOWwj1xuICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWwj+OBp+OBr+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTWluU2NhbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPD0gdGhpcy5fbWluU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644Gu77y46Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGdldFNjcmVlbkxlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuUmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiL6L6644GuWei7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4i+i+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5Cb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuQm90dG9tO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4iui+uuOBrlnou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuVG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjcmVlblRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5bem6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4TGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7Povrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5Y+z6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFJpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+i+uuOBrlnou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4Qm90dG9tKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heEJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5LiK6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXhUb3A7XG4gIH1cblxuICBwcml2YXRlIF9zY3JlZW5MZWZ0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfc2NyZWVuUmlnaHQ6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Ub3A6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Cb3R0b206IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhMZWZ0OiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfbWF4UmlnaHQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhUb3A6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhCb3R0b206IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhTY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlpKflgKRcbiAgcHJpdmF0ZSBfbWluU2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5bCP5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZpZXdtYXRyaXgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuL2N1YmlzbW1vZGVsJztcblxuLyoqXG4gKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIZcbiAqXG4gKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vYyB7XG4gIC8qKlxuICAgKiBNb2Pjg4fjg7zjgr/jga7kvZzmiJBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG1vY0J5dGVzOiBBcnJheUJ1ZmZlcik6IEN1YmlzbU1vYyB7XG4gICAgbGV0IGN1YmlzbU1vYzogQ3ViaXNtTW9jID0gbnVsbDtcbiAgICBjb25zdCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MuZnJvbUFycmF5QnVmZmVyKFxuICAgICAgbW9jQnl0ZXNcbiAgICApO1xuXG4gICAgaWYgKG1vYykge1xuICAgICAgY3ViaXNtTW9jID0gbmV3IEN1YmlzbU1vYyhtb2MpO1xuICAgIH1cblxuICAgIHJldHVybiBjdWJpc21Nb2M7XG4gIH1cblxuICAvKipcbiAgICogTW9j44OH44O844K/44KS5YmK6ZmkXG4gICAqXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUobW9jOiBDdWJpc21Nb2MpOiB2b2lkIHtcbiAgICBtb2MuX21vYy5fcmVsZWFzZSgpO1xuICAgIG1vYy5fbW9jID0gbnVsbDtcbiAgICBtb2MgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuS9nOaIkOOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIE1vY+ODh+ODvOOCv+OBi+OCieS9nOaIkOOBleOCjOOBn+ODouODh+ODq1xuICAgKi9cbiAgY3JlYXRlTW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgIGxldCBjdWJpc21Nb2RlbDogQ3ViaXNtTW9kZWwgPSBudWxsO1xuXG4gICAgY29uc3QgbW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwgPSBMaXZlMkRDdWJpc21Db3JlLk1vZGVsLmZyb21Nb2MoXG4gICAgICB0aGlzLl9tb2NcbiAgICApO1xuXG4gICAgaWYgKG1vZGVsKSB7XG4gICAgICBjdWJpc21Nb2RlbCA9IG5ldyBDdWJpc21Nb2RlbChtb2RlbCk7XG4gICAgICBjdWJpc21Nb2RlbC5pbml0aWFsaXplKCk7XG5cbiAgICAgICsrdGhpcy5fbW9kZWxDb3VudDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3ViaXNtTW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5YmK6Zmk44GZ44KLXG4gICAqL1xuICBkZWxldGVNb2RlbChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xuICAgICAgbW9kZWwucmVsZWFzZSgpO1xuICAgICAgbW9kZWwgPSBudWxsO1xuICAgICAgLS10aGlzLl9tb2RlbENvdW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IobW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYykge1xuICAgIHRoaXMuX21vYyA9IG1vYztcbiAgICB0aGlzLl9tb2RlbENvdW50ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxDb3VudCA9PSAwKTtcblxuICAgIHRoaXMuX21vYy5fcmVsZWFzZSgpO1xuICAgIHRoaXMuX21vYyA9IG51bGw7XG4gIH1cblxuICBfbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYzsgLy8gTW9j44OH44O844K/XG4gIF9tb2RlbENvdW50OiBudW1iZXI7IC8vIE1vY+ODh+ODvOOCv+OBi+OCieS9nOOCieOCjOOBn+ODouODh+ODq+OBruWAi+aVsFxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2MnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vYyA9ICQuQ3ViaXNtTW9jO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbUJsZW5kTW9kZSB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcic7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuXG4vKipcbiAqIOODouODh+ODq1xuICpcbiAqIE1vY+ODh+ODvOOCv+OBi+OCieeUn+aIkOOBleOCjOOCi+ODouODh+ODq+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWwge1xuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBtb2RlbFxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xuXG4gICAgdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlc2V0RHluYW1pY0ZsYWdzKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44Oz44OQ44K544Gu5bmF44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2FudmFzV2lkdGgoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5DYW52YXNXaWR0aCAvIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uUGl4ZWxzUGVyVW5pdFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44Oz44OQ44K544Gu6auY44GV44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2FudmFzSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzSGVpZ2h0IC8gdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgpLkv53lrZjjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzYXZlUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICBjb25zdCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgICBjb25zdCBzYXZlZFBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICBpZiAoaSA8IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcbiAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnNldChpLCB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnB1c2hCYWNrKHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKCk6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLlj5blvpdcbiAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldFBhcnRJbmRleChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBsZXQgcGFydEluZGV4OiBudW1iZXI7XG4gICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcblxuICAgIGZvciAocGFydEluZGV4ID0gMDsgcGFydEluZGV4IDwgcGFydENvdW50OyArK3BhcnRJbmRleCkge1xuICAgICAgaWYgKHBhcnRJZCA9PSB0aGlzLl9wYXJ0SWRzLmF0KHBhcnRJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOWGheOBq+OBguOCi+OBi+OCkuaknOe0ouOBl+OAgeOBneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRJZC5pc0V4aXN0KHBhcnRJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRJZC5nZXRWYWx1ZShwYXJ0SWQpO1xuICAgIH1cblxuICAgIC8vIOmdnuWtmOWcqOODkeODvOODhElE44Oq44K544OI44Gr44Gq44GE5aC05ZCI44CB5paw44GX44GP6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgcGFydEluZGV4ID0gcGFydENvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFydElkLnNldFZhbHVlKHBhcnRJZCwgcGFydEluZGV4KTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuYXBwZW5kS2V5KHBhcnRJbmRleCk7XG5cbiAgICByZXR1cm4gcGFydEluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRDb3VudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG4gICAgcmV0dXJuIHBhcnRDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSW5kZXgpXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIHNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpIHtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5zZXRWYWx1ZShwYXJ0SW5kZXgsIG9wYWNpdHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxuICAgIENTTV9BU1NFUlQoMCA8PSBwYXJ0SW5kZXggJiYgcGFydEluZGV4IDwgdGhpcy5nZXRQYXJ0Q291bnQoKSk7XG5cbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF0gPSBvcGFjaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumihJZClcbiAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxuICAgKiBAcGFyYW0gb3BhY2l0eSDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SWQocGFydElkOiBDdWJpc21JZEhhbmRsZSwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrUGFydEluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm47IC8vIOODkeODvOODhOOBjOOBquOBhOOBruOBp+OCueOCreODg+ODl1xuICAgIH1cblxuICAgIHRoaXMuc2V0UGFydE9wYWNpdHlCeUluZGV4KGluZGV4LCBvcGFjaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaW5kZXgpXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmlzRXhpc3QocGFydEluZGV4KSkge1xuICAgICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gq44GE44OR44O844OESUTjga7loLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4Tjg6rjgrnjg4jjgYvjgonkuI3pgI/mmI7luqbjgpLov5TjgZnjgIJcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuZ2V0VmFsdWUocGFydEluZGV4KTtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaWQpXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44Gu77yp772EXG4gICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIDA7IC8vIOODkeODvOODhOOBjOeEoeOBhOOBruOBp+OCueOCreODg+ODl1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAqIEBwYXJhbSDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgbGV0IHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG4gICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcblxuICAgIGZvciAocGFyYW1ldGVySW5kZXggPSAwOyBwYXJhbWV0ZXJJbmRleCA8IGlkQ291bnQ7ICsrcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCAhPSB0aGlzLl9wYXJhbWV0ZXJJZHMuYXQocGFyYW1ldGVySW5kZXgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gICAgfVxuXG4gICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jlhoXjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5pc0V4aXN0KHBhcmFtZXRlcklkKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuZ2V0VmFsdWUocGFyYW1ldGVySWQpO1xuICAgIH1cblxuICAgIC8vIOmdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gr44Gq44GE5aC05ZCI5paw44GX44GP6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgcGFyYW1ldGVySW5kZXggPVxuICAgICAgdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudCArIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuZ2V0U2l6ZSgpO1xuXG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5zZXRWYWx1ZShwYXJhbWV0ZXJJZCwgcGFyYW1ldGVySW5kZXgpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmFwcGVuZEtleShwYXJhbWV0ZXJJbmRleCk7XG5cbiAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1heGltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1pbmltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4ICAgIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuaXNFeGlzdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCk7XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJZChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq3BhcmFtZXRlckluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgY29uc3QgcGFyYW1ldGVySW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZhbHVlIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuc2V0VmFsdWUoXG4gICAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICA6IHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KSAqXG4gICAgICAgICAgICAgICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0XG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA+IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XG4gICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogKHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSAqICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICB2YWx1ZSAqIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpbmRleClcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KSArIHZhbHVlICogd2VpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7liqDnrpcoaWQpXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/vvKnvvKRcbiAgICogQHBhcmFtIHZhbHVlIOWKoOeul+OBmeOCi+WApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIGFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICBwYXJhbWV0ZXJJZDogYW55LFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLmFkZFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgKDEuMCArICh2YWx1ZSAtIDEuMCkgKiB3ZWlnaHQpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJZCBEcmF3YWJsZeOBrklEXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBkcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgIGRyYXdhYmxlSW5kZXggPCBkcmF3YWJsZUNvdW50O1xuICAgICAgKytkcmF3YWJsZUluZGV4XG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5fZHJhd2FibGVJZHMuYXQoZHJhd2FibGVJbmRleCkgPT0gZHJhd2FibGVJZCkge1xuICAgICAgICByZXR1cm4gZHJhd2FibGVJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlQ291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuICAgIHJldHVybiBkcmF3YWJsZUNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVJZChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbZHJhd2FibGVJbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVJlbmRlck9yZGVycygpOiBJbnQzMkFycmF5IHtcbiAgICBjb25zdCByZW5kZXJPcmRlcnM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMucmVuZGVyT3JkZXJzO1xuICAgIHJldHVybiByZW5kZXJPcmRlcnM7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVGV4dHVyZUluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB0ZXh0dXJlSW5kaWNlczogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy50ZXh0dXJlSW5kaWNlcztcbiAgICByZXR1cm4gdGV4dHVyZUluZGljZXNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga5WZXJ0ZXhQb3NpdGlvbnPjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7poILngrnmg4XloLHjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgZHJhd2FibGVJbmRleCAgIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR2YWwgIHRydWUgICAgRHJhd2FibGXjga7poILngrnmg4XloLHjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICogQHJldHZhbCAgZmFsc2UgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlQml0KFxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgaW5kZXhDb3VudHM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kZXhDb3VudHM7XG4gICAgcmV0dXJuIGluZGV4Q291bnRzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgdmVydGV4Q291bnRzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleENvdW50cztcbiAgICByZXR1cm4gdmVydGV4Q291bnRzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMoZHJhd2FibGVJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXJhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4SW5kaWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBVaW50MTZBcnJheSB7XG4gICAgY29uc3QgaW5kaWNlc0FycmF5OiBVaW50MTZBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmluZGljZXM7XG4gICAgcmV0dXJuIGluZGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICBjb25zdCB2ZXJ0aWNlc0FycmF5OiBGbG9hdDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy52ZXJ0ZXhQb3NpdGlvbnM7XG4gICAgcmV0dXJuIHZlcnRpY2VzQXJyYXlbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjga5VVuODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K5VVbjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFV2cyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgIGNvbnN0IHV2c0FycmF5OiBGbG9hdDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy52ZXJ0ZXhVdnM7XG4gICAgcmV0dXJuIHV2c0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7kuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU9wYWNpdHkoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBvcGFjaXRpZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5vcGFjaXRpZXM7XG4gICAgcmV0dXJuIG9wYWNpdGllc1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCq+ODquODs+OCsOaDheWgseOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnN0YW50RmxhZ3MgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY29uc3RhbnRGbGFncztcblxuICAgIHJldHVybiAhTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0RvdWJsZVNpZGVkQml0KFxuICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4njgpLlj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODiVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlQmxlbmRNb2RlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUJsZW5kTW9kZSB7XG4gICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRBZGRpdGl2ZUJpdChcbiAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApXG4gICAgICA/IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfQWRkaXRpdmVcbiAgICAgIDogTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZE11bHRpcGxpY2F0aXZlQml0KFxuICAgICAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICAgKVxuICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlXG4gICAgICA6IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55So44Gu5Y+W5b6XXG4gICAqXG4gICAqIERyYXdhYmxl44Gu44Oe44K544Kv5L2/55So5pmC44Gu5Y+N6Lui6Kit5a6a44KS5Y+W5b6X44GZ44KL44CCXG4gICAqIOODnuOCueOCr+OCkuS9v+eUqOOBl+OBquOBhOWgtOWQiOOBr+eEoeimluOBleOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu5Y+N6Lui6Kit5a6aXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVJbnZlcnRlZE1hc2tCaXQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29uc3RhbnRGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNJbnZlcnRlZE1hc2tCaXQoXG4gICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrcygpOiBJbnQzMkFycmF5W10ge1xuICAgIGNvbnN0IG1hc2tzOiBJbnQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMubWFza3M7XG4gICAgcmV0dXJuIG1hc2tzO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5YCL5pWw44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7lgIvmlbDjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tDb3VudHMoKTogSW50MzJBcnJheSB7XG4gICAgY29uc3QgbWFza0NvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzO1xuICAgIHJldHVybiBtYXNrQ291bnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruS9v+eUqOeKtuaFi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNVc2luZ01hc2tpbmcoKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgZCA9IDA7IGQgPCB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7ICsrZCkge1xuICAgICAgaWYgKHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzW2RdIDw9IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6KGo56S65oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBjOihqOekulxuICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44GM6Z2e6KGo56S6XG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzVmlzaWJsZUJpdChkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuRHJhd09yZGVy44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44GuZHJhd09yZGVy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqIGRyYXdPcmRlcuOBr2FydE1lc2jkuIrjgafmjIflrprjgZnjgosw44GL44KJMTAwMOOBruaDheWgsVxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUgZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSBkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOCi1xuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlKFxuICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1Zpc2liaWxpdHlEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ09wYWNpdHlEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzT3BhY2l0eURpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7mj4/nlLvpoIbluo/jga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnUmVuZGVyT3JkZXJEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzUmVuZGVyT3JkZXJEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruiqreOBv+i+vOOBv1xuICAgKi9cbiAgcHVibGljIGxvYWRQYXJhbWV0ZXJzKCk6IHZvaWQge1xuICAgIGxldCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgICBjb25zdCBzYXZlZFBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuZ2V0U2l6ZSgpO1xuXG4gICAgaWYgKHBhcmFtZXRlckNvdW50ID4gc2F2ZWRQYXJhbWV0ZXJDb3VudCkge1xuICAgICAgcGFyYW1ldGVyQ291bnQgPSBzYXZlZFBhcmFtZXRlckNvdW50O1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbjgZnjgotcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWwpO1xuXG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgdGhpcy5fcGFydE9wYWNpdGllcyA9IHRoaXMuX21vZGVsLnBhcnRzLm9wYWNpdGllcztcbiAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgIHRoaXMuX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG5cbiAgICB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5pZHM7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcblxuICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnByZXBhcmVDYXBhY2l0eShwYXJhbWV0ZXJDb3VudCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbaV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgY29uc3QgcGFydElkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJ0cy5pZHM7XG4gICAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xuXG4gICAgICB0aGlzLl9wYXJ0SWRzLnByZXBhcmVDYXBhY2l0eShwYXJ0Q291bnQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0Q291bnQ7ICsraSkge1xuICAgICAgICB0aGlzLl9wYXJ0SWRzLnB1c2hCYWNrKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJ0SWRzW2ldKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHtcbiAgICAgIGNvbnN0IGRyYXdhYmxlSWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XG5cbiAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnByZXBhcmVDYXBhY2l0eShkcmF3YWJsZUNvdW50KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnB1c2hCYWNrKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChkcmF3YWJsZUlkc1tpXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbCkge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzID0gbnVsbDtcbiAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX2RyYXdhYmxlSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9wYXJ0SWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgIHRoaXMuX25vdEV4aXN0UGFydElkID0gbmV3IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPigpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbC5yZWxlYXNlKCk7XG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJ0T3BhY2l0aWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJ0SWQ6IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44O844OESUTjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9ub3RFeGlzdFBhcmFtZXRlclZhbHVlczogY3NtTWFwPG51bWJlciwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXG4gIHByaXZhdGUgX25vdEV4aXN0UGFyYW1ldGVySWQ6IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9zYXZlZFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDkv53lrZjjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr9cblxuICBwcml2YXRlIF9tb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbDsgLy8g44Oi44OH44OrXG5cbiAgcHJpdmF0ZSBfcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxuICBwcml2YXRlIF9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApOOBruODquOCueODiFxuICBwcml2YXRlIF9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruODquOCueODiFxuXG4gIHByaXZhdGUgX3BhcnRPcGFjaXRpZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfcGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xuICBwcml2YXRlIF9wYXJ0SWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xuICBwcml2YXRlIF9kcmF3YWJsZUlkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsID0gJC5DdWJpc21Nb2RlbDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWwgPSAkLkN1YmlzbU1vZGVsO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcblxuY29uc3QgQXJ0TWVzaCA9ICdBcnRNZXNoJztcblxuLyoqXG4gKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrlcbiAqXG4gKiBKc29u44GL44KJ6Kqt44G/6L6844KT44Gg44Om44O844K244O844OH44O844K/44KS6KiY6Yyy44GX44Gm44GK44GP44Gf44KB44Gu5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSB7XG4gIHRhcmdldFR5cGU6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4jjgr/jgqTjg5dcbiAgdGFyZ2V0SWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4jjga5JRFxuICB2YWx1ZTogY3NtU3RyaW5nOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cbn1cblxuLyoqXG4gKiDjg6bjg7zjgrbjg4fjg7zjgr/jga7nrqHnkIbjgq/jg6njgrlcbiAqXG4gKiDjg6bjg7zjgrbjg4fjg7zjgr/jgpLjg63jg7zjg4njgIHnrqHnkIbjgIHmpJzntKLjgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgIHop6PmlL7jgb7jgafjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGEge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbU1vZGVsVXNlckRhdGEge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtTW9kZWxVc2VyRGF0YSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhKCk7XG5cbiAgICByZXQucGFyc2VVc2VyRGF0YShidWZmZXIsIHNpemUpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsVXNlckRhdGEg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsVXNlckRhdGEgIT0gbnVsbCkge1xuICAgICAgbW9kZWxVc2VyRGF0YS5yZWxlYXNlKCk7XG4gICAgICBtb2RlbFVzZXJEYXRhID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXJ0TWVzaOOBruODpuODvOOCtuODvOODh+ODvOOCv+OBruODquOCueODiOOBruWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+ODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldEFydE1lc2hVc2VyRGF0YXMoKTogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGU7XG4gIH1cblxuICAvKipcbiAgICogdXNlcmRhdGEzLmpzb27jga7jg5Hjg7zjgrlcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIHBhcnNlVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IGpzb246IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uKFxuICAgICAgYnVmZmVyLFxuICAgICAgc2l6ZVxuICAgICk7XG5cbiAgICBjb25zdCB0eXBlT2ZBcnRNZXNoID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKEFydE1lc2gpO1xuICAgIGNvbnN0IG5vZGVDb3VudDogbnVtYmVyID0ganNvbi5nZXRVc2VyRGF0YUNvdW50KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBhZGROb2RlOiBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSgpO1xuXG4gICAgICBhZGROb2RlLnRhcmdldElkID0ganNvbi5nZXRVc2VyRGF0YUlkKGkpO1xuICAgICAgYWRkTm9kZS50YXJnZXRUeXBlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICBqc29uLmdldFVzZXJEYXRhVGFyZ2V0VHlwZShpKVxuICAgICAgKTtcbiAgICAgIGFkZE5vZGUudmFsdWUgPSBuZXcgY3NtU3RyaW5nKGpzb24uZ2V0VXNlckRhdGFWYWx1ZShpKSk7XG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnB1c2hCYWNrKGFkZE5vZGUpO1xuXG4gICAgICBpZiAoYWRkTm9kZS50YXJnZXRUeXBlID09IHR5cGVPZkFydE1lc2gpIHtcbiAgICAgICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZS5wdXNoQmFjayhhZGROb2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBqc29uLnJlbGVhc2UoKTtcbiAgICBqc29uID0gdm9pZCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xuICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJfjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdXNlckRhdGFOb2Rlcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF91c2VyRGF0YU5vZGVzOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJdcbiAgcHJpdmF0ZSBfYXJ0TWVzaFVzZXJEYXRhTm9kZTogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPjsgLy8g6Zay6Kan44Oq44K544OI44Gu5L+d5oyBXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGEnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGEgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGE7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsVXNlckRhdGEgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGE7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhTm9kZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbUpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcblxuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XG5jb25zdCBUb3RhbFVzZXJEYXRhU2l6ZSA9ICdUb3RhbFVzZXJEYXRhU2l6ZSc7XG5jb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG5jb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcbmNvbnN0IElkID0gJ0lkJztcbmNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcblxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YUNvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWw44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VG90YWxVc2VyRGF0YVNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsVXNlckRhdGFTaXplKVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OX44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+ODvOOCsuODg+ODiElE44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiElEXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFJZChpOiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7mloflrZfliJfjga7lj5blvpdcbiAgICpcbiAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFWYWx1ZShpOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtQnJlYXRoIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWJyZWF0aCc7XG5pbXBvcnQgeyBDdWJpc21FeWVCbGluayB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21leWVibGluayc7XG5pbXBvcnQgeyBDdWJpc21Qb3NlIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbXBvc2UnO1xuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDb25zdGFudCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbE1hdHJpeCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgnO1xuaW1wb3J0IHsgQ3ViaXNtVGFyZ2V0UG9pbnQgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXRhcmdldHBvaW50JztcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24sIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgfSBmcm9tICcuLi9tb3Rpb24vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21FeHByZXNzaW9uTW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25NYW5hZ2VyIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbW1vdGlvbm1hbmFnZXInO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQgeyBDdWJpc21QaHlzaWNzIH0gZnJvbSAnLi4vcGh5c2ljcy9jdWJpc21waHlzaWNzJztcbmltcG9ydCB7IEN1YmlzbVJlbmRlcmVyX1dlYkdMIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyX3dlYmdsJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW9jIH0gZnJvbSAnLi9jdWJpc21tb2MnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsVXNlckRhdGEgfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGEnO1xuXG4vKipcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq1xuICpcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWfuuW6leOCr+ODqeOCueOAguOBk+OCjOOCkue2meaJv+OBl+OBpuODpuODvOOCtuODvOOBjOWun+ijheOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVXNlck1vZGVsIHtcbiAgLyoqXG4gICAqIOWIneacn+WMlueKtuaFi+OBruWPluW+l1xuICAgKlxuICAgKiDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgovnirbmhYvjgYvvvJ9cbiAgICpcbiAgICogQHJldHVybiB0cnVlICAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbml0aWFsaXplZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcbiAgICpcbiAgICog5Yid5pyf5YyW54q25oWL44KS6Kit5a6a44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2IOWIneacn+WMlueKtuaFi1xuICAgKi9cbiAgcHVibGljIHNldEluaXRpYWxpemVkKHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHY7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw54q25oWL44Gu5Y+W5b6XXG4gICAqXG4gICAqIOabtOaWsOOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUgICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuIGZhbHNlICAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzVXBkYXRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0aW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOeKtuaFi+OBruioreWumlxuICAgKlxuICAgKiDmm7TmlrDnirbmhYvjgpLoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHYg5pu05paw54q25oWLXG4gICAqL1xuICBwdWJsaWMgc2V0VXBkYXRpbmcodjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX3VwZGF0aW5nID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg57jgqbjgrnjg4njg6njg4PjgrDmg4XloLHjga7oqK3lrppcbiAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrljkvY3nva5cbiAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXREcmFnZ2luZyh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnNldCh4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliqDpgJ/luqbjga7mg4XloLHjgpLoqK3lrprjgZnjgotcbiAgICogQHBhcmFtIHggWOi7uOaWueWQkeOBruWKoOmAn+W6plxuICAgKiBAcGFyYW0geSBZ6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAqIEBwYXJhbSB6IFrou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICovXG4gIHB1YmxpYyBzZXRBY2NlbGVyYXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSB4O1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblkgPSB5O1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSB6O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+ihjOWIl+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODh+ODq+ihjOWIl1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTWF0cml4KCk6IEN1YmlzbU1vZGVsTWF0cml4IHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWxNYXRyaXg7XG4gIH1cblxuICAvKipcbiAgICog5LiN6YCP5piO5bqm44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBhIOS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIHNldE9wYWNpdHkoYTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fb3BhY2l0eSA9IGE7XG4gIH1cblxuICAvKipcbiAgICog5LiN6YCP5piO5bqm44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0T3BhY2l0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9vcGFjaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+ODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIG1vYzPjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICovXG4gIHB1YmxpYyBsb2FkTW9kZWwoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xuICAgIHRoaXMuX21vYyA9IEN1YmlzbU1vYy5jcmVhdGUoYnVmZmVyKTtcbiAgICB0aGlzLl9tb2RlbCA9IHRoaXMuX21vYy5jcmVhdGVNb2RlbCgpO1xuICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG5cbiAgICBpZiAodGhpcy5fbW9jID09IG51bGwgfHwgdGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ0ZhaWxlZCB0byBDcmVhdGVNb2RlbCgpLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbmV3IEN1YmlzbU1vZGVsTWF0cml4KFxuICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzV2lkdGgoKSxcbiAgICAgIHRoaXMuX21vZGVsLmdldENhbnZhc0hlaWdodCgpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBuYW1lIOODouODvOOCt+ODp+ODs+OBruWQjeWJjVxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kv44Op44K5XG4gICAqL1xuICBwdWJsaWMgbG9hZE1vdGlvbiA9IChcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICkgPT4gQ3ViaXNtTW90aW9uLmNyZWF0ZShidWZmZXIsIHNpemUsIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcblxuICAvKipcbiAgICog6KGo5oOF44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcGFyYW0gbmFtZSDooajmg4Xjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBsb2FkRXhwcmVzc2lvbihcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmdcbiAgKTogQUN1YmlzbU1vdGlvbiB7XG4gICAgcmV0dXJuIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44Od44O844K644OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgcG9zZTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkUG9zZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9wb3NlID0gQ3ViaXNtUG9zZS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgavku5jlsZ7jgZnjgovjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICogQHBhcmFtIGJ1ZmZlciB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWxVc2VyRGF0YSA9IEN1YmlzbU1vZGVsVXNlckRhdGEuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgbG9hZFBoeXNpY3MoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcGh5c2ljcyA9IEN1YmlzbVBoeXNpY3MuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUlkIOaknOiovOOBl+OBn+OBhERyYXdhYmxl44GuSURcbiAgICogQHBhcmFtIHBvaW50WCBY5L2N572uXG4gICAqIEBwYXJhbSBwb2ludFkgWeS9jee9rlxuICAgKiBAcmV0dXJuIHRydWUg44OS44OD44OI44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44OS44OD44OI44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNIaXQoXG4gICAgZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgcG9pbnRYOiBudW1iZXIsXG4gICAgcG9pbnRZOiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHJhd0luZGV4OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQpO1xuXG4gICAgaWYgKGRyYXdJbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8g5a2Y5Zyo44GX44Gq44GE5aC05ZCI44GvZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3SW5kZXgpO1xuICAgIGNvbnN0IHZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdJbmRleCk7XG5cbiAgICBsZXQgbGVmdDogbnVtYmVyID0gdmVydGljZXNbMF07XG4gICAgbGV0IHJpZ2h0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICBsZXQgdG9wOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcbiAgICBsZXQgYm90dG9tOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcblxuICAgIGZvciAobGV0IGogPSAxOyBqIDwgY291bnQ7ICsraikge1xuICAgICAgY29uc3QgeCA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwXTtcbiAgICAgIGNvbnN0IHkgPSB2ZXJ0aWNlc1tDb25zdGFudC52ZXJ0ZXhPZmZzZXQgKyBqICogQ29uc3RhbnQudmVydGV4U3RlcCArIDFdO1xuXG4gICAgICBpZiAoeCA8IGxlZnQpIHtcbiAgICAgICAgbGVmdCA9IHg7IC8vIE1pbiB4XG4gICAgICB9XG5cbiAgICAgIGlmICh4ID4gcmlnaHQpIHtcbiAgICAgICAgcmlnaHQgPSB4OyAvLyBNYXggeFxuICAgICAgfVxuXG4gICAgICBpZiAoeSA8IHRvcCkge1xuICAgICAgICB0b3AgPSB5OyAvLyBNaW4geVxuICAgICAgfVxuXG4gICAgICBpZiAoeSA+IGJvdHRvbSkge1xuICAgICAgICBib3R0b20gPSB5OyAvLyBNYXggeVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHR4OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHBvaW50WCk7XG4gICAgY29uc3QgdHk6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVkocG9pbnRZKTtcblxuICAgIHJldHVybiBsZWZ0IDw9IHR4ICYmIHR4IDw9IHJpZ2h0ICYmIHRvcCA8PSB0eSAmJiB0eSA8PSBib3R0b207XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7lj5blvpdcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6lcbiAgICovXG4gIHB1YmxpYyBnZXRSZW5kZXJlcigpOiBDdWJpc21SZW5kZXJlcl9XZWJHTCB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOCkuS9nOaIkOOBl+OBpuWIneacn+WMluOCkuWun+ihjOOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNyZWF0ZVJlbmRlcmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9yZW5kZXJlcikge1xuICAgICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVyID0gbmV3IEN1YmlzbVJlbmRlcmVyX1dlYkdMKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu6Kej5pS+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI55m654Gr5pmC44Gu5qiZ5rqW5Yem55CGXG4gICAqXG4gICAqIEV2ZW5044GM5YaN55Sf5Yem55CG5pmC44Gr44GC44Gj44Gf5aC05ZCI44Gu5Yem55CG44KS44GZ44KL44CCXG4gICAqIOe2meaJv+OBp+S4iuabuOOBjeOBmeOCi+OBk+OBqOOCkuaDs+WumuOBl+OBpuOBhOOCi+OAglxuICAgKiDkuIrmm7jjgY3jgZfjgarjgYTloLTlkIjjga/jg63jgrDlh7rlipvjgpLjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50VmFsdWUg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gICAqL1xuICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcbiAgICBDdWJpc21Mb2dJbmZvKCd7MH0nLCBldmVudFZhbHVlLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOeUqOOBruOCs+ODvOODq+ODkOODg+OCr1xuICAgKlxuICAgKiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgavjgqTjg5njg7Pjg4jnlKjjgavnmbvpjLLjgZnjgovjgZ/jgoHjga5DYWxsYmFja+OAglxuICAgKiBDdWJpc21Vc2VyTW9kZWzjga7ntpnmib/lhYjjga5FdmVudEZpcmVk44KS5ZG844G244CCXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsZXIg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44KS566h55CG44GX44Gm44GE44Gf44Oi44O844K344On44Oz44Oe44ON44O844K444Oj44O844CB5q+U6LyD55SoXG4gICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICAgKiBAcGFyYW0gY3VzdG9tRGF0YSBDdWJpc21Vc2VyTW9kZWzjgpLntpnmib/jgZfjgZ/jgqTjg7Pjgrnjgr/jg7PjgrnjgpLmg7PlrppcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soXG4gICAgY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG4gICAgZXZlbnRWYWx1ZTogY3NtU3RyaW5nLFxuICAgIGN1c3RvbURhdGE6IEN1YmlzbVVzZXJNb2RlbFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBtb2RlbDogQ3ViaXNtVXNlck1vZGVsID0gY3VzdG9tRGF0YTtcblxuICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XG4gICAgICBtb2RlbC5tb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyDlkITlpInmlbDliJ3mnJ/ljJZcbiAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XG4gICAgdGhpcy5fZXllQmxpbmsgPSBudWxsO1xuICAgIHRoaXMuX2JyZWF0aCA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxNYXRyaXggPSBudWxsO1xuICAgIHRoaXMuX3Bvc2UgPSBudWxsO1xuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9waHlzaWNzID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gbnVsbDtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcbiAgICB0aGlzLl9saXBzeW5jID0gdHJ1ZTtcbiAgICB0aGlzLl9sYXN0TGlwU3luY1ZhbHVlID0gMC4wO1xuICAgIHRoaXMuX2RyYWdYID0gMC4wO1xuICAgIHRoaXMuX2RyYWdZID0gMC4wO1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSAwLjA7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IDAuMDtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gMC4wO1xuICAgIHRoaXMuX2RlYnVnTW9kZSA9IGZhbHNlO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcblxuICAgIC8vIOODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0RXZlbnRDYWxsYmFjayhcbiAgICAgIEN1YmlzbVVzZXJNb2RlbC5jdWJpc21EZWZhdWx0TW90aW9uRXZlbnRDYWxsYmFjayxcbiAgICAgIHRoaXNcbiAgICApO1xuXG4gICAgLy8g6KGo5oOF44Oe44ON44O844K444Oj44O844KS5L2c5oiQXG4gICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL44Ki44OL44Oh44O844K344On44OzXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBuZXcgQ3ViaXNtVGFyZ2V0UG9pbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/jgavnm7jlvZPjgZnjgovlh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCkge1xuICAgIGlmICh0aGlzLl9tb3Rpb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbW9jICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vYy5kZWxldGVNb2RlbCh0aGlzLl9tb2RlbCk7XG4gICAgICB0aGlzLl9tb2MucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XG5cbiAgICBDdWJpc21Qb3NlLmRlbGV0ZSh0aGlzLl9wb3NlKTtcbiAgICBDdWJpc21FeWVCbGluay5kZWxldGUodGhpcy5fZXllQmxpbmspO1xuICAgIEN1YmlzbUJyZWF0aC5kZWxldGUodGhpcy5fYnJlYXRoKTtcblxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcblxuICAgIEN1YmlzbVBoeXNpY3MuZGVsZXRlKHRoaXMuX3BoeXNpY3MpO1xuICAgIEN1YmlzbU1vZGVsVXNlckRhdGEuZGVsZXRlKHRoaXMuX21vZGVsVXNlckRhdGEpO1xuXG4gICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9tb2M6IEN1YmlzbU1vYzsgLy8gTW9j44OH44O844K/XG4gIHByb3RlY3RlZCBfbW9kZWw6IEN1YmlzbU1vZGVsOyAvLyBNb2RlbOOCpOODs+OCueOCv+ODs+OCuVxuXG4gIHByb3RlY3RlZCBfbW90aW9uTWFuYWdlcjogQ3ViaXNtTW90aW9uTWFuYWdlcjsgLy8g44Oi44O844K344On44Oz566h55CGXG4gIHByb3RlY3RlZCBfZXhwcmVzc2lvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOihqOaDheeuoeeQhlxuICBwcm90ZWN0ZWQgX2V5ZUJsaW5rOiBDdWJpc21FeWVCbGluazsgLy8g6Ieq5YuV44G+44Gw44Gf44GNXG4gIHByb3RlY3RlZCBfYnJlYXRoOiBDdWJpc21CcmVhdGg7IC8vIOWRvOWQuFxuICBwcm90ZWN0ZWQgX21vZGVsTWF0cml4OiBDdWJpc21Nb2RlbE1hdHJpeDsgLy8g44Oi44OH44Or6KGM5YiXXG4gIHByb3RlY3RlZCBfcG9zZTogQ3ViaXNtUG9zZTsgLy8g44Od44O844K6566h55CGXG4gIHByb3RlY3RlZCBfZHJhZ01hbmFnZXI6IEN1YmlzbVRhcmdldFBvaW50OyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrBcbiAgcHJvdGVjdGVkIF9waHlzaWNzOiBDdWJpc21QaHlzaWNzOyAvLyDniannkIbmvJTnrpdcbiAgcHJvdGVjdGVkIF9tb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cblxuICBwcm90ZWN0ZWQgX2luaXRpYWxpemVkOiBib29sZWFuOyAvLyDliJ3mnJ/ljJbjgZXjgozjgZ/jgYvjganjgYbjgYtcbiAgcHJvdGVjdGVkIF91cGRhdGluZzogYm9vbGVhbjsgLy8g5pu05paw44GV44KM44Gf44GL44Gp44GG44GLXG4gIHByb3RlY3RlZCBfb3BhY2l0eTogbnVtYmVyOyAvLyDkuI3pgI/mmI7luqZcbiAgcHJvdGVjdGVkIF9saXBzeW5jOiBib29sZWFuOyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgZnjgovjgYvjganjgYbjgYtcbiAgcHJvdGVjdGVkIF9sYXN0TGlwU3luY1ZhbHVlOiBudW1iZXI7IC8vIOacgOW+jOOBruODquODg+ODl+OCt+ODs+OCr+OBruWItuW+oeWcsFxuICBwcm90ZWN0ZWQgX2RyYWdYOiBudW1iZXI7IC8vIOODnuOCpuOCueODieODqeODg+OCsOOBrljkvY3nva5cbiAgcHJvdGVjdGVkIF9kcmFnWTogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Z5L2N572uXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWDogbnVtYmVyOyAvLyBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWTogbnVtYmVyOyAvLyBZ6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWjogbnVtYmVyOyAvLyBa6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfZGVidWdNb2RlOiBib29sZWFuOyAvLyDjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgYvjganjgYbjgYtcblxuICBwcml2YXRlIF9yZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0w7IC8vIOODrOODs+ODgOODqVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc211c2VybW9kZWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVVzZXJNb2RlbCA9ICQuQ3ViaXNtVXNlck1vZGVsO1xuICBleHBvcnQgdHlwZSBDdWJpc21Vc2VyTW9kZWwgPSAkLkN1YmlzbVVzZXJNb2RlbDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5cbi8qKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDlrprnvqkgKi9cbmV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAoc2VsZjogQUN1YmlzbU1vdGlvbikgPT4gdm9pZDtcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrlcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrnjgIJNb3Rpb25RdWV1ZU1hbmFnZXLjgavjgojjgaPjgabjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLnrqHnkIbjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFDdWJpc21Nb3Rpb24ge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb3Rpb246IEFDdWJpc21Nb3Rpb24pOiB2b2lkIHtcbiAgICBtb3Rpb24ucmVsZWFzZSgpO1xuICAgIG1vdGlvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX3dlaWdodCA9IDEuMDtcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzID0gbmV3IGNzbVZlY3Rvcjxjc21TdHJpbmc+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl93ZWlnaHQgPSAwLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/XG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5LFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc0F2YWlsYWJsZSgpIHx8IG1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzU3RhcnRlZCgpKSB7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX29mZnNldFNlY29uZHMpOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjgpLoqJjpjLJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1xuXG4gICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwKSB7XG4gICAgICAgIC8vIOmWi+Wni+OBl+OBpuOBhOOBquOBhOOBhuOBoeOBq+e1guS6huioreWumuOBl+OBpuOBhOOCi+WgtOWQiOOBjOOBguOCi+OAglxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEVuZFRpbWUoXG4gICAgICAgICAgZHVyYXRpb24gPD0gMCA/IC0xIDogbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKSArIGR1cmF0aW9uXG4gICAgICAgICk7XG4gICAgICAgIC8vIGR1cmF0aW9uID09IC0xIOOBruWgtOWQiOOBr+ODq+ODvOODl+OBmeOCi1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxuXG4gICAgLy8tLS0tIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOOBruWHpueQhiAtLS0tXG4gICAgLy8g5Y2Y57SU44Gq44K144Kk44Oz6Zai5pWw44Gn44Kk44O844K444Oz44Kw44GZ44KLXG4gICAgY29uc3QgZmFkZUluOiBudW1iZXIgPVxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9PSAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgKTtcblxuICAgIGNvbnN0IGZhZGVPdXQ6IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgZmFkZVdlaWdodCA9IGZhZGVXZWlnaHQgKiBmYWRlSW4gKiBmYWRlT3V0O1xuXG4gICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xuXG4gICAgQ1NNX0FTU0VSVCgwLjAgPD0gZmFkZVdlaWdodCAmJiBmYWRlV2VpZ2h0IDw9IDEuMCk7XG5cbiAgICAvLy0tLS0g5YWo44Gm44Gu44OR44Op44Oh44O844K/SUTjgpLjg6vjg7zjg5fjgZnjgosgLS0tLVxuICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHMsXG4gICAgICBmYWRlV2VpZ2h0LFxuICAgICAgbW90aW9uUXVldWVFbnRyeVxuICAgICk7XG5cbiAgICAvLyDlvozlh6bnkIZcbiAgICAvLyDntYLkuobmmYLliLvjgpLpgY7jgY7jgZ/jgonntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgosoQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyKVxuICAgIGlmIChcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpID4gMCAmJlxuICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCB1c2VyVGltZVNlY29uZHNcbiAgICApIHtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTsgLy8g57WC5LqGXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZmFkZUluU2Vjb25kcyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVJblRpbWUoZmFkZUluU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IGZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVPdXRUaW1lKGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlSW5UaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgc2V0V2VpZ2h0KHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOmHjeOBv++8iDAuMCAtIDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93ZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICpcbiAgICogQG5vdGUg44Or44O844OX44Gu5pmC44Gv44CMLTHjgI3jgIJcbiAgICogICAgICAg44Or44O844OX44Gn44Gq44GE5aC05ZCI44Gv44CB44Kq44O844OQ44O844Op44Kk44OJ44GZ44KL44CCXG4gICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxuICAgKiAgICAgICDjgIwtMeOAjeOBruaZguOBr+WklumDqOOBi+OCieWBnOatouWRveS7pOOBjOOBquOBhOmZkOOCiue1guOCj+OCieOBquOBhOWHpueQhuOBqOOBquOCi+OAglxuICAgKi9cbiAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OXMeWbnuWIhuOBrumVt+OBleOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBlVvnp5JdXG4gICAqXG4gICAqIEBub3RlIOODq+ODvOODl+OBl+OBquOBhOWgtOWQiOOBr+OAgWdldER1cmF0aW9uKCnjgajlkIzjgZjlgKTjgpLov5TjgZlcbiAgICogICAgICAg44Or44O844OX5LiA5Zue5YiG44Gu6ZW344GV44GM5a6a576p44Gn44GN44Gq44GE5aC05ZCIKOODl+ODreOCsOODqeODoOeahOOBq+WLleOBjee2muOBkeOCi+OCteODluOCr+ODqeOCueOBquOBqSnjga7loLTlkIjjga/jgIwtMeOAjeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiAtMS4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gb2Zmc2V0U2Vjb25kcyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIHNldE9mZnNldFRpbWUob2Zmc2V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IG9mZnNldFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAqXG4gICAqIOOCpOODmeODs+ODiOeZuueBq+OBruODgeOCp+ODg+OCr+OAglxuICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGJlZm9yZUNoZWNrVGltZVNlY29uZHMg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmlyZWRFdmVudChcbiAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxuICApOiBjc21WZWN0b3I8Y3NtU3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHJldHVybiB0cnVlIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxuICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgd2VpZ2h0OiBudW1iZXIsXG4gICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7nmbvpjLJcbiAgICpcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44KS55m76Yyy44GZ44KL44CCXG4gICAqIGlzRmluaXNoZWTjg5Xjg6njgrDjgpLoqK3lrprjgZnjgovjgr/jgqTjg5/jg7PjgrDjgaflkbzjgbPlh7rjgZXjgozjgovjgIJcbiAgICog5Lul5LiL44Gu54q25oWL44Gu6Zqb44Gr44Gv5ZG844Gz5Ye644GV44KM44Gq44GEOlxuICAgKiAgIDEuIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBjOOAjOODq+ODvOODl+OAjeOBqOOBl+OBpuioreWumuOBleOCjOOBpuOBhOOCi+OBqOOBjVxuICAgKiAgIDIuIOOCs+ODvOODq+ODkOODg+OCr+OBjOeZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaZglxuICAgKlxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqL1xuICBwdWJsaWMgc2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyID0gKFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyOiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICkgPT4gKHRoaXMuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OBruWPluW+l1xuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoKSA9PiB0aGlzLl9vbkZpbmlzaGVkTW90aW9uO1xuXG4gIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICBwdWJsaWMgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIHB1YmxpYyBfd2VpZ2h0OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cblxuICBwdWJsaWMgX2ZpcmVkRXZlbnRWYWx1ZXM6IGNzbVZlY3Rvcjxjc21TdHJpbmc+O1xuXG4gIC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICBwdWJsaWMgX29uRmluaXNoZWRNb3Rpb24/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBBQ3ViaXNtTW90aW9uID0gJC5BQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBBQ3ViaXNtTW90aW9uID0gJC5BQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gJC5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcblxuLy8gZXhwMy5qc29u44Gu44Kt44O844Go44OH44OV44Kp44Or44OIXG5jb25zdCBFeHByZXNzaW9uS2V5RmFkZUluID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgRXhwcmVzc2lvbktleUZhZGVPdXQgPSAnRmFkZU91dFRpbWUnO1xuY29uc3QgRXhwcmVzc2lvbktleVBhcmFtZXRlcnMgPSAnUGFyYW1ldGVycyc7XG5jb25zdCBFeHByZXNzaW9uS2V5SWQgPSAnSWQnO1xuY29uc3QgRXhwcmVzc2lvbktleVZhbHVlID0gJ1ZhbHVlJztcbmNvbnN0IEV4cHJlc3Npb25LZXlCbGVuZCA9ICdCbGVuZCc7XG5jb25zdCBCbGVuZFZhbHVlQWRkID0gJ0FkZCc7XG5jb25zdCBCbGVuZFZhbHVlTXVsdGlwbHkgPSAnTXVsdGlwbHknO1xuY29uc3QgQmxlbmRWYWx1ZU92ZXJ3cml0ZSA9ICdPdmVyd3JpdGUnO1xuY29uc3QgRGVmYXVsdEZhZGVUaW1lID0gMS4wO1xuXG4vKipcbiAqIOihqOaDheOBruODouODvOOCt+ODp+ODs1xuICpcbiAqIOihqOaDheOBruODouODvOOCt+ODp+ODs+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb24ge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXG4gICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICBzaXplOiBudW1iZXJcbiAgKTogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiB7XG4gICAgY29uc3QgZXhwcmVzc2lvbjogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9IG5ldyBDdWJpc21FeHByZXNzaW9uTW90aW9uKCk7XG5cbiAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xuXG4gICAgZXhwcmVzc2lvbi5zZXRGYWRlSW5UaW1lKFxuICAgICAgcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlGYWRlSW4pLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICk7IC8vIOODleOCp+ODvOODieOCpOODs1xuICAgIGV4cHJlc3Npb24uc2V0RmFkZU91dFRpbWUoXG4gICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVPdXQpLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICk7IC8vIOODleOCp+ODvOODieOCouOCpuODiFxuXG4gICAgLy8g5ZCE44OR44Op44Oh44O844K/44Gr44Gk44GE44GmXG4gICAgY29uc3QgcGFyYW1ldGVyQ291bnQgPSByb290XG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5UGFyYW1ldGVycylcbiAgICAgIC5nZXRTaXplKCk7XG4gICAgZXhwcmVzc2lvbi5fcGFyYW1ldGVycy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJhbTogVmFsdWUgPSByb290XG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7IC8vIOODkeODqeODoeODvOOCv0lEXG5cbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBwYXJhbVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5VmFsdWUpXG4gICAgICAgIC50b0Zsb2F0KCk7IC8vIOWApFxuXG4gICAgICAvLyDoqIjnrpfmlrnms5Xjga7oqK3lrppcbiAgICAgIGxldCBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmlzTnVsbCgpIHx8XG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PSBCbGVuZFZhbHVlQWRkXG4gICAgICApIHtcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICBCbGVuZFZhbHVlTXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuZ2V0U3RyaW5nKCkgPT1cbiAgICAgICAgQmxlbmRWYWx1ZU92ZXJ3cml0ZVxuICAgICAgKSB7XG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjgZ3jga7ku5Yg5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv5Yqg566X44Oi44O844OJ44Gr44GZ44KL44GT44Go44Gn5b6p5penXG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ7XG4gICAgICB9XG5cbiAgICAgIC8vIOioreWumuOCquODluOCuOOCp+OCr+ODiOOCkuS9nOaIkOOBl+OBpuODquOCueODiOOBq+i/veWKoOOBmeOCi1xuICAgICAgY29uc3QgaXRlbTogRXhwcmVzc2lvblBhcmFtZXRlciA9IG5ldyBFeHByZXNzaW9uUGFyYW1ldGVyKCk7XG5cbiAgICAgIGl0ZW0ucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZDtcbiAgICAgIGl0ZW0uYmxlbmRUeXBlID0gYmxlbmRUeXBlO1xuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnB1c2hCYWNrKGl0ZW0pO1xuICAgIH1cblxuICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pOyAvLyBKU09O44OH44O844K/44Gv5LiN6KaB44Gr44Gq44Gj44Gf44KJ5YmK6Zmk44GZ44KLXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIHdlaWdodDogbnVtYmVyLFxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXI6IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSB0aGlzLl9wYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICBzd2l0Y2ggKHBhcmFtZXRlci5ibGVuZFR5cGUpIHtcbiAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkOiB7XG4gICAgICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseToge1xuICAgICAgICAgIG1vZGVsLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU6IHtcbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8g5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv44GZ44Gn44Gr5Yqg566X44Oi44O844OJ44Gr44Gq44Gj44Gm44GE44KLXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+KCk7XG4gIH1cblxuICBfcGFyYW1ldGVyczogY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+OyAvLyDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLHjg6rjgrnjg4hcbn1cblxuLyoqXG4gKiDooajmg4Xjg5Hjg6njg6Hjg7zjgr/lgKTjga7oqIjnrpfmlrnlvI9cbiAqL1xuZXhwb3J0IGVudW0gRXhwcmVzc2lvbkJsZW5kVHlwZSB7XG4gIEV4cHJlc3Npb25CbGVuZFR5cGVfQWRkID0gMCwgLy8g5Yqg566XXG4gIEV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHkgPSAxLCAvLyDkuZfnrpdcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGUgPSAyIC8vIOS4iuabuOOBjVxufVxuXG4vKipcbiAqIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblBhcmFtZXRlciB7XG4gIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SURcbiAgYmxlbmRUeXBlOiBFeHByZXNzaW9uQmxlbmRUeXBlOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mvJTnrpfnqK7poZ5cbiAgdmFsdWU6IG51bWJlcjsgLy8g5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCBjb25zdCBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgdHlwZSBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgY29uc3QgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQge1xuICBDU01fQVNTRVJULFxuICBDdWJpc21Mb2dEZWJ1ZyxcbiAgQ3ViaXNtTG9nV2FybmluZ1xufSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uLCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7XG4gIEN1YmlzbU1vdGlvbkN1cnZlLFxuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCxcbiAgQ3ViaXNtTW90aW9uRGF0YSxcbiAgQ3ViaXNtTW90aW9uRXZlbnQsXG4gIEN1YmlzbU1vdGlvblBvaW50LFxuICBDdWJpc21Nb3Rpb25TZWdtZW50LFxuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZVxufSBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbkpzb24sIEV2YWx1YXRpb25PcHRpb25GbGFnIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25qc29uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuXG5jb25zdCBFZmZlY3ROYW1lRXllQmxpbmsgPSAnRXllQmxpbmsnO1xuY29uc3QgRWZmZWN0TmFtZUxpcFN5bmMgPSAnTGlwU3luYyc7XG5jb25zdCBUYXJnZXROYW1lTW9kZWwgPSAnTW9kZWwnO1xuY29uc3QgVGFyZ2V0TmFtZVBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xuY29uc3QgVGFyZ2V0TmFtZVBhcnRPcGFjaXR5ID0gJ1BhcnRPcGFjaXR5JztcblxuLyoqXG4gKiBDdWJpc20gU0RLIFIyIOS7peWJjeOBruODouODvOOCt+ODp+ODs+OCkuWGjeePvuOBleOBm+OCi+OBquOCiSB0cnVlIOOAgeOCouODi+ODoeODvOOCv+OBruODouODvOOCt+ODp+ODs+OCkuato+OBl+OBj+WGjeePvuOBmeOCi+OBquOCiSBmYWxzZSDjgIJcbiAqL1xuY29uc3QgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGxlcnBQb2ludHMoXG4gIGE6IEN1YmlzbU1vdGlvblBvaW50LFxuICBiOiBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgdDogbnVtYmVyXG4pOiBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gIGNvbnN0IHJlc3VsdDogQ3ViaXNtTW90aW9uUG9pbnQgPSBuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKTtcblxuICByZXN1bHQudGltZSA9IGEudGltZSArIChiLnRpbWUgLSBhLnRpbWUpICogdDtcbiAgcmVzdWx0LnZhbHVlID0gYS52YWx1ZSArIChiLnZhbHVlIC0gYS52YWx1ZSkgKiB0O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIHJldHVybiBwb2ludHNbMF0udmFsdWUgKyAocG9pbnRzWzFdLnZhbHVlIC0gcG9pbnRzWzBdLnZhbHVlKSAqIHQ7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1szXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVCaW5hcnlTZWFyY2goXG4gIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcbiAgdGltZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICBjb25zdCB4X2Vycm9yID0gMC4wMTtcblxuICBjb25zdCB4OiBudW1iZXIgPSB0aW1lO1xuICBsZXQgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBsZXQgeDI6IG51bWJlciA9IHBvaW50c1szXS50aW1lO1xuICBsZXQgY3gxOiBudW1iZXIgPSBwb2ludHNbMV0udGltZTtcbiAgbGV0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgbGV0IHRhID0gMC4wO1xuICBsZXQgdGIgPSAxLjA7XG4gIGxldCB0ID0gMC4wO1xuICBsZXQgaSA9IDA7XG5cbiAgZm9yIChsZXQgdmFyMzMgPSB0cnVlOyBpIDwgMjA7ICsraSkge1xuICAgIGlmICh4IDwgeDEgKyB4X2Vycm9yKSB7XG4gICAgICB0ID0gdGE7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoeDIgLSB4X2Vycm9yIDwgeCkge1xuICAgICAgdCA9IHRiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGNlbnRlcng6IG51bWJlciA9IChjeDEgKyBjeDIpICogMC41O1xuICAgIGN4MSA9ICh4MSArIGN4MSkgKiAwLjU7XG4gICAgY3gyID0gKHgyICsgY3gyKSAqIDAuNTtcbiAgICBjb25zdCBjdHJseDEyOiBudW1iZXIgPSAoY3gxICsgY2VudGVyeCkgKiAwLjU7XG4gICAgY29uc3QgY3RybHgyMTogbnVtYmVyID0gKGN4MiArIGNlbnRlcngpICogMC41O1xuICAgIGNlbnRlcnggPSAoY3RybHgxMiArIGN0cmx4MjEpICogMC41O1xuICAgIGlmICh4IDwgY2VudGVyeCkge1xuICAgICAgdGIgPSAodGEgKyB0YikgKiAwLjU7XG4gICAgICBpZiAoY2VudGVyeCAtIHhfZXJyb3IgPCB4KSB7XG4gICAgICAgIHQgPSB0YjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHgyID0gY2VudGVyeDtcbiAgICAgIGN4MiA9IGN0cmx4MTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhID0gKHRhICsgdGIpICogMC41O1xuICAgICAgaWYgKHggPCBjZW50ZXJ4ICsgeF9lcnJvcikge1xuICAgICAgICB0ID0gdGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB4MSA9IGNlbnRlcng7XG4gICAgICBjeDEgPSBjdHJseDIxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpID09IDIwKSB7XG4gICAgdCA9ICh0YSArIHRiKSAqIDAuNTtcbiAgfVxuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuICBpZiAodCA+IDEuMCkge1xuICAgIHQgPSAxLjA7XG4gIH1cblxuICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XG4gIGNvbnN0IHAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCB0KTtcbiAgY29uc3QgcDIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzJdLCBwb2ludHNbM10sIHQpO1xuXG4gIGNvbnN0IHAwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMDEsIHAxMiwgdCk7XG4gIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XG5cbiAgcmV0dXJuIGxlcnBQb2ludHMocDAxMiwgcDEyMywgdCkudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlQ2FyZGFub0ludGVycHJldGF0aW9uKFxuICBwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgY29uc3QgeDogbnVtYmVyID0gdGltZTtcbiAgY29uc3QgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBjb25zdCB4MjogbnVtYmVyID0gcG9pbnRzWzNdLnRpbWU7XG4gIGNvbnN0IGN4MTogbnVtYmVyID0gcG9pbnRzWzFdLnRpbWU7XG4gIGNvbnN0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgY29uc3QgYTogbnVtYmVyID0geDIgLSAzLjAgKiBjeDIgKyAzLjAgKiBjeDEgLSB4MTtcbiAgY29uc3QgYjogbnVtYmVyID0gMy4wICogY3gyIC0gNi4wICogY3gxICsgMy4wICogeDE7XG4gIGNvbnN0IGM6IG51bWJlciA9IDMuMCAqIGN4MSAtIDMuMCAqIHgxO1xuICBjb25zdCBkOiBudW1iZXIgPSB4MSAtIHg7XG5cbiAgY29uc3QgdDogbnVtYmVyID0gQ3ViaXNtTWF0aC5jYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyKGEsIGIsIGMsIGQpO1xuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3RlcHBlZEV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBvaW50c1swXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZShcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxuICB0aW1lOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBwb2ludHNbMV0udmFsdWU7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlQ3VydmUoXG4gIG1vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGEsXG4gIGluZGV4OiBudW1iZXIsXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgLy8gRmluZCBzZWdtZW50IHRvIGV2YWx1YXRlLlxuICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSBtb3Rpb25EYXRhLmN1cnZlcy5hdChpbmRleCk7XG5cbiAgbGV0IHRhcmdldCA9IC0xO1xuICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcbiAgbGV0IHBvaW50UG9zaXRpb24gPSAwO1xuICBmb3IgKGxldCBpOiBudW1iZXIgPSBjdXJ2ZS5iYXNlU2VnbWVudEluZGV4OyBpIDwgdG90YWxTZWdtZW50Q291bnQ7ICsraSkge1xuICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXG4gICAgcG9pbnRQb3NpdGlvbiA9XG4gICAgICBtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLmJhc2VQb2ludEluZGV4ICtcbiAgICAgIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09XG4gICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXJcbiAgICAgICAgPyAzXG4gICAgICAgIDogMSk7XG5cbiAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cbiAgICBpZiAobW90aW9uRGF0YS5wb2ludHMuYXQocG9pbnRQb3NpdGlvbikudGltZSA+IHRpbWUpIHtcbiAgICAgIHRhcmdldCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodGFyZ2V0ID09IC0xKSB7XG4gICAgcmV0dXJuIG1vdGlvbkRhdGEucG9pbnRzLmF0KHBvaW50UG9zaXRpb24pLnZhbHVlO1xuICB9XG5cbiAgY29uc3Qgc2VnbWVudDogQ3ViaXNtTW90aW9uU2VnbWVudCA9IG1vdGlvbkRhdGEuc2VnbWVudHMuYXQodGFyZ2V0KTtcblxuICByZXR1cm4gc2VnbWVudC5ldmFsdWF0ZShtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksIHRpbWUpO1xufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OCr+ODqeOCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICApOiBDdWJpc21Nb3Rpb24ge1xuICAgIGNvbnN0IHJldCA9IG5ldyBDdWJpc21Nb3Rpb24oKTtcblxuICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgIHJldC5fc291cmNlRnJhbWVSYXRlID0gcmV0Ll9tb3Rpb25EYXRhLmZwcztcbiAgICByZXQuX2xvb3BEdXJhdGlvblNlY29uZHMgPSByZXQuX21vdGlvbkRhdGEuZHVyYXRpb247XG4gICAgcmV0Ll9vbkZpbmlzaGVkTW90aW9uID0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI7XG5cbiAgICAvLyBOT1RFOiBFZGl0b3Ljgafjga/jg6vjg7zjg5fjgYLjgorjga7jg6Ljg7zjgrfjg6fjg7Pmm7jjgY3lh7rjgZfjga/pnZ7lr77lv5xcbiAgICAvLyByZXQtPl9sb29wID0gKHJldC0+X21vdGlvbkRhdGEtPkxvb3AgPiAwKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxuICAgKiBAcGFyYW0gbW9kZWwgICAgICAgICAgICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMgICDnj77lnKjjga7mmYLliLtb56eSXVxuICAgKiBAcGFyYW0gZmFkZVdlaWdodCAgICAgICAg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5ICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIGZhZGVXZWlnaHQ6IG51bWJlcixcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgRWZmZWN0TmFtZUV5ZUJsaW5rXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIEVmZmVjdE5hbWVMaXBTeW5jXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCB0aW1lT2Zmc2V0U2Vjb25kczogbnVtYmVyID1cbiAgICAgIHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKCk7XG5cbiAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPCAwLjApIHtcbiAgICAgIHRpbWVPZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDjgqjjg6njg7zlm57pgb9cbiAgICB9XG5cbiAgICBsZXQgbGlwU3luY1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGxldCBleWVCbGlua1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgLy/jgb7jgbDjgZ/jgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgYbjgaHjg6Ljg7zjgrfjg6fjg7Pjga7pgannlKjjgpLmpJzlh7rjgZnjgovjgZ/jgoHjga7jg5Pjg4Pjg4jvvIhtYXhGbGFnQ291bnTlgIvjgb7jgadcbiAgICBjb25zdCBNYXhUYXJnZXRTaXplID0gNjQ7XG4gICAgbGV0IGxpcFN5bmNGbGFncyA9IDA7XG4gICAgbGV0IGV5ZUJsaW5rRmxhZ3MgPSAwO1xuXG4gICAgLy/nnqzjgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgr/jg7zjgrLjg4Pjg4jmlbDjgYzkuIrpmZDjgpLotoXjgYjjgabjgYTjgovloLTlkIhcbiAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgQ3ViaXNtTG9nRGVidWcoXG4gICAgICAgICd0b28gbWFueSBleWUgYmxpbmsgdGFyZ2V0cyA6IHswfScsXG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgQ3ViaXNtTG9nRGVidWcoXG4gICAgICAgICd0b28gbWFueSBsaXAgc3luYyB0YXJnZXRzIDogezB9JyxcbiAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdG1wRmFkZUluOiBudW1iZXIgPVxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA8PSAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgKTtcblxuICAgIGNvbnN0IHRtcEZhZGVPdXQ6IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA8PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICApO1xuICAgIGxldCB2YWx1ZTogbnVtYmVyO1xuICAgIGxldCBjOiBudW1iZXIsIHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG5cbiAgICAvLyAnUmVwZWF0JyB0aW1lIGFzIG5lY2Vzc2FyeS5cbiAgICBsZXQgdGltZTogbnVtYmVyID0gdGltZU9mZnNldFNlY29uZHM7XG5cbiAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICB3aGlsZSAodGltZSA+IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24pIHtcbiAgICAgICAgdGltZSAtPSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgLy8gRXZhbHVhdGUgbW9kZWwgY3VydmVzLlxuICAgIGZvciAoXG4gICAgICBjID0gMDtcbiAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgKytjXG4gICAgKSB7XG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgY2FsbCBoYW5kbGVyLlxuICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rKSB7XG4gICAgICAgIGV5ZUJsaW5rVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMpIHtcbiAgICAgICAgbGlwU3luY1ZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtZXRlck1vdGlvbkN1cnZlQ291bnQgPSAwO1xuXG4gICAgZm9yIChcbiAgICAgIDtcbiAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgICsrY1xuICAgICkge1xuICAgICAgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCsrO1xuXG4gICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cbiAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcblxuICAgICAgLy8gU2tpcCBjdXJ2ZSBldmFsdWF0aW9uIGlmIG5vIHZhbHVlIGluIHNpbmsuXG4gICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgICAgIHBhcmFtZXRlckluZGV4XG4gICAgICApO1xuXG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xuICAgICAgICAgICAgdmFsdWUgKj0gZXllQmxpbmtWYWx1ZTtcbiAgICAgICAgICAgIGV5ZUJsaW5rRmxhZ3MgfD0gMSA8PCBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgKytpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gbGlwU3luY1ZhbHVlO1xuICAgICAgICAgICAgbGlwU3luY0ZsYWdzIHw9IDEgPDwgaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgdjogbnVtYmVyO1xuXG4gICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4lcbiAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCAmJiBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPCAwLjApIHtcbiAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44KS6YGp55SoXG4gICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgabjg5Xjgqfjg7zjg4njgqTjg7PjgYvjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgYzoqK3lrprjgZfjgabjgYLjgovloLTlkIjjga/jgZ3jgaHjgonjgpLpgannlKhcbiAgICAgICAgbGV0IGZpbjogbnVtYmVyO1xuICAgICAgICBsZXQgZm91dDogbnVtYmVyO1xuXG4gICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCkge1xuICAgICAgICAgIGZpbiA9IHRtcEZhZGVJbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaW4gPVxuICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPT0gMC4wXG4gICAgICAgICAgICAgID8gMS4wXG4gICAgICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA8IDAuMCkge1xuICAgICAgICAgIGZvdXQgPSB0bXBGYWRlT3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvdXQgPVxuICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lID09IDAuMCB8fFxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgICAgICAgPyAxLjBcbiAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmFtV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQgKiBmaW4gKiBmb3V0O1xuXG4gICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODieOCkumBqeeUqFxuICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBwYXJhbVdlaWdodDtcbiAgICAgIH1cblxuICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2LCAxLjApO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+OBvuOBsOOBn+OBjeOBr+mBqeeUqOOBl+OBquOBhFxuICAgICAgICAgIGlmICgoZXllQmxpbmtGbGFncyA+PiBpKSAmIDB4MDEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XG4gICAgICAgICAgICBzb3VyY2VWYWx1ZSArIChleWVCbGlua1ZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcblxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSwgdik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44Oq44OD44OX44K344Oz44Kv44Gv6YGp55So44GX44Gq44GEXG4gICAgICAgICAgaWYgKChsaXBTeW5jRmxhZ3MgPj4gaSkgJiAweDAxKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxuICAgICAgICAgICAgc291cmNlVmFsdWUgKyAobGlwU3luY1ZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcblxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoXG4gICAgICA7XG4gICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXG4gICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTtcbiAgICAgICsrY1xuICAgICkge1xuICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXG4gICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XG5cbiAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxuICAgICAgaWYgKHBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA+PSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uKSB7XG4gICAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOacgOWIneOBrueKtuaFi+OBuFxuICAgICAgICBpZiAodGhpcy5faXNMb29wRmFkZUluKSB7XG4gICAgICAgICAgLy8g44Or44O844OX5YaF44Gn44Or44O844OX55So44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544Gu5pmC44Gv44CB44OV44Kn44O844OJ44Kk44Oz6Kit5a6a44GX55u044GXXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRGYWRlSW5TdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX29uRmluaXNoZWRNb3Rpb24pIHtcbiAgICAgICAgICB0aGlzLl9vbkZpbmlzaGVkTW90aW9uKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRJc0ZpbmlzaGVkKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9sYXN0V2VpZ2h0ID0gZmFkZVdlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fmg4XloLHjga7oqK3lrppcbiAgICogQHBhcmFtIGxvb3Ag44Or44O844OX5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgc2V0SXNMb29wKGxvb3A6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc0xvb3AgPSBsb29wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+aDheWgseOBruWPluW+l1xuICAgKiBAcmV0dXJuIHRydWUg44Or44O844OX44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNMb29wKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0xvb3A7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBsb29wRmFkZUluICDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXRJc0xvb3BGYWRlSW4obG9vcEZhZGVJbjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4gIHRydWUgICAg44GZ44KLXG4gICAqIEByZXR1cm4gIGZhbHNlICAg44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNMb29wRmFkZUluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0xvb3BGYWRlSW47XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faXNMb29wID8gLTEuMCA6IHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlckZhZGVJblRpbWUoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlckZhZGVPdXRUaW1lKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtICAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIHJldHVybiBjdXJ2ZXMuYXQoaSkuZmFkZUluVGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICByZXR1cm4gY3VydmVzLmF0KGkpLmZhZGVPdXRUaW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rli5Xjgqjjg5Xjgqfjgq/jg4jjgYzjgYvjgYvjgaPjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBruioreWumlxuICAgKiBAcGFyYW0gZXllQmxpbmtQYXJhbWV0ZXJJZHMgICAg6Ieq5YuV44G+44Gw44Gf44GN44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGxpcFN5bmNQYXJhbWV0ZXJJZHMgICAgIOODquODg+ODl+OCt+ODs+OCr+OBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0RWZmZWN0SWRzKFxuICAgIGV5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+LFxuICAgIGxpcFN5bmNQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBleWVCbGlua1BhcmFtZXRlcklkcztcbiAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzID0gbGlwU3luY1BhcmFtZXRlcklkcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZUZyYW1lUmF0ZSA9IDMwLjA7XG4gICAgdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5faXNMb29wID0gZmFsc2U7IC8vIHRydWXjgYvjgokgZmFsc2Ug44G444OH44OV44Kp44Or44OI44KS5aSJ5pu0XG4gICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44KwXG4gICAgdGhpcy5fbGFzdFdlaWdodCA9IDAuMDtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IG51bGw7XG4gICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBudWxsO1xuICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IHZvaWQgMDtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBtb3Rpb24zLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIG1vdGlvbkpzb24gIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2UobW90aW9uSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBuZXcgQ3ViaXNtTW90aW9uRGF0YSgpO1xuXG4gICAgbGV0IGpzb246IEN1YmlzbU1vdGlvbkpzb24gPSBuZXcgQ3ViaXNtTW90aW9uSnNvbihtb3Rpb25Kc29uLCBzaXplKTtcblxuICAgIHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24gPSBqc29uLmdldE1vdGlvbkR1cmF0aW9uKCk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5sb29wID0ganNvbi5pc01vdGlvbkxvb3AoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgPSBqc29uLmdldE1vdGlvbkN1cnZlQ291bnQoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmZwcyA9IGpzb24uZ2V0TW90aW9uRnBzKCk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50ID0ganNvbi5nZXRFdmVudENvdW50KCk7XG5cbiAgICBjb25zdCBhcmVCZXppZXJzUmVzdHJ1Y3RlZDogYm9vbGVhbiA9IGpzb24uZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWcoXG4gICAgICBFdmFsdWF0aW9uT3B0aW9uRmxhZy5FdmFsdWF0aW9uT3B0aW9uRmxhZ19BcmVCZXppZXJzUmlzdHJpY3RlZFxuICAgICk7XG5cbiAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZUluVGltZSgpKSB7XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID1cbiAgICAgICAganNvbi5nZXRNb3Rpb25GYWRlSW5UaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKSkge1xuICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPVxuICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gMS4wO1xuICAgIH1cblxuICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLnVwZGF0ZVNpemUoXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQsXG4gICAgICBDdWJpc21Nb3Rpb25DdXJ2ZSxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0TW90aW9uVG90YWxTZWdtZW50Q291bnQoKSxcbiAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKSxcbiAgICAgIEN1YmlzbU1vdGlvblBvaW50LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMudXBkYXRlU2l6ZShcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCxcbiAgICAgIEN1YmlzbU1vdGlvbkV2ZW50LFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICBsZXQgdG90YWxQb2ludENvdW50ID0gMDtcbiAgICBsZXQgdG90YWxTZWdtZW50Q291bnQgPSAwO1xuXG4gICAgLy8gQ3VydmVzXG4gICAgZm9yIChcbiAgICAgIGxldCBjdXJ2ZUNvdW50ID0gMDtcbiAgICAgIGN1cnZlQ291bnQgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7XG4gICAgICArK2N1cnZlQ291bnRcbiAgICApIHtcbiAgICAgIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVNb2RlbCkge1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcbiAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFyYW1ldGVyKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcnRPcGFjaXR5XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKFxuICAgICAgICAgICdXYXJuaW5nIDogVW5hYmxlIHRvIGdldCBzZWdtZW50IHR5cGUgZnJvbSBDdXJ2ZSEgVGhlIG51bWJlciBvZiBcIkN1cnZlQ291bnRcIiBtYXkgYmUgaW5jb3JyZWN0ISdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuaWQgPSBqc29uLmdldE1vdGlvbkN1cnZlSWQoXG4gICAgICAgIGN1cnZlQ291bnRcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxuICAgICAgICBjdXJ2ZUNvdW50XG4gICAgICApLmJhc2VTZWdtZW50SW5kZXggPSB0b3RhbFNlZ21lbnRDb3VudDtcblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXG4gICAgICAgIGN1cnZlQ291bnRcbiAgICAgICkuZmFkZUluVGltZSA9IGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxuICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXG4gICAgICAgIDogLTEuMDtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxuICAgICAgICBjdXJ2ZUNvdW50XG4gICAgICApLmZhZGVPdXRUaW1lID0ganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICA6IC0xLjA7XG5cbiAgICAgIC8vIFNlZ21lbnRzXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2VnbWVudFBvc2l0aW9uID0gMDtcbiAgICAgICAgc2VnbWVudFBvc2l0aW9uIDwganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUNvdW50KTtcblxuICAgICAgKSB7XG4gICAgICAgIGlmIChzZWdtZW50UG9zaXRpb24gPT0gMCkge1xuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXG4gICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICkuYmFzZVBvaW50SW5kZXggPSB0b3RhbFBvaW50Q291bnQ7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbik7XG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMSk7XG5cbiAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5iYXNlUG9pbnRJbmRleCA9XG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VnbWVudDogbnVtYmVyID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICBzZWdtZW50UG9zaXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgc3dpdGNoIChzZWdtZW50KSB7XG4gICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI6IHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICkuZXZhbHVhdGUgPSBsaW5lYXJFdmFsdWF0ZTtcblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0Jlemllcjoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI7XG5cbiAgICAgICAgICAgIGlmIChhcmVCZXppZXJzUmVzdHJ1Y3RlZCB8fCBVc2VPbGRCZXppZXJzQ3VydmVNb3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gYmV6aWVyRXZhbHVhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBiZXppZXJFdmFsdWF0ZUNhcmRhbm9JbnRlcnByZXRhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAxXG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgM1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAxXG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDZcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICkuZXZhbHVhdGUgPSBzdGVwcGVkRXZhbHVhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAxXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAyXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICkuZXZhbHVhdGUgPSBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIENTTV9BU1NFUlQoMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICArK3RoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnNlZ21lbnRDb3VudDtcbiAgICAgICAgKyt0b3RhbFNlZ21lbnRDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHVzZXJkYXRhY291bnQgPSAwO1xuICAgICAgdXNlcmRhdGFjb3VudCA8IGpzb24uZ2V0RXZlbnRDb3VudCgpO1xuICAgICAgKyt1c2VyZGF0YWNvdW50XG4gICAgKSB7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS5maXJlVGltZSA9IGpzb24uZ2V0RXZlbnRUaW1lKFxuICAgICAgICB1c2VyZGF0YWNvdW50XG4gICAgICApO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkudmFsdWUgPSBqc29uLmdldEV2ZW50VmFsdWUoXG4gICAgICAgIHVzZXJkYXRhY291bnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgICBqc29uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/mm7TmlrBcbiAgICpcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXG4gICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAgIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBtb3Rpb25UaW1lU2Vjb25kcyAgICAgICAg5LuK5Zue44Gu5YaN55Sf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxuICAgIGJlZm9yZUNoZWNrVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnVwZGF0ZVNpemUoMCk7XG5cbiAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cbiAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudDsgKyt1KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA8PSBtb3Rpb25UaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXG4gICAgICAgICAgbmV3IGNzbVN0cmluZyh0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS52YWx1ZS5zKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xuICB9XG5cbiAgcHVibGljIF9zb3VyY2VGcmFtZVJhdGU6IG51bWJlcjsgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcbiAgcHVibGljIF9sb29wRHVyYXRpb25TZWNvbmRzOiBudW1iZXI7IC8vIG10buODleOCoeOCpOODq+OBp+Wumue+qeOBleOCjOOCi+S4gOmAo+OBruODouODvOOCt+ODp+ODs+OBrumVt+OBlVxuICBwdWJsaWMgX2lzTG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GLP1xuICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXG4gIHB1YmxpYyBfbGFzdFdlaWdodDogbnVtYmVyOyAvLyDmnIDlvozjgavoqK3lrprjgZXjgozjgZ/ph43jgb9cblxuICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWun+mam+OBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+acrOS9k1xuXG4gIHB1YmxpYyBfZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOiHquWLleOBvuOBsOOBn+OBjeOCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9saXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXG5cbiAgcHVibGljIF9tb2RlbEN1cnZlSWRFeWVCbGluazogQ3ViaXNtSWRIYW5kbGU7IC8vIOODouODh+ODq+OBjOaMgeOBpOiHquWLleOBvuOBsOOBn+OBjeeUqOODkeODqeODoeODvOOCv0lE44Gu44OP44Oz44OJ44Or44CCICDjg6Ljg4fjg6vjgajjg6Ljg7zjgrfjg6fjg7PjgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbiA9ICQuQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb24gPSAkLkN1YmlzbU1vdGlvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ5cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ7jgIJcbiAqL1xuZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQge1xuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCwgLy8g44Oi44OH44Or44Gr5a++44GX44GmXG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciwgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44GmXG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5IC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBq+WvvuOBl+OBplxufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ7jgIJcbiAqL1xuZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUge1xuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXIgPSAwLCAvLyDjg6rjg4vjgqJcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyID0gMSwgLy8g44OZ44K444Kn5puy57eaXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQgPSAyLCAvLyDjgrnjg4bjg4Pjg5dcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQgPSAzIC8vIOOCpOODs+ODkOODvOOCueOCueODhuODg+ODl1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrlcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblBvaW50IHtcbiAgdGltZSA9IDAuMDsgLy8g5pmC6ZaTW+enkl1cbiAgdmFsdWUgPSAwLjA7IC8vIOWApFxufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruipleS+oemWouaVsFxuICpcbiAqIEBwYXJhbSAgIHBvaW50cyAgICAgIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueODquOCueODiFxuICogQHBhcmFtICAgdGltZSAgICAgICAg6KmV5L6h44GZ44KL5pmC6ZaTW+enkl1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uIHtcbiAgKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4hcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblNlZ21lbnQge1xuICAvKipcbiAgICogQGJyaWVmIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jgIJcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2YWx1YXRlID0gbnVsbDtcbiAgICB0aGlzLmJhc2VQb2ludEluZGV4ID0gMDtcbiAgICB0aGlzLnNlZ21lbnRUeXBlID0gMDtcbiAgfVxuXG4gIGV2YWx1YXRlOiBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uOyAvLyDkvb/nlKjjgZnjgovoqZXkvqHplqLmlbBcbiAgYmFzZVBvaW50SW5kZXg6IG51bWJlcjsgLy8g5pyA5Yid44Gu44K744Kw44Oh44Oz44OI44G444Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHNlZ21lbnRUeXBlOiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBrueorumhnlxufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5ZcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkN1cnZlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudHlwZSA9IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgIHRoaXMuc2VnbWVudENvdW50ID0gMDtcbiAgICB0aGlzLmJhc2VTZWdtZW50SW5kZXggPSAwO1xuICAgIHRoaXMuZmFkZUluVGltZSA9IDAuMDtcbiAgICB0aGlzLmZhZGVPdXRUaW1lID0gMC4wO1xuICB9XG5cbiAgdHlwZTogQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7IC8vIOOCq+ODvOODluOBrueorumhnlxuICBpZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOOCq+ODvOODluOBrklEXG4gIHNlZ21lbnRDb3VudDogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcbiAgYmFzZVNlZ21lbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgZmFkZUluVGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICBmYWRlT3V0VGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxufVxuXG4vKipcbiAqIOOCpOODmeODs+ODiOOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRXZlbnQge1xuICBmaXJlVGltZSA9IDAuMDtcbiAgdmFsdWU6IGNzbVN0cmluZztcbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44OH44O844K/XG4gKlxuICog44Oi44O844K344On44Oz44OH44O844K/44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25EYXRhIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XG4gICAgdGhpcy5sb29wID0gZmFsc2U7XG4gICAgdGhpcy5jdXJ2ZUNvdW50ID0gMDtcbiAgICB0aGlzLmV2ZW50Q291bnQgPSAwO1xuICAgIHRoaXMuZnBzID0gMC4wO1xuXG4gICAgdGhpcy5jdXJ2ZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPigpO1xuICAgIHRoaXMuc2VnbWVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+KCk7XG4gICAgdGhpcy5wb2ludHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PigpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD4oKTtcbiAgfVxuXG4gIGR1cmF0aW9uOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gIGxvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBi+OBqeOBhuOBi1xuICBjdXJ2ZUNvdW50OiBudW1iZXI7IC8vIOOCq+ODvOODluOBruWAi+aVsFxuICBldmVudENvdW50OiBudW1iZXI7IC8vIFVzZXJEYXRh44Gu5YCL5pWwXG4gIGZwczogbnVtYmVyOyAvLyDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hcbiAgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+OyAvLyDjgqvjg7zjg5bjga7jg6rjgrnjg4hcbiAgc2VnbWVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PjsgLy8g44K744Kw44Oh44Oz44OI44Gu44Oq44K544OIXG4gIHBvaW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PjsgLy8g44Od44Kk44Oz44OI44Gu44Oq44K544OIXG4gIGV2ZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PjsgLy8g44Kk44OZ44Oz44OI44Gu44Oq44K544OIXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25DdXJ2ZSA9ICQuQ3ViaXNtTW90aW9uQ3VydmU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkN1cnZlID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0ID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSAkLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uRGF0YSA9ICQuQ3ViaXNtTW90aW9uRGF0YTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uRGF0YSA9ICQuQ3ViaXNtTW90aW9uRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkV2ZW50ID0gJC5DdWJpc21Nb3Rpb25FdmVudDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uRXZlbnQgPSAkLkN1YmlzbU1vdGlvbkV2ZW50O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uUG9pbnQgPSAkLkN1YmlzbU1vdGlvblBvaW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25Qb2ludCA9ICQuQ3ViaXNtTW90aW9uUG9pbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25TZWdtZW50ID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25TZWdtZW50ID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGU7XG4gIGV4cG9ydCB0eXBlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24gPSAkLmNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBDdWJpc21Kc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5cbi8vIEpTT04ga2V5c1xuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IER1cmF0aW9uID0gJ0R1cmF0aW9uJztcbmNvbnN0IExvb3AgPSAnTG9vcCc7XG5jb25zdCBBcmVCZXppZXJzUmVzdHJpY3RlZCA9ICdBcmVCZXppZXJzUmVzdHJpY3RlZCc7XG5jb25zdCBDdXJ2ZUNvdW50ID0gJ0N1cnZlQ291bnQnO1xuY29uc3QgRnBzID0gJ0Zwcyc7XG5jb25zdCBUb3RhbFNlZ21lbnRDb3VudCA9ICdUb3RhbFNlZ21lbnRDb3VudCc7XG5jb25zdCBUb3RhbFBvaW50Q291bnQgPSAnVG90YWxQb2ludENvdW50JztcbmNvbnN0IEN1cnZlcyA9ICdDdXJ2ZXMnO1xuY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG5jb25zdCBJZCA9ICdJZCc7XG5jb25zdCBGYWRlSW5UaW1lID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xuY29uc3QgU2VnbWVudHMgPSAnU2VnbWVudHMnO1xuY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbmNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcbmNvbnN0IFRpbWUgPSAnVGltZSc7XG5jb25zdCBWYWx1ZSA9ICdWYWx1ZSc7XG5cbi8qKlxuICogbW90aW9uMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Kc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKER1cmF0aW9uKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmg4XloLHjga7lj5blvpdcbiAgICogQHJldHVybiB0cnVlIOODq+ODvOODl+OBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTW90aW9uTG9vcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExvb3ApXG4gICAgICAudG9Cb29sZWFuKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWcoZmxhZ1R5cGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIEV2YWx1YXRpb25PcHRpb25GbGFnLkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkID09IGZsYWdUeXBlXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFyZUJlemllcnNSZXN0cmljdGVkKVxuICAgICAgICAudG9Cb29sZWFuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjg6zjg7zjg6Djg6zjg7zjg4jjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hbRlBTXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZwcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRnBzKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7lj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxTZWdtZW50Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHlupfjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHngrnjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsUG9pbnRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWtmOWcqFxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lrZjlnKhcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7nqK7poZ7jga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kr44O844OW44Gu56iu6aGeXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVJZChjdXJ2ZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAuaXNOdWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCL5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50KGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHNlZ21lbnRJbmRleCDjgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgrvjgrDjg6Hjg7Pjg4jjga7lgKRcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgY3VydmVJbmRleDogbnVtYmVyLFxuICAgIHNlZ21lbnRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChzZWdtZW50SW5kZXgpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldEV2ZW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAg44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VG90YWxFdmVudFZhbHVlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7mmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtIHVzZXJEYXRhSW5kZXgg44Kk44OZ44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRFdmVudFRpbWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIHVzZXJEYXRhSW5kZXgg44Kk44OZ44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0RXZlbnRWYWx1ZSh1c2VyRGF0YUluZGV4OiBudW1iZXIpOiBjc21TdHJpbmcge1xuICAgIHJldHVybiBuZXcgY3NtU3RyaW5nKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgX2pzb246IEN1YmlzbUpzb247IC8vIG1vdGlvbjMuanNvbuOBruODh+ODvOOCv1xufVxuXG4vKipcbiAqIEBicmllZiDjg5njgrjjgqfjgqvjg7zjg5bjga7op6Pph4jmlrnms5Xjga7jg5Xjg6njgrDjgr/jgqTjg5dcbiAqL1xuZXhwb3J0IGVudW0gRXZhbHVhdGlvbk9wdGlvbkZsYWcge1xuICBFdmFsdWF0aW9uT3B0aW9uRmxhZ19BcmVCZXppZXJzUmlzdHJpY3RlZCA9IDAgLy8vPCDjg5njgrjjgqfjg4/jg7Pjg4njg6vjga7opo/liLbnirbmhYtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uSnNvbiA9ICQuQ3ViaXNtTW90aW9uSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uSnNvbiA9ICQuQ3ViaXNtTW90aW9uSnNvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxuICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcbn0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCkuihjOOBhuOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uTWFuYWdlciBleHRlbmRzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7XG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjga7lj5blvpdcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLlj5blvpfjgZnjgovjgIJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVzZXJ2ZVByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc2VydmVQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcbiAgICogQHBhcmFtICAgdmFsICAgICDlhKrlhYjluqZcbiAgICovXG4gIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICog5YSq5YWI5bqm44KS6Kit5a6a44GX44Gm44Oi44O844K344On44Oz44KS6ZaL5aeL44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM54up54yf44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJdHJ1ZVxuICAgKiBAcGFyYW0gcHJpb3JpdHkgICAgICAgIOWEquWFiOW6plxuICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICBwcmlvcml0eTogbnVtYmVyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChwcmlvcml0eSA9PSB0aGlzLl9yZXNlcnZlUHJpb3JpdHkpIHtcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7IC8vIOS6iOe0hOOCkuino+mZpFxuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAvLyDlho3nlJ/kuK3jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrppcblxuICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuICBmYWxzZSAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgY29uc3QgdXBkYXRlZDogYm9vbGVhbiA9IHN1cGVyLmRvVXBkYXRlTW90aW9uKG1vZGVsLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xuXG4gICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSAwOyAvLyDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLop6PpmaRcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgcHJpb3JpdHkgICAg5YSq5YWI5bqmXG4gICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXG4gICAqIEByZXR1cm4gIGZhbHNlICAg5LqI57SE44Gn44GN44Gq44GL44Gj44GfXG4gICAqL1xuICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgcHJpb3JpdHkgPD0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5IHx8XG4gICAgICBwcmlvcml0eSA8PSB0aGlzLl9jdXJyZW50UHJpb3JpdHlcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX2N1cnJlbnRQcmlvcml0eTogbnVtYmVyOyAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgX3Jlc2VydmVQcmlvcml0eTogbnVtYmVyOyAvLyDlho3nlJ/kuojlrprjga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgILlho3nlJ/kuK3jga8w44Gr44Gq44KL44CC44Oi44O844K344On44Oz44OV44Kh44Kk44Or44KS5Yil44K544Os44OD44OJ44Gn6Kqt44G/6L6844KA44Go44GN44Gu5qmf6IO944CCXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbm1hbmFnZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5cbi8qKlxuICogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn5YaN55Sf44GX44Gm44GE44KL5ZCE44Oi44O844K344On44Oz44Gu566h55CG44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2F1dG9EZWxldGUgPSBmYWxzZTtcbiAgICB0aGlzLl9tb3Rpb24gPSBudWxsO1xuICAgIHRoaXMuX2F2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fc3RhcnRUaW1lU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IDAuMDtcbiAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IHRoaXM7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYXV0b0RlbGV0ZSAmJiB0aGlzLl9tb3Rpb24pIHtcbiAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKHRoaXMuX21vdGlvbik7IC8vXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBqOmWi+Wni+WIpOWumuOBruioreWumlxuICAgKiBAcGFyYW0gZmFkZU91dFNlY29uZHMg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRGYWRlT3V0KGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICAgIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu6ZaL5aeLXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRGYWRlT3V0KGZhZGVPdXRTZWNvbmRzOiBudW1iZXIsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbmV3RW5kVGltZVNlY29uZHM6IG51bWJlciA9IHVzZXJUaW1lU2Vjb25kcyArIGZhZGVPdXRTZWNvbmRzO1xuICAgIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dCA9IHRydWU7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA8IDAuMCB8fFxuICAgICAgbmV3RW5kVGltZVNlY29uZHMgPCB0aGlzLl9lbmRUaW1lU2Vjb25kc1xuICAgICkge1xuICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSBuZXdFbmRUaW1lU2Vjb25kcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9maW5pc2hlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vjga7norroqo1cbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBjOmWi+Wni+OBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIOmWi+Wni+OBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIGdldFN0YXJ0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWVTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZUluU3RhcnRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXG4gICAqL1xuICBwdWJsaWMgZ2V0RW5kVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9lbmRUaW1lU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICogQHBhcmFtIHN0YXJ0VGltZSDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtcbiAgICovXG4gIHB1YmxpYyBzZXRTdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gc3RhcnRUaW1lIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RmFkZUluU3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IHN0YXJ0VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7oqK3lrppcbiAgICogQHBhcmFtIGVuZFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRFbmRUaW1lKGVuZFRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gZW5kVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7oqK3lrppcbiAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrue1guS6hlxuICAgKi9cbiAgcHVibGljIHNldElzRmluaXNoZWQoZjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2ZpbmlzaGVkID0gZjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vjga7oqK3lrppcbiAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrumWi+Wni1xuICAgKi9cbiAgcHVibGljIHNldElzU3RhcnRlZChmOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhcnRlZCA9IGY7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu56K66KqNXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcbiAgICogQHJldHVybiBmYWxzZSDjg6Ljg7zjgrfjg6fjg7Pjga/nhKHlirlcbiAgICovXG4gIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBruioreWumlxuICAgKiBAcGFyYW0gdiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gv5pyJ5Yq5XG4gICAqL1xuICBwdWJsaWMgc2V0SXNBdmFpbGFibGUodjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2F2YWlsYWJsZSA9IHY7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu54q25oWL44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB0aW1lU2Vjb25kcyDnj77lnKjmmYLliLtb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+WwvumHjeOBv1xuICAgKi9cbiAgcHVibGljIHNldFN0YXRlKHRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IHRpbWVTZWNvbmRzO1xuICAgIHRoaXMuX3N0YXRlV2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhdGVUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlVGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhdGVXZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVXZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk+OCkuioreWumlxuICAgKiBAcGFyYW0gY2hlY2tTZWNvbmRzIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKGNoZWNrU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzID0gY2hlY2tTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+WIpOWumuOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+OBmeOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgcHVibGljIGlzVHJpZ2dlcmVkRmFkZU91dCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZU91dFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICBfYXV0b0RlbGV0ZTogYm9vbGVhbjsgLy8g6Ieq5YuV5YmK6ZmkXG4gIF9tb3Rpb246IEFDdWJpc21Nb3Rpb247IC8vIOODouODvOOCt+ODp+ODs1xuXG4gIF9hdmFpbGFibGU6IGJvb2xlYW47IC8vIOacieWKueWMluODleODqeOCsFxuICBfZmluaXNoZWQ6IGJvb2xlYW47IC8vIOe1guS6huODleODqeOCsFxuICBfc3RhcnRlZDogYm9vbGVhbjsgLy8g6ZaL5aeL44OV44Op44KwXG4gIF9zdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+mWi+Wni+aZguWIu1vnp5JdXG4gIF9mYWRlSW5TdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+mWi+Wni+aZguWIu++8iOODq+ODvOODl+OBruaZguOBr+WIneWbnuOBruOBv++8iVvnp5JdXG4gIF9lbmRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDntYLkuobkuojlrprmmYLliLtb56eSXVxuICBfc3RhdGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmmYLliLvjga7nirbmhYtb56eSXVxuICBfc3RhdGVXZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/44Gu54q25oWLXG4gIF9sYXN0RXZlbnRDaGVja1NlY29uZHM6IG51bWJlcjsgLy8g5pyA57WC44GuTW90aW9u5YG044Gu44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTXG4gIHByaXZhdGUgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gIHByaXZhdGUgX2lzVHJpZ2dlcmVkRmFkZU91dDogYm9vbGVhbjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI6ZaL5aeL44OV44Op44KwXG5cbiAgX21vdGlvblF1ZXVlRW50cnlIYW5kbGU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7IC8vIOOCpOODs+OCueOCv+ODs+OCueOBlOOBqOOBq+S4gOaEj+OBruWApOOCkuaMgeOBpOitmOWIpeeVquWPt1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gJC5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gJC5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIZcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIbnlKjjgq/jg6njgrnjgIJDdWJpc21Nb3Rpb27jg6Ljg7zjgrfjg6fjg7PjgarjgalBQ3ViaXNtTW90aW9u44Gu44K144OW44Kv44Op44K544KS5YaN55Sf44GZ44KL44Gf44KB44Gr5L2/55So44GZ44KL44CCXG4gKlxuICogQG5vdGUg5YaN55Sf5Lit44Gr5Yil44Gu44Oi44O844K344On44Oz44GMIFN0YXJ0TW90aW9uKCnjgZXjgozjgZ/loLTlkIjjga/jgIHmlrDjgZfjgYTjg6Ljg7zjgrfjg6fjg7Pjgavmu5HjgonjgYvjgavlpInljJbjgZfml6fjg6Ljg7zjgrfjg6fjg7Pjga/kuK3mlq3jgZnjgovjgIJcbiAqICAgICAgIOihqOaDheeUqOODouODvOOCt+ODp+ODs+OAgeS9k+eUqOODouODvOOCt+ODp+ODs+OBquOBqeOCkuWIhuOBkeOBpuODouODvOOCt+ODp+ODs+WMluOBl+OBn+WgtOWQiOOBquOBqeOAgVxuICogICAgICAg6KSH5pWw44Gu44Oi44O844K344On44Oz44KS5ZCM5pmC44Gr5YaN55Sf44GV44Gb44KL5aC05ZCI44Gv44CB6KSH5pWw44GuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Kk44Oz44K544K/44Oz44K544KS5L2/55So44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sgPSBudWxsO1xuICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IG51bGw7XG4gICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgaWYgKHRoaXMuX21vdGlvbnMuYXQoaSkpIHtcbiAgICAgICAgdGhpcy5fbW90aW9ucy5hdChpKS5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX21vdGlvbnMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21vdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBrumWi+Wni1xuICAgKlxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgILlkIzjgZjjgr/jgqTjg5fjga7jg6Ljg7zjgrfjg6fjg7PjgYzml6LjgavjgYLjgovloLTlkIjjga/jgIHml6LlrZjjga7jg6Ljg7zjgrfjg6fjg7PjgavntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZXjgZvjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgbW90aW9uICAgICAgICAgIOmWi+Wni+OBmeOCi+ODouODvOOCt+ODp+ODs1xuICAgKiBAcGFyYW0gICBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM57WC5LqG44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJIHRydWVcbiAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqIEByZXR1cm4gICAgICAgICAgICAgICAgICAgICAg6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLSXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44Gv44CMLTHjgI1cbiAgICovXG4gIHB1YmxpYyBzdGFydE1vdGlvbihcbiAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlclxuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgIH1cblxuICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcblxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHRoaXMuX21vdGlvbnMuYXQoaSk7XG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVPdXQobW90aW9uUXVldWVFbnRyeS5fbW90aW9uLmdldEZhZGVPdXRUaW1lKCkpOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4joqK3lrppcbiAgICB9XG5cbiAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbmV3IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoKTsgLy8g57WC5LqG5pmC44Gr56C05qOE44GZ44KLXG4gICAgbW90aW9uUXVldWVFbnRyeS5fYXV0b0RlbGV0ZSA9IGF1dG9EZWxldGU7XG4gICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uID0gbW90aW9uO1xuXG4gICAgdGhpcy5fbW90aW9ucy5wdXNoQmFjayhtb3Rpb25RdWV1ZUVudHJ5KTtcblxuICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgKiBAcmV0dXJuIHRydWUg5YWo44Gm57WC5LqG44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICApIHtcbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb247XG5cbiAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICBpZiAoIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0ZpbmlzaGVkQnlIYW5kbGUoXG4gICAgbW90aW9uUXVldWVFbnRyeU51bWJlcjogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZVxuICApOiBib29sZWFuIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICYmXG4gICAgICAgICFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RvcEFsbE1vdGlvbnMoKTogdm9pZCB7XG4gICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgKSB7XG4gICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICAgICog5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeeOBruWPluW+l1xuXG4gICAgICAgICogQHBhcmFtICAgbW90aW9uUXVldWVFbnRyeU51bWJlciAg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAgICAgICogQHJldHVybiAg5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICAgICAqIEByZXR1cm4gIG51bGwgICDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgICAgICAgKi9cbiAgcHVibGljIGdldEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoXG4gICAgbW90aW9uUXVldWVFbnRyeU51bWJlcjogYW55XG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xuICAgIC8vLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY29uc3QgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPT0gbW90aW9uUXVldWVFbnRyeU51bWJlcikge1xuICAgICAgICByZXR1cm4gbW90aW9uUXVldWVFbnRyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjgpLlj5fjgZHlj5bjgotDYWxsYmFja+OBrueZu+mMslxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2sg44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEBwYXJhbSBjdXN0b21EYXRhIOOCs+ODvOODq+ODkOODg+OCr+OBq+i/lOOBleOCjOOCi+ODh+ODvOOCv1xuICAgKi9cbiAgcHVibGljIHNldEV2ZW50Q2FsbGJhY2soXG4gICAgY2FsbGJhY2s6IEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24sXG4gICAgY3VzdG9tRGF0YTogYW55ID0gbnVsbFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fZXZlbnRDdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzICAg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICogQHJldHVybiAgdHJ1ZSAgICDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcbiAgICogQHJldHVybiAgZmFsc2UgICDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgarjgZco44Oi44O844K344On44Oz44Gu5aSJ5YyW44Gq44GXKVxuICAgKi9cbiAgcHVibGljIGRvVXBkYXRlTW90aW9uKG1vZGVsOiBDdWJpc21Nb2RlbCwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLS1cbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICkge1xuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcblxuICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gLS0tLS0tIOWApOOCkuWPjeaYoOOBmeOCiyAtLS0tLS1cbiAgICAgIG1vdGlvbi51cGRhdGVQYXJhbWV0ZXJzKG1vZGVsLCBtb3Rpb25RdWV1ZUVudHJ5LCB1c2VyVGltZVNlY29uZHMpO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG5cbiAgICAgIC8vIC0tLS0tLSDjg6bjg7zjgrbjg4jjg6rjgqzjg7zjgqTjg5njg7Pjg4jjgpLmpJzmn7vjgZnjgosgLS0tLVxuICAgICAgY29uc3QgZmlyZWRMaXN0OiBjc21WZWN0b3I8Y3NtU3RyaW5nPiA9IG1vdGlvbi5nZXRGaXJlZEV2ZW50KFxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldExhc3RDaGVja0V2ZW50U2Vjb25kcygpIC1cbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpLFxuICAgICAgICB1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpXG4gICAgICApO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpcmVkTGlzdC5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICB0aGlzLl9ldmVudENhbGxCYWNrKHRoaXMsIGZpcmVkTGlzdC5hdChpKSwgdGhpcy5fZXZlbnRDdXN0b21EYXRhKTtcbiAgICAgIH1cblxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRMYXN0Q2hlY2tFdmVudFNlY29uZHModXNlclRpbWVTZWNvbmRzKTtcblxuICAgICAgLy8gLS0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5pc1RyaWdnZXJlZEZhZGVPdXQoKSkge1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc3RhcnRGYWRlT3V0KFxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlT3V0U2Vjb25kcygpLFxuICAgICAgICAgICAgdXNlclRpbWVTZWNvbmRzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG4gIH1cbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gIF9tb3Rpb25zOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT47IC8vIOODouODvOOCt+ODp+ODs1xuICBfZXZlbnRDYWxsQmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbjsgLy8g44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIF9ldmVudEN1c3RvbURhdGE6IGFueTsgLy8g44Kz44O844Or44OQ44OD44Kv44Gr5oi744GV44KM44KL44OH44O844K/XG59XG5cbi8qKlxuICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWw44KS5a6a576pXG4gKlxuICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv44Gr55m76Yyy44Gn44GN44KL6Zai5pWw44Gu5Z6L5oOF5aCxXG4gKiBAcGFyYW0gY2FsbGVyICAgICAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLlho3nlJ/jgZXjgZvjgZ9DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcbiAqIEBwYXJhbSBldmVudFZhbHVlICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICogQHBhcmFtIGN1c3RvbURhdGEgICDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovnmbvpjLLmmYLjgavmjIflrprjgZXjgozjgZ/jg4fjg7zjgr9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uIHtcbiAgKFxuICAgIGNhbGxlcjogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyLFxuICAgIGV2ZW50VmFsdWU6IGNzbVN0cmluZyxcbiAgICBjdXN0b21EYXRhOiBhbnlcbiAgKTogdm9pZDtcbn1cblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjga7lrprnvqlcbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gYW55O1xuZXhwb3J0IGNvbnN0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSAtMTtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyID0gJC5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XG4gIGV4cG9ydCBjb25zdCBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlID1cbiAgICAkLkludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSAkLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24gPSAkLkN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQge1xuICBDdWJpc21QaHlzaWNzSW5wdXQsXG4gIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBDdWJpc21QaHlzaWNzT3V0cHV0LFxuICBDdWJpc21QaHlzaWNzUGFydGljbGUsXG4gIEN1YmlzbVBoeXNpY3NSaWcsXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2UsXG4gIEN1YmlzbVBoeXNpY3NTdWJSaWcsXG4gIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlXG59IGZyb20gJy4vY3ViaXNtcGh5c2ljc2ludGVybmFsJztcbmltcG9ydCB7IEN1YmlzbVBoeXNpY3NKc29uIH0gZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG5cbi8vIHBoeXNpY3MgdHlwZXMgdGFncy5cbmNvbnN0IFBoeXNpY3NUeXBlVGFnWCA9ICdYJztcbmNvbnN0IFBoeXNpY3NUeXBlVGFnWSA9ICdZJztcbmNvbnN0IFBoeXNpY3NUeXBlVGFnQW5nbGUgPSAnQW5nbGUnO1xuXG4vLyBDb25zdGFudCBvZiBhaXIgcmVzaXN0YW5jZS5cbmNvbnN0IEFpclJlc2lzdGFuY2UgPSA1LjA7XG5cbi8vIENvbnN0YW50IG9mIG1heGltdW0gd2VpZ2h0IG9mIGlucHV0IGFuZCBvdXRwdXQgcmF0aW8uXG5jb25zdCBNYXhpbXVtV2VpZ2h0ID0gMTAwLjA7XG5cbi8vIENvbnN0YW50IG9mIHRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbmNvbnN0IE1vdmVtZW50VGhyZXNob2xkID0gMC4wMDE7XG5cbi8qKlxuICog54mp55CG5ryU566X44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbVBoeXNpY3Mge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtUGh5c2ljcyA9IG5ldyBDdWJpc21QaHlzaWNzKCk7XG5cbiAgICByZXQucGFyc2UoYnVmZmVyLCBzaXplKTtcbiAgICByZXQuX3BoeXNpY3NSaWcuZ3Jhdml0eS55ID0gMDtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAqIEBwYXJhbSBwaHlzaWNzIOegtOajhOOBmeOCi+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUocGh5c2ljczogQ3ViaXNtUGh5c2ljcyk6IHZvaWQge1xuICAgIGlmIChwaHlzaWNzICE9IG51bGwpIHtcbiAgICAgIHBoeXNpY3MucmVsZWFzZSgpO1xuICAgICAgcGh5c2ljcyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruipleS+oVxuICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZXZhbHVhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgdG90YWxBbmdsZTogeyBhbmdsZTogbnVtYmVyIH07XG4gICAgbGV0IHdlaWdodDogbnVtYmVyO1xuICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xuICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuICAgIGNvbnN0IHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICBsZXQgY3VycmVudElucHV0OiBDdWJpc21QaHlzaWNzSW5wdXRbXTtcbiAgICBsZXQgY3VycmVudE91dHB1dDogQ3ViaXNtUGh5c2ljc091dHB1dFtdO1xuICAgIGxldCBjdXJyZW50UGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcblxuICAgIGxldCBwYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogRmxvYXQzMkFycmF5O1xuXG4gICAgcGFyYW1ldGVyVmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgKSB7XG4gICAgICB0b3RhbEFuZ2xlID0geyBhbmdsZTogMC4wIH07XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAwLjA7XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPSAwLjA7XG4gICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgIGN1cnJlbnRJbnB1dCA9IHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmdldChjdXJyZW50U2V0dGluZy5iYXNlSW5wdXRJbmRleCk7XG4gICAgICBjdXJyZW50T3V0cHV0ID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICApO1xuICAgICAgY3VycmVudFBhcnRpY2xlcyA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXhcbiAgICAgICk7XG5cbiAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5pbnB1dENvdW50OyArK2kpIHtcbiAgICAgICAgd2VpZ2h0ID0gY3VycmVudElucHV0W2ldLndlaWdodCAvIE1heGltdW1XZWlnaHQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgY3VycmVudElucHV0W2ldLnNvdXJjZS5pZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50SW5wdXRbaV0uZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgICAgdG90YWxBbmdsZSxcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbixcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uQW5nbGUsXG4gICAgICAgICAgY3VycmVudElucHV0W2ldLnJlZmxlY3QsXG4gICAgICAgICAgd2VpZ2h0XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJhZEFuZ2xlID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4oLXRvdGFsQW5nbGUuYW5nbGUpO1xuXG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSkgLVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSk7XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSkgK1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBwYXJ0aWNsZXMgcG9zaXRpb24uXG4gICAgICB1cGRhdGVQYXJ0aWNsZXMoXG4gICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQsXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgIHRvdGFsQW5nbGUuYW5nbGUsXG4gICAgICAgIHRoaXMuX29wdGlvbnMud2luZCxcbiAgICAgICAgTW92ZW1lbnRUaHJlc2hvbGQgKiBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgICAgZGVsdGFUaW1lU2Vjb25kcyxcbiAgICAgICAgQWlyUmVzaXN0YW5jZVxuICAgICAgKTtcblxuICAgICAgLy8gVXBkYXRlIG91dHB1dCBwYXJhbWV0ZXJzLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlSW5kZXggPSBjdXJyZW50T3V0cHV0W2ldLnZlcnRleEluZGV4O1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4IDwgMSB8fFxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggPj0gY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudFxuICAgICAgICApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50T3V0cHV0W2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBjdXJyZW50T3V0cHV0W2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0uZGVzdGluYXRpb24uaWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgICAgICB0cmFuc2xhdGlvbi54ID1cbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnggLVxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLng7XG4gICAgICAgIHRyYW5zbGF0aW9uLnkgPVxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueSAtXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24ueTtcblxuICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRbaV0uZ2V0VmFsdWUoXG4gICAgICAgICAgdHJhbnNsYXRpb24sXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0ucmVmbGVjdCxcbiAgICAgICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4OiBudW1iZXIgPVxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDtcbiAgICAgICAgY29uc3Qgb3V0UGFyYW1ldGVyVmFsdWU6IEZsb2F0MzJBcnJheSA9XG4gICAgICAgICAgIUZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UgJiYgJ3N1YmFycmF5JyBpbiBGbG9hdDMyQXJyYXkucHJvdG90eXBlXG4gICAgICAgICAgICA/IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZS5zdWJhcnJheShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSAvLyDlgKTmuKHjgZfjgZnjgovjgZ/jgoHjgIFKU09OLnBhcnNlLCBKU09OLnN0cmluZ2lmeVxuICAgICAgICAgICAgOiBwYXJhbWV0ZXJWYWx1ZS5zbGljZShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KTtcblxuICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICBvdXRQYXJhbWV0ZXJWYWx1ZSxcbiAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIG91dHB1dFZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyDlgKTjgpLlj43mmKBcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4LCBvdXRQYXJhbUluZGV4ID0gMDtcbiAgICAgICAgICBvZmZzZXQgPCBwYXJhbWV0ZXJWYWx1ZS5sZW5ndGg7XG4gICAgICAgICAgb2Zmc2V0KyssIG91dFBhcmFtSW5kZXgrK1xuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVtvZmZzZXRdID0gb3V0UGFyYW1ldGVyVmFsdWVbb3V0UGFyYW1JbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kq44OX44K344On44Oz44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBvcHRpb25zIOOCquODl+OCt+ODp+ODs1xuICAgKi9cbiAgcHVibGljIHNldE9wdGlvbnMob3B0aW9uczogT3B0aW9ucyk6IHZvaWQge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCquODl+OCt+ODp+ODs+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOOCquODl+OCt+ODp+ODs1xuICAgKi9cbiAgcHVibGljIGdldE9wdGlvbigpOiBPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gbnVsbDtcblxuICAgIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLl9vcHRpb25zID0gbmV3IE9wdGlvbnMoKTtcbiAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueSA9IC0xLjA7XG4gICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5LnggPSAwO1xuICAgIHRoaXMuX29wdGlvbnMud2luZC54ID0gMDtcbiAgICB0aGlzLl9vcHRpb25zLndpbmQueSA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gdm9pZCAwO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIHBoeXNpY3MzLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICogQHBhcmFtIHBoeXNpY3NKc29uIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2UocGh5c2ljc0pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gbmV3IEN1YmlzbVBoeXNpY3NSaWcoKTtcblxuICAgIGxldCBqc29uOiBDdWJpc21QaHlzaWNzSnNvbiA9IG5ldyBDdWJpc21QaHlzaWNzSnNvbihwaHlzaWNzSnNvbiwgc2l6ZSk7XG5cbiAgICB0aGlzLl9waHlzaWNzUmlnLmdyYXZpdHkgPSBqc29uLmdldEdyYXZpdHkoKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLndpbmQgPSBqc29uLmdldFdpbmQoKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50ID0ganNvbi5nZXRTdWJSaWdDb3VudCgpO1xuXG4gICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy51cGRhdGVTaXplKFxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCxcbiAgICAgIEN1YmlzbVBoeXNpY3NTdWJSaWcsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRUb3RhbElucHV0Q291bnQoKSxcbiAgICAgIEN1YmlzbVBoeXNpY3NJbnB1dCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRUb3RhbE91dHB1dENvdW50KCksXG4gICAgICBDdWJpc21QaHlzaWNzT3V0cHV0LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0VmVydGV4Q291bnQoKSxcbiAgICAgIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgbGV0IGlucHV0SW5kZXggPSAwLFxuICAgICAgb3V0cHV0SW5kZXggPSAwLFxuICAgICAgcGFydGljbGVJbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgIGlcbiAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1pbmltdW1WYWx1ZShcbiAgICAgICAgaVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgIGlcbiAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1heGltdW1WYWx1ZShcbiAgICAgICAgaVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgIGlcbiAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQgPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShcbiAgICAgICAgaVxuICAgICAgKTtcblxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgaVxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgaVxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgaVxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUuZGVmYWx1dCA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKGkpO1xuXG4gICAgICAvLyBJbnB1dFxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50ID0ganNvbi5nZXRJbnB1dENvdW50KGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlSW5wdXRJbmRleCA9IGlucHV0SW5kZXg7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50OyArK2opIHtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS53ZWlnaHQgPSBqc29uLmdldElucHV0V2VpZ2h0KFxuICAgICAgICAgIGksXG4gICAgICAgICAgalxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICApLnJlZmxlY3QgPSBqc29uLmdldElucHV0UmVmbGVjdChpLCBqKTtcblxuICAgICAgICBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWSkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnQW5nbGUpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlLnRhcmdldFR5cGUgPVxuICAgICAgICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlcjtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgKS5zb3VyY2UuaWQgPSBqc29uLmdldElucHV0U291cmNlSWQoaSwgaik7XG4gICAgICB9XG4gICAgICBpbnB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDtcblxuICAgICAgLy8gT3V0cHV0XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50ID0ganNvbi5nZXRPdXRwdXRDb3VudChpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuYmFzZU91dHB1dEluZGV4ID0gb3V0cHV0SW5kZXg7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgKS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgKS52ZXJ0ZXhJbmRleCA9IGpzb24uZ2V0T3V0cHV0VmVydGV4SW5kZXgoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgKS5hbmdsZVNjYWxlID0ganNvbi5nZXRPdXRwdXRBbmdsZVNjYWxlKGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICkud2VpZ2h0ID0ganNvbi5nZXRPdXRwdXRXZWlnaHQoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLnRhcmdldFR5cGUgPVxuICAgICAgICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlcjtcblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICkuZGVzdGluYXRpb24uaWQgPSBqc29uLmdldE91dHB1dERlc3RpbmF0aW9uSWQoaSwgaik7XG5cbiAgICAgICAgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9YO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0VmFsdWUgPSBnZXRPdXRwdXRUcmFuc2xhdGlvblg7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5nZXRTY2FsZSA9IGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25YO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1kpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0VmFsdWUgPSBnZXRPdXRwdXRUcmFuc2xhdGlvblk7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5nZXRTY2FsZSA9IGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ0FuZ2xlKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5nZXRWYWx1ZSA9IGdldE91dHB1dEFuZ2xlO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0U2NhbGUgPSBnZXRPdXRwdXRTY2FsZUFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICApLnJlZmxlY3QgPSBqc29uLmdldE91dHB1dFJlZmxlY3QoaSwgaik7XG4gICAgICB9XG4gICAgICBvdXRwdXRJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50O1xuXG4gICAgICAvLyBQYXJ0aWNsZVxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50ID0ganNvbi5nZXRQYXJ0aWNsZUNvdW50KGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlUGFydGljbGVJbmRleCA9IHBhcnRpY2xlSW5kZXg7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50OyArK2opIHtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgcGFydGljbGVJbmRleCArIGpcbiAgICAgICAgKS5tb2JpbGl0eSA9IGpzb24uZ2V0UGFydGljbGVNb2JpbGl0eShpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgcGFydGljbGVJbmRleCArIGpcbiAgICAgICAgKS5kZWxheSA9IGpzb24uZ2V0UGFydGljbGVEZWxheShpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgcGFydGljbGVJbmRleCArIGpcbiAgICAgICAgKS5hY2NlbGVyYXRpb24gPSBqc29uLmdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxuICAgICAgICApLnJhZGl1cyA9IGpzb24uZ2V0UGFydGljbGVSYWRpdXMoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KFxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXG4gICAgICAgICkucG9zaXRpb24gPSBqc29uLmdldFBhcnRpY2xlUG9zaXRpb24oaSwgaik7XG4gICAgICB9XG5cbiAgICAgIHBhcnRpY2xlSW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50O1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgICBqc29uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbjgZnjgotcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGxldCBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdO1xuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICBsZXQgcmFkaXVzOiBDdWJpc21WZWN0b3IyO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgKSB7XG4gICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgIHN0cmFuZCA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChjdXJyZW50U2V0dGluZy5iYXNlUGFydGljbGVJbmRleCk7XG5cbiAgICAgIC8vIEluaXRpYWxpemUgdGhlIHRvcCBvZiBwYXJ0aWNsZS5cbiAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICBzdHJhbmRbMF0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICApO1xuICAgICAgc3RyYW5kWzBdLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAtMS4wKTtcbiAgICAgIHN0cmFuZFswXS5sYXN0R3Jhdml0eS55ICo9IC0xLjA7XG4gICAgICBzdHJhbmRbMF0udmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICBzdHJhbmRbMF0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgICAgIC8vIEluaXRpYWxpemUgcGFyaXRjbGVzLlxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50OyArK2kpIHtcbiAgICAgICAgcmFkaXVzID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICByYWRpdXMueSA9IHN0cmFuZFtpXS5yYWRpdXM7XG4gICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICBzdHJhbmRbaSAtIDFdLmluaXRpYWxQb3NpdGlvbi54ICsgcmFkaXVzLngsXG4gICAgICAgICAgc3RyYW5kW2kgLSAxXS5pbml0aWFsUG9zaXRpb24ueSArIHJhZGl1cy55XG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICAgKTtcbiAgICAgICAgc3RyYW5kW2ldLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICAgKTtcbiAgICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAtMS4wKTtcbiAgICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5LnkgKj0gLTEuMDtcbiAgICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICBzdHJhbmRbaV0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3BoeXNpY3NSaWc6IEN1YmlzbVBoeXNpY3NSaWc7IC8vIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICBfb3B0aW9uczogT3B0aW9uczsgLy8g44Kq44OX44K344On44OzXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu44Kq44OX44K344On44OzXG4gKi9cbmV4cG9ydCBjbGFzcyBPcHRpb25zIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43lipvmlrnlkJFcbiAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKo44Gu5pa55ZCRXG59XG5cbi8qKlxuICogR2V0cyBzaWduLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBFdmFsdWF0aW9uIHRhcmdldCB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIFNpZ24gb2YgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNpZ24odmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gIGxldCByZXQgPSAwO1xuXG4gIGlmICh2YWx1ZSA+IDAuMCkge1xuICAgIHJldCA9IDE7XG4gIH0gZWxzZSBpZiAodmFsdWUgPCAwLjApIHtcbiAgICByZXQgPSAtMTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRUcmFuc2xhdGlvbi54ICs9XG4gICAgbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgICB2YWx1ZSxcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgIGlzSW52ZXJ0ZWRcbiAgICApICogd2VpZ2h0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRUcmFuc2xhdGlvbi55ICs9XG4gICAgbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgICB2YWx1ZSxcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgIGlzSW52ZXJ0ZWRcbiAgICApICogd2VpZ2h0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnB1dEFuZ2xlRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphaXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHdlaWdodDogbnVtYmVyXG4pOiB2b2lkIHtcbiAgdGFyZ2V0QW5nbGUuYW5nbGUgKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFRyYW5zbGF0aW9uWChcbiAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuKTogbnVtYmVyIHtcbiAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi54O1xuXG4gIGlmIChpc0ludmVydGVkKSB7XG4gICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0VHJhbnNsYXRpb25ZKFxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4pOiBudW1iZXIge1xuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLnk7XG5cbiAgaWYgKGlzSW52ZXJ0ZWQpIHtcbiAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICB9XG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0QW5nbGUoXG4gIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbik6IG51bWJlciB7XG4gIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuXG4gIGlmIChwYXJ0aWNsZUluZGV4ID49IDIpIHtcbiAgICBwYXJlbnRHcmF2aXR5ID0gcGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi5zdWJzdHJhY3QoXG4gICAgICBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDJdLnBvc2l0aW9uXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRHcmF2aXR5ID0gcGFyZW50R3Jhdml0eS5tdWx0aXBseUJ5U2NhbGVyKC0xLjApO1xuICB9XG5cbiAgb3V0cHV0VmFsdWUgPSBDdWJpc21NYXRoLmRpcmVjdGlvblRvUmFkaWFuKHBhcmVudEdyYXZpdHksIHRyYW5zbGF0aW9uKTtcblxuICBpZiAoaXNJbnZlcnRlZCkge1xuICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmdlVmFsdWUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KG1pbiwgbWF4KTtcbiAgY29uc3QgbWluVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKG1pbiwgbWF4KTtcblxuICByZXR1cm4gQ3ViaXNtTWF0aC5hYnMobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuICByZXR1cm4gbWluVmFsdWUgKyBnZXRSYW5nZVZhbHVlKG1pbiwgbWF4KSAvIDIuMDtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblgoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS54KSk7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZKFxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICBhbmdsZVNjYWxlOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRyYW5zbGF0aW9uU2NhbGUueSkpO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRTY2FsZUFuZ2xlKFxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICBhbmdsZVNjYWxlOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFuZ2xlU2NhbGUpKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHBhcnRpY2xlcy5cbiAqXG4gKiBAcGFyYW0gc3RyYW5kICAgICAgICAgICAgICAgIFRhcmdldCBhcnJheSBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSBzdHJhbmRDb3VudCAgICAgICAgICAgQ291bnQgb2YgcGFydGljbGUuXG4gKiBAcGFyYW0gdG90YWxUcmFuc2xhdGlvbiAgICAgIFRvdGFsIHRyYW5zbGF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHRvdGFsQW5nbGUgICAgICAgICAgICBUb3RhbCBhbmdsZS5cbiAqIEBwYXJhbSB3aW5kRGlyZWN0aW9uICAgICAgICAgRGlyZWN0aW9uIG9mIFdpbmQuXG4gKiBAcGFyYW0gdGhyZXNob2xkVmFsdWUgICAgICAgIFRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbiAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgICAgRGVsdGEgdGltZS5cbiAqIEBwYXJhbSBhaXJSZXNpc3RhbmNlICAgICAgICAgQWlyIHJlc2lzdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcnRpY2xlcyhcbiAgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgc3RyYW5kQ291bnQ6IG51bWJlcixcbiAgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdG90YWxBbmdsZTogbnVtYmVyLFxuICB3aW5kRGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0aHJlc2hvbGRWYWx1ZTogbnVtYmVyLFxuICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXG4gIGFpclJlc2lzdGFuY2U6IG51bWJlclxuKSB7XG4gIGxldCB0b3RhbFJhZGlhbjogbnVtYmVyO1xuICBsZXQgZGVsYXk6IG51bWJlcjtcbiAgbGV0IHJhZGlhbjogbnVtYmVyO1xuICBsZXQgY3VycmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7XG4gIGxldCBkaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gIGxldCB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgbGV0IGZvcmNlOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICBsZXQgbmV3RGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuXG4gIHN0cmFuZFswXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueCxcbiAgICB0b3RhbFRyYW5zbGF0aW9uLnlcbiAgKTtcblxuICB0b3RhbFJhZGlhbiA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKHRvdGFsQW5nbGUpO1xuICBjdXJyZW50R3Jhdml0eSA9IEN1YmlzbU1hdGgucmFkaWFuVG9EaXJlY3Rpb24odG90YWxSYWRpYW4pO1xuICBjdXJyZW50R3Jhdml0eS5ub3JtYWxpemUoKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmFuZENvdW50OyArK2kpIHtcbiAgICBzdHJhbmRbaV0uZm9yY2UgPSBjdXJyZW50R3Jhdml0eVxuICAgICAgLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLmFjY2VsZXJhdGlvbilcbiAgICAgIC5hZGQod2luZERpcmVjdGlvbik7XG5cbiAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCxcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi55XG4gICAgKTtcblxuICAgIGRlbGF5ID0gc3RyYW5kW2ldLmRlbGF5ICogZGVsdGFUaW1lU2Vjb25kcyAqIDMwLjA7XG5cbiAgICBkaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuXG4gICAgcmFkaWFuID1cbiAgICAgIEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4oc3RyYW5kW2ldLmxhc3RHcmF2aXR5LCBjdXJyZW50R3Jhdml0eSkgL1xuICAgICAgYWlyUmVzaXN0YW5jZTtcblxuICAgIGRpcmVjdGlvbi54ID1cbiAgICAgIEN1YmlzbU1hdGguY29zKHJhZGlhbikgKiBkaXJlY3Rpb24ueCAtXG4gICAgICBkaXJlY3Rpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZGlhbik7XG4gICAgZGlyZWN0aW9uLnkgPVxuICAgICAgQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKSAqIGRpcmVjdGlvbi54ICtcbiAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkaWFuKTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKGRpcmVjdGlvbik7XG5cbiAgICB2ZWxvY2l0eSA9IHN0cmFuZFtpXS52ZWxvY2l0eS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcbiAgICBmb3JjZSA9IHN0cmFuZFtpXS5mb3JjZS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5hZGQodmVsb2NpdHkpLmFkZChmb3JjZSk7XG5cbiAgICBuZXdEaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuICAgIG5ld0RpcmVjdGlvbi5ub3JtYWxpemUoKTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKFxuICAgICAgbmV3RGlyZWN0aW9uLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLnJhZGl1cylcbiAgICApO1xuXG4gICAgaWYgKEN1YmlzbU1hdGguYWJzKHN0cmFuZFtpXS5wb3NpdGlvbi54KSA8IHRocmVzaG9sZFZhbHVlKSB7XG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCA9IDAuMDtcbiAgICB9XG5cbiAgICBpZiAoZGVsYXkgIT0gMC4wKSB7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpXS5sYXN0UG9zaXRpb24pO1xuICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5LmRpdmlzaW9uQnlTY2FsYXIoZGVsYXkpO1xuICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoXG4gICAgICAgIHN0cmFuZFtpXS5tb2JpbGl0eVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBzdHJhbmRbaV0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICBjdXJyZW50R3Jhdml0eS54LFxuICAgICAgY3VycmVudEdyYXZpdHkueVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGVzIG91dHB1dCBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWUgICAgICAgICAgICBUYXJnZXQgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlTWluaW11bSAgICAgTWluaW11bSBvZiBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWVNYXhpbXVtICAgICBNYXhpbXVtIG9mIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSB0cmFuc2xhdGlvbiAgICAgICAgICAgICAgIFRyYW5zbGF0aW9uIHZhbHVlLlxuICovXG5mdW5jdGlvbiB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgcGFyYW1ldGVyVmFsdWU6IEZsb2F0MzJBcnJheSxcbiAgcGFyYW1ldGVyVmFsdWVNaW5pbXVtOiBudW1iZXIsXG4gIHBhcmFtZXRlclZhbHVlTWF4aW11bTogbnVtYmVyLFxuICB0cmFuc2xhdGlvbjogbnVtYmVyLFxuICBvdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXRcbik6IHZvaWQge1xuICBsZXQgb3V0cHV0U2NhbGU6IG51bWJlcjtcbiAgbGV0IHZhbHVlOiBudW1iZXI7XG4gIGxldCB3ZWlnaHQ6IG51bWJlcjtcblxuICBvdXRwdXRTY2FsZSA9IG91dHB1dC5nZXRTY2FsZShvdXRwdXQudHJhbnNsYXRpb25TY2FsZSwgb3V0cHV0LmFuZ2xlU2NhbGUpO1xuXG4gIHZhbHVlID0gdHJhbnNsYXRpb24gKiBvdXRwdXRTY2FsZTtcblxuICBpZiAodmFsdWUgPCBwYXJhbWV0ZXJWYWx1ZU1pbmltdW0pIHtcbiAgICBpZiAodmFsdWUgPCBvdXRwdXQudmFsdWVCZWxvd01pbmltdW0pIHtcbiAgICAgIG91dHB1dC52YWx1ZUJlbG93TWluaW11bSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVNaW5pbXVtO1xuICB9IGVsc2UgaWYgKHZhbHVlID4gcGFyYW1ldGVyVmFsdWVNYXhpbXVtKSB7XG4gICAgaWYgKHZhbHVlID4gb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtKSB7XG4gICAgICBvdXRwdXQudmFsdWVFeGNlZWRlZE1heGltdW0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWF4aW11bTtcbiAgfVxuXG4gIHdlaWdodCA9IG91dHB1dC53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xuXG4gIGlmICh3ZWlnaHQgPj0gMS4wKSB7XG4gICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlWzBdICogKDEuMCAtIHdlaWdodCkgKyB2YWx1ZSAqIHdlaWdodDtcbiAgICBwYXJhbWV0ZXJWYWx1ZVswXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW06IG51bWJlcixcbiAgcGFyYW1ldGVyRGVmYXVsdDogbnVtYmVyLFxuICBub3JtYWxpemVkTWluaW11bTogbnVtYmVyLFxuICBub3JtYWxpemVkTWF4aW11bTogbnVtYmVyLFxuICBub3JtYWxpemVkRGVmYXVsdDogbnVtYmVyLFxuICBpc0ludmVydGVkOiBib29sZWFuXG4pIHtcbiAgbGV0IHJlc3VsdCA9IDAuMDtcblxuICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgocGFyYW1ldGVyTWF4aW11bSwgcGFyYW1ldGVyTWluaW11bSk7XG5cbiAgaWYgKG1heFZhbHVlIDwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IG1heFZhbHVlO1xuICB9XG5cbiAgY29uc3QgbWluVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKHBhcmFtZXRlck1heGltdW0sIHBhcmFtZXRlck1pbmltdW0pO1xuXG4gIGlmIChtaW5WYWx1ZSA+IHZhbHVlKSB7XG4gICAgdmFsdWUgPSBtaW5WYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IG1pbk5vcm1WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4oXG4gICAgbm9ybWFsaXplZE1pbmltdW0sXG4gICAgbm9ybWFsaXplZE1heGltdW1cbiAgKTtcbiAgY29uc3QgbWF4Tm9ybVZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChcbiAgICBub3JtYWxpemVkTWluaW11bSxcbiAgICBub3JtYWxpemVkTWF4aW11bVxuICApO1xuICBjb25zdCBtaWRkbGVOb3JtVmFsdWU6IG51bWJlciA9IG5vcm1hbGl6ZWREZWZhdWx0O1xuXG4gIGNvbnN0IG1pZGRsZVZhbHVlOiBudW1iZXIgPSBnZXREZWZhdWx0VmFsdWUobWluVmFsdWUsIG1heFZhbHVlKTtcbiAgY29uc3QgcGFyYW1WYWx1ZTogbnVtYmVyID0gdmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICBzd2l0Y2ggKHNpZ24ocGFyYW1WYWx1ZSkpIHtcbiAgICBjYXNlIDE6IHtcbiAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1heE5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgIGNvbnN0IHBMZW5ndGg6IG51bWJlciA9IG1heFZhbHVlIC0gbWlkZGxlVmFsdWU7XG5cbiAgICAgIGlmIChwTGVuZ3RoICE9IDAuMCkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbVZhbHVlICogKG5MZW5ndGggLyBwTGVuZ3RoKTtcbiAgICAgICAgcmVzdWx0ICs9IG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgLTE6IHtcbiAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1pbk5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgIGNvbnN0IHBMZW5ndGg6IG51bWJlciA9IG1pblZhbHVlIC0gbWlkZGxlVmFsdWU7XG5cbiAgICAgIGlmIChwTGVuZ3RoICE9IDAuMCkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbVZhbHVlICogKG5MZW5ndGggLyBwTGVuZ3RoKTtcbiAgICAgICAgcmVzdWx0ICs9IG1pZGRsZU5vcm1WYWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgMDoge1xuICAgICAgcmVzdWx0ID0gbWlkZGxlTm9ybVZhbHVlO1xuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzSW52ZXJ0ZWQgPyByZXN1bHQgOiByZXN1bHQgKiAtMS4wO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzID0gJC5DdWJpc21QaHlzaWNzO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzID0gJC5DdWJpc21QaHlzaWNzO1xuICBleHBvcnQgY29uc3QgT3B0aW9ucyA9ICQuT3B0aW9ucztcbiAgZXhwb3J0IHR5cGUgT3B0aW9ucyA9ICQuT3B0aW9ucztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvY3ViaXNtdmVjdG9yMic7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu6YGp55So5YWI44Gu56iu6aGeXG4gKi9cbmV4cG9ydCBlbnVtIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlIHtcbiAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBpumBqeeUqFxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+OBrueorumhnlxuICovXG5leHBvcnQgZW51bSBDdWJpc21QaHlzaWNzU291cmNlIHtcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9YLCAvLyBY6Lu444Gu5L2N572u44GL44KJXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2VfWSwgLy8gWei7uOOBruS9jee9ruOBi+OCiVxuICBDdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlIC8vIOinkuW6puOBi+OCiVxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7liptcbiAqXG4gKiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7lipvjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5YqbXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciB7XG4gIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/XG4gIHRhcmdldFR5cGU6IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlOyAvLyDpgannlKjlhYjjga7nqK7poZ5cbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mraPopo/ljJbmg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIHtcbiAgbWluaW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKRcbiAgbWF4aW11bTogbnVtYmVyOyAvLyDmnIDlsI/lgKRcbiAgZGVmYWx1dDogbnVtYmVyOyAvLyDjg4fjg5Xjgqnjg6vjg4jlgKRcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mvJTnrpflp5Tkvb/nlKjjgZnjgovniannkIbngrnjga7mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMuZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICBpbml0aWFsUG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOWIneacn+S9jee9rlxuICBtb2JpbGl0eTogbnVtYmVyOyAvLyDli5XjgY3jgoTjgZnjgZVcbiAgZGVsYXk6IG51bWJlcjsgLy8g6YGF44KMXG4gIGFjY2VsZXJhdGlvbjogbnVtYmVyOyAvLyDliqDpgJ/luqZcbiAgcmFkaXVzOiBudW1iZXI7IC8vIOi3nembolxuICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu5L2N572uXG4gIGxhc3RQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu5L2N572uXG4gIGxhc3RHcmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7ph43liptcbiAgZm9yY2U6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xuICB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu6YCf5bqmXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzU3ViUmlnIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uUG9zaXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcbiAgICB0aGlzLm5vcm1hbGl6YXRpb25BbmdsZSA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xuICB9XG4gIGlucHV0Q291bnQ6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5YCL5pWwXG4gIG91dHB1dENvdW50OiBudW1iZXI7IC8vIOWHuuWKm+OBruWAi+aVsFxuICBwYXJ0aWNsZUNvdW50OiBudW1iZXI7IC8vIOeJqeeQhueCueOBruWAi+aVsFxuICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAvLyDlhaXlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgYmFzZU91dHB1dEluZGV4OiBudW1iZXI7IC8vIOWHuuWKm+OBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBiYXNlUGFydGljbGVJbmRleDogbnVtYmVyOyAvLyDniannkIbngrnjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxufVxuXG4vKipcbiAqIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICogQHBhcmFtIHRhcmdldFRyYW5zbGF0aW9uICAgICAvLyDmvJTnrpfntZDmnpzjga7np7vli5XlgKRcbiAqIEBwYXJhbSB0YXJnZXRBbmdsZSAgICAgICAgICAgLy8g5ryU566X57WQ5p6c44Gu6KeS5bqmXG4gKiBAcGFyYW0gdmFsdWUgICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBruWApFxuICogQHBhcmFtIHBhcmFtZXRlck1pbmltdW5WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcbiAqIEBwYXJhbSBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXG4gKiBAcGFyYW0gcGFyYW1ldGVyRGVmYXVsdFZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICogQHBhcmFtIG5vcm1hbGl6YXRpb25Qb3NpdGlvbiAvLyDmraPopo/ljJbjgZXjgozjgZ/kvY3nva5cbiAqIEBwYXJhbSBub3JtYWxpemF0aW9uQW5nbGUgICAgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXG4gKiBAcGFyYW0gaXNJbnZlcnRlZCAgICAgICAgICAgIC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi++8n1xuICogQHBhcmFtIHdlaWdodCAgICAgICAgICAgICAgICAvLyDph43jgb9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW5WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHdlaWdodDogbnVtYmVyXG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24g56e75YuV5YCkXG4gKiBAcGFyYW0gcGFydGljbGVzIOeJqeeQhueCueOBruODquOCueODiFxuICogQHBhcmFtIGlzSW52ZXJ0ZWQg5YCk44GM5Y+N5pig44GV44KM44Gm44GE44KL44GLXG4gKiBAcGFyYW0gcGFyZW50R3Jhdml0eSDph43liptcbiAqIEByZXR1cm4g5YCkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1ZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuICApOiBudW1iZXI7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb25TY2FsZSDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAqIEBwYXJhbSBhbmdsZVNjYWxlICAgIOinkuW6puOBruOCueOCseODvOODq1xuICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzU2NhbGVHZXR0ZXIge1xuICAodHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMiwgYW5nbGVTY2FsZTogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0lucHV0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xuICB9XG4gIHNvdXJjZTogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/XG4gIHNvdXJjZVBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IG51bWJlcjsgLy8g5YWl5Yqb44Gu56iu6aGeXG4gIHJlZmxlY3Q6IGJvb2xlYW47IC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICBnZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWU6IG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7IC8vIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+WApOOBruWPluW+l+mWouaVsFxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLFcbiAqXG4gKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcbiAgICB0aGlzLnRyYW5zbGF0aW9uU2NhbGUgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIGRlc3RpbmF0aW9uOiBDdWJpc21QaHlzaWNzUGFyYW1ldGVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr9cbiAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgdmVydGV4SW5kZXg6IG51bWJlcjsgLy8g5oyv44KK5a2Q44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjI7IC8vIOenu+WLleWApOOBruOCueOCseODvOODq1xuICBhbmdsZVNjYWxlOiBudW1iZXI7IC8vIOinkuW6puOBruOCueOCseODvOODq1xuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IEN1YmlzbVBoeXNpY3NTb3VyY2U7IC8vIOWHuuWKm+OBrueorumhnlxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgdmFsdWVCZWxvd01pbmltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCk44KS5LiL5Zue44Gj44Gf5pmC44Gu5YCkXG4gIHZhbHVlRXhjZWVkZWRNYXhpbXVtOiBudW1iZXI7IC8vIOacgOWkp+WApOOCkuOBk+OBiOOBn+aZguOBruWApFxuICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbBcbiAgZ2V0U2NhbGU6IHBoeXNpY3NTY2FsZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu44K544Kx44O844Or5YCk44Gu5Y+W5b6X6Zai5pWwXG59XG5cbi8qKlxuICogQGJyaWVmIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICpcbiAqIOeJqeeQhua8lOeul+OBruODh+ODvOOCv+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1JpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+KCk7XG4gICAgdGhpcy5pbnB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NJbnB1dD4oKTtcbiAgICB0aGlzLm91dHB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+KCk7XG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT4oKTtcbiAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIHN1YlJpZ0NvdW50OiBudW1iZXI7IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruWAi+aVsFxuICBzZXR0aW5nczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIbjga7jg6rjgrnjg4hcbiAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgLy8g54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXG4gIG91dHB1dHM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzT3V0cHV0PjsgLy8g54mp55CG5ryU566X44Gu5Ye65Yqb44Gu44Oq44K544OIXG4gIHBhcnRpY2xlczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT47IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruODquOCueODiFxuICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcbiAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKoXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXBoeXNpY3NpbnRlcm5hbCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc0lucHV0ID0gJC5DdWJpc21QaHlzaWNzSW5wdXQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NJbnB1dCA9ICQuQ3ViaXNtUGh5c2ljc0lucHV0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSAkLkN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiA9ICQuQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzT3V0cHV0ID0gJC5DdWJpc21QaHlzaWNzT3V0cHV0O1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzT3V0cHV0ID0gJC5DdWJpc21QaHlzaWNzT3V0cHV0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciA9ICQuQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciA9ICQuQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSA9ICQuQ3ViaXNtUGh5c2ljc1BhcnRpY2xlO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzUGFydGljbGUgPSAkLkN1YmlzbVBoeXNpY3NQYXJ0aWNsZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NSaWcgPSAkLkN1YmlzbVBoeXNpY3NSaWc7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NSaWcgPSAkLkN1YmlzbVBoeXNpY3NSaWc7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzU291cmNlID0gJC5DdWJpc21QaHlzaWNzU291cmNlO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzU291cmNlID0gJC5DdWJpc21QaHlzaWNzU291cmNlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1N1YlJpZyA9ICQuQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1N1YlJpZyA9ICQuQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlID0gJC5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUgPSAkLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlO1xuICBleHBvcnQgY29uc3QgUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMgPSAkLlBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzO1xuICBleHBvcnQgdHlwZSBQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyA9ICQuUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXM7XG4gIGV4cG9ydCB0eXBlIG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXIgPSAkLm5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7XG4gIGV4cG9ydCB0eXBlIHBoeXNpY3NTY2FsZUdldHRlciA9ICQucGh5c2ljc1NjYWxlR2V0dGVyO1xuICBleHBvcnQgdHlwZSBwaHlzaWNzVmFsdWVHZXR0ZXIgPSAkLnBoeXNpY3NWYWx1ZUdldHRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vLyBKU09OIGtleXNcbmNvbnN0IFBvc2l0aW9uID0gJ1Bvc2l0aW9uJztcbmNvbnN0IFggPSAnWCc7XG5jb25zdCBZID0gJ1knO1xuY29uc3QgQW5nbGUgPSAnQW5nbGUnO1xuY29uc3QgVHlwZSA9ICdUeXBlJztcbmNvbnN0IElkID0gJ0lkJztcblxuLy8gTWV0YVxuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IEVmZmVjdGl2ZUZvcmNlcyA9ICdFZmZlY3RpdmVGb3JjZXMnO1xuY29uc3QgVG90YWxJbnB1dENvdW50ID0gJ1RvdGFsSW5wdXRDb3VudCc7XG5jb25zdCBUb3RhbE91dHB1dENvdW50ID0gJ1RvdGFsT3V0cHV0Q291bnQnO1xuY29uc3QgUGh5c2ljc1NldHRpbmdDb3VudCA9ICdQaHlzaWNzU2V0dGluZ0NvdW50JztcbmNvbnN0IEdyYXZpdHkgPSAnR3Jhdml0eSc7XG5jb25zdCBXaW5kID0gJ1dpbmQnO1xuY29uc3QgVmVydGV4Q291bnQgPSAnVmVydGV4Q291bnQnO1xuXG4vLyBQaHlzaWNzU2V0dGluZ3NcbmNvbnN0IFBoeXNpY3NTZXR0aW5ncyA9ICdQaHlzaWNzU2V0dGluZ3MnO1xuY29uc3QgTm9ybWFsaXphdGlvbiA9ICdOb3JtYWxpemF0aW9uJztcbmNvbnN0IE1pbmltdW0gPSAnTWluaW11bSc7XG5jb25zdCBNYXhpbXVtID0gJ01heGltdW0nO1xuY29uc3QgRGVmYXVsdCA9ICdEZWZhdWx0JztcbmNvbnN0IFJlZmxlY3QgPSAnUmVmbGVjdCc7XG5jb25zdCBXZWlnaHQgPSAnV2VpZ2h0JztcblxuLy8gSW5wdXRcbmNvbnN0IElucHV0ID0gJ0lucHV0JztcbmNvbnN0IFNvdXJjZSA9ICdTb3VyY2UnO1xuXG4vLyBPdXRwdXRcbmNvbnN0IE91dHB1dCA9ICdPdXRwdXQnO1xuY29uc3QgU2NhbGUgPSAnU2NhbGUnO1xuY29uc3QgVmVydGV4SW5kZXggPSAnVmVydGV4SW5kZXgnO1xuY29uc3QgRGVzdGluYXRpb24gPSAnRGVzdGluYXRpb24nO1xuXG4vLyBQYXJ0aWNsZVxuY29uc3QgVmVydGljZXMgPSAnVmVydGljZXMnO1xuY29uc3QgTW9iaWxpdHkgPSAnTW9iaWxpdHknO1xuY29uc3QgRGVsYXkgPSAnRGVsYXknO1xuY29uc3QgUmFkaXVzID0gJ1JhZGl1cyc7XG5jb25zdCBBY2NlbGVyYXRpb24gPSAnQWNjZWxlcmF0aW9uJztcblxuLyoqXG4gKiBwaHlzaWNzMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGJ1ZmZlciBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gIH1cblxuICAvKipcbiAgICog6YeN5Yqb44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g6YeN5YqbXG4gICAqL1xuICBwdWJsaWMgZ2V0R3Jhdml0eSgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoR3Jhdml0eSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog6aKo44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g6aKoXG4gICAqL1xuICBwdWJsaWMgZ2V0V2luZCgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoV2luZClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0U3ViUmlnQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5nQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDlhaXlipvjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbElucHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsSW5wdXRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOWHuuWKm+OBrue3j+WQiOioiFxuICAgKi9cbiAgcHVibGljIGdldFRvdGFsT3V0cHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsT3V0cHV0Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRWZXJ0ZXhDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXhcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlZmF1bHQpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5YWl5Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lj43ou6JcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dFJlZmxlY3QoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgLnRvQm9vbGVhbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu56iu6aGeXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRUeXBlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgaW5wdXRJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUeXBlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+WFg+OBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvlhYPjga5JRFxuICAgKi9cbiAgcHVibGljIGdldElucHV0U291cmNlSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291cmNlKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0Q291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFZlcnRleEluZGV4KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0ZXhJbmRleClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xuICAgKi9cbiAgcHVibGljIGdldE91dHB1dEFuZ2xlU2NhbGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNjYWxlKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7ph43jgb/jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb5YWI44GuSUTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvlhYjjga5JRFxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dERlc3RpbmF0aW9uSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVzdGluYXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueorumhnlxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFR5cGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5Y+N6LuiXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0UmVmbGVjdChcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJlZmxlY3QpXG4gICAgICAudG9Cb29sZWFuKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+eUt+ioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlQ291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmVjdG9yKClcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YuV44GN44KE44GZ44GV44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5YuV44GN44KE44GZ44GVXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVNb2JpbGl0eShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb2JpbGl0eSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVEZWxheShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWxheSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5Yqg6YCf5bqm44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumlxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5Yqg6YCf5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVBY2NlbGVyYXRpb24oXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQWNjZWxlcmF0aW9uKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7ot53pm6Ljga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDniannkIbngrnjga7ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZVJhZGl1cyhcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSYWRpdXMpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruS9jee9ruOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZlcnRleEluZGUg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVQb3NpdGlvbihcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBfanNvbjogQ3ViaXNtSnNvbjsgLy8gcGh5c2ljczMuanNvbuODh+ODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc0pzb24gPSAkLkN1YmlzbVBoeXNpY3NKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSnNvbiA9ICQuQ3ViaXNtUGh5c2ljc0pzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5cbi8qKlxuICog44Oi44OH44Or5o+P55S744KS5Yem55CG44GZ44KL44Os44Oz44OA44OpXG4gKlxuICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdWJpc21SZW5kZXJlciB7XG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZfjgablj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbVJlbmRlcmVyIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcik6IHZvaWQge1xuICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KLXG4gICAqL1xuICBwdWJsaWMgZHJhd01vZGVsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdldE1vZGVsKCkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgdGhpcy5kb0RyYXdNb2RlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog6YWN5YiX44Gv6KSH6KO944GV44KM44KL44Gu44Gn44CB5YWD44Gu6YWN5YiX44Gv5aSW44Gn56C05qOE44GX44Gm6Imv44GEXG4gICAqIEBwYXJhbSBtYXRyaXg0NCBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc2V0TXZwTWF0cml4KG1hdHJpeDQ0OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5zZXRNYXRyaXgobWF0cml4NDQuZ2V0QXJyYXkoKSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgICovXG4gIHB1YmxpYyBnZXRNdnBNYXRyaXgoKTogQ3ViaXNtTWF0cml4NDQge1xuICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgovvvIgxLjDjgYzmqJnmupbjga7nirbmhYvvvIlcbiAgICogQHBhcmFtIHJlZCDotaTjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxuICAgKiBAcGFyYW0gYmx1ZSDpnZLjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGFscGhhIM6x44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0TW9kZWxDb2xvcihcbiAgICByZWQ6IG51bWJlcixcbiAgICBncmVlbjogbnVtYmVyLFxuICAgIGJsdWU6IG51bWJlcixcbiAgICBhbHBoYTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmIChyZWQgPCAwLjApIHtcbiAgICAgIHJlZCA9IDAuMDtcbiAgICB9IGVsc2UgaWYgKHJlZCA+IDEuMCkge1xuICAgICAgcmVkID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChncmVlbiA8IDAuMCkge1xuICAgICAgZ3JlZW4gPSAwLjA7XG4gICAgfSBlbHNlIGlmIChncmVlbiA+IDEuMCkge1xuICAgICAgZ3JlZW4gPSAxLjA7XG4gICAgfVxuXG4gICAgaWYgKGJsdWUgPCAwLjApIHtcbiAgICAgIGJsdWUgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChibHVlID4gMS4wKSB7XG4gICAgICBibHVlID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChhbHBoYSA8IDAuMCkge1xuICAgICAgYWxwaGEgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChhbHBoYSA+IDEuMCkge1xuICAgICAgYWxwaGEgPSAxLjA7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxDb2xvci5SID0gcmVkO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuRyA9IGdyZWVuO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuQiA9IGJsdWU7XG4gICAgdGhpcy5fbW9kZWxDb2xvci5BID0gYWxwaGE7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgosoMS4w44GM5qiZ5rqW44Gu54q25oWLKVxuICAgKlxuICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbENvbG9yKCk6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS44K744OD44OI44GZ44KLXG4gICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldElzUHJlbXVsdGlwbGllZEFscGhhKGVuYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZW5hYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDkuZfnrpfmuIjjgb/jga7OseacieWKuVxuICAgKiBAcmV0dXJuIGZhbHNlIOS5l+eul+a4iOOBv+OBrs6x54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNQcmVtdWx0aXBsaWVkQWxwaGEoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzQ3VsbGluZyA9IGN1bGxpbmc7XG4gIH1cblxuICAvKipcbiAgICog44Kr44Oq44Oz44Kw77yI54mH6Z2i5o+P55S777yJ44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KL44CCXG4gICAqIEByZXR1cm4gdHJ1ZSDjgqvjg6rjg7PjgrDmnInlirlcbiAgICogQHJldHVybiBmYWxzZSDjgqvjg6rjg7PjgrDnhKHlirlcbiAgICovXG4gIHB1YmxpYyBpc0N1bGxpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ3VsbGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog44OR44Op44Oh44O844K/5YCk44Gu5b2x6Z+/5bqm44Gv44Os44Oz44OA44Op44Gu5a6f6KOF44Gr5L6d5a2Y44GZ44KLXG4gICAqIEBwYXJhbSBuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIHNldEFuaXNvdHJvcHkobjogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYW5pc29ydG9weSA9IG47XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXG4gICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0QW5pc290cm9weSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9hbmlzb3J0b3B5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faXNDdWxsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZTtcbiAgICB0aGlzLl9hbmlzb3J0b3B5ID0gMC4wO1xuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbENvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuXG4gICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXG4gICAgdGhpcy5fbXZwTWF0cml4NHg0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbXZwTWF0cml4NHg0LmxvYWRJZGVudGl0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+aPj+eUu+OBruWun+ijhVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRvRHJhd01vZGVsKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi1xuICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcbiAgICogQHBhcmFtIHRleHR1cmVObyDmj4/nlLvjgZnjgovjg4bjgq/jgrnjg4Hjg6Pnlarlj7dcbiAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol6aCC54K544Gu44Kk44Oz44OH44OD44Kv44K56YWN5YiXXG4gICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkcmF3TWVzaChcbiAgICB0ZXh0dXJlTm86IG51bWJlcixcbiAgICBpbmRleENvdW50OiBudW1iZXIsXG4gICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSxcbiAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2U6IEZ1bmN0aW9uO1xuXG4gIHByb3RlY3RlZCBfbXZwTWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NDsgLy8gTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICBwcm90ZWN0ZWQgX21vZGVsQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcjsgLy8g44Oi44OH44Or6Ieq5L2T44Gu44Kr44Op44O877yIUkdCQe+8iVxuICBwcm90ZWN0ZWQgX2lzQ3VsbGluZzogYm9vbGVhbjsgLy8g44Kr44Oq44Oz44Kw44GM5pyJ5Yq544Gq44KJdHJ1ZVxuICBwcm90ZWN0ZWQgX2lzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuOyAvLyDkuZfnrpfmuIjjgb/OseOBquOCiXRydWVcbiAgcHJvdGVjdGVkIF9hbmlzb3J0b3B5OiBhbnk7IC8vIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv1xuICBwcm90ZWN0ZWQgX21vZGVsOiBDdWJpc21Nb2RlbDsgLy8g44Os44Oz44OA44Oq44Oz44Kw5a++6LGh44Gu44Oi44OH44OrXG59XG5cbmV4cG9ydCBlbnVtIEN1YmlzbUJsZW5kTW9kZSB7XG4gIEN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwgPSAwLCAvLyDpgJrluLhcbiAgQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlID0gMSwgLy8g5Yqg566XXG4gIEN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZSA9IDIgLy8g5LmX566XXG59XG5cbi8qKlxuICog44OG44Kv44K544OB44Oj44Gu6Imy44KSUkdCQeOBp+aJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5SID0gMS4wO1xuICAgIHRoaXMuRyA9IDEuMDtcbiAgICB0aGlzLkIgPSAxLjA7XG4gICAgdGhpcy5BID0gMS4wO1xuICB9XG5cbiAgUjogbnVtYmVyOyAvLyDotaTjg4Hjg6Pjg7Pjg43jg6tcbiAgRzogbnVtYmVyOyAvLyDnt5Hjg4Hjg6Pjg7Pjg43jg6tcbiAgQjogbnVtYmVyOyAvLyDpnZLjg4Hjg6Pjg7Pjg43jg6tcbiAgQTogbnVtYmVyOyAvLyDOseODgeODo+ODs+ODjeODq1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21yZW5kZXJlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtQmxlbmRNb2RlID0gJC5DdWJpc21CbGVuZE1vZGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUJsZW5kTW9kZSA9ICQuQ3ViaXNtQmxlbmRNb2RlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUmVuZGVyZXIgPSAkLkN1YmlzbVJlbmRlcmVyO1xuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJlciA9ICQuQ3ViaXNtUmVuZGVyZXI7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21UZXh0dXJlQ29sb3IgPSAkLkN1YmlzbVRleHR1cmVDb2xvcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVGV4dHVyZUNvbG9yID0gJC5DdWJpc21UZXh0dXJlQ29sb3I7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDb25zdGFudCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBjc21SZWN0IH0gZnJvbSAnLi4vdHlwZS9jc21yZWN0Zic7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Mb2dFcnJvciB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7XG4gIEN1YmlzbUJsZW5kTW9kZSxcbiAgQ3ViaXNtUmVuZGVyZXIsXG4gIEN1YmlzbVRleHR1cmVDb2xvclxufSBmcm9tICcuL2N1YmlzbXJlbmRlcmVyJztcblxuY29uc3QgQ29sb3JDaGFubmVsQ291bnQgPSA0OyAvLyDlrp/pqJPmmYLjgasx44OB44Oj44Oz44ON44Or44Gu5aC05ZCI44GvMeOAgVJHQuOBoOOBkeOBruWgtOWQiOOBrzPjgIHjgqLjg6vjg5XjgqHjgoLlkKvjgoHjgovloLTlkIjjga80XG5cbmNvbnN0IHNoYWRlckNvdW50ID0gMTA7IC8vIOOCt+OCp+ODvOODgOODvOOBruaVsCA9IOODnuOCueOCr+eUn+aIkOeUqCArICjpgJrluLjnlKggKyDliqDnrpcgKyDkuZfnrpcpICogKOODnuOCueOCr+eEoeOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieWPjei7ouOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiClcbmxldCBzX2luc3RhbmNlOiBDdWJpc21TaGFkZXJfV2ViR0w7XG5sZXQgc192aWV3cG9ydDogbnVtYmVyW107XG5sZXQgc19mYm86IFdlYkdMRnJhbWVidWZmZXI7XG5cbi8qKlxuICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5Yem55CG44KS5a6f6KGM44GZ44KL44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wge1xuICAvKipcbiAgICog44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBruODleODqeOCsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gY2hhbm5lbE5vIOOCq+ODqeODvOODgeODo+ODs+ODjeODq++8iFJHQkHvvInjga7nlarlj7fvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgICovXG4gIHB1YmxpYyBnZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vOiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiB0aGlzLl9jaGFubmVsQ29sb3JzLmF0KGNoYW5uZWxObyk7XG4gIH1cblxuICAvKipcbiAgICog44OG44Oz44Od44Op44Oq44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0TWFza1JlbmRlclRleHR1cmUoKTogV2ViR0xGcmFtZWJ1ZmZlciB7XG4gICAgbGV0IHJldDogV2ViR0xGcmFtZWJ1ZmZlciA9IDA7XG5cbiAgICAvLyDjg4bjg7Pjg53jg6njg6rjga5SZW5kZXJUZXh0dXJl44KS5Y+W5b6X44GZ44KLXG4gICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlICYmIHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmUgIT0gMCkge1xuICAgICAgLy8g5YmN5Zue5L2/44Gj44Gf44KC44Gu44KS6L+U44GZXG4gICAgICB0aGlzLl9tYXNrVGV4dHVyZS5mcmFtZU5vID0gdGhpcy5fY3VycmVudEZyYW1lTm87XG4gICAgICByZXQgPSB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlO1xuICAgIH1cblxuICAgIGlmIChyZXQgPT0gMCkge1xuICAgICAgLy8gRnJhbWVCdWZmZXJPYmplY3TjgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjgIHmlrDjgZfjgY/nlJ/miJDjgZnjgotcblxuICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44OQ44OD44OV44Kh44K144Kk44K644KS5Y+W5b6XXG4gICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuXG4gICAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuX2NvbG9yQnVmZmVyKTtcbiAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHNpemUsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuZ2wuUkdCQSxcbiAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsXG4gICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULFxuICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsXG4gICAgICAgIHRoaXMuZ2wuTElORUFSXG4gICAgICApO1xuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NQUdfRklMVEVSLFxuICAgICAgICB0aGlzLmdsLkxJTkVBUlxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgICAgcmV0ID0gdGhpcy5nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgcmV0KTtcbiAgICAgIHRoaXMuZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICAgIHRoaXMuZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgdGhpcy5fY29sb3JCdWZmZXIsXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzX2Zibyk7XG5cbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZShcbiAgICAgICAgdGhpcy5fY3VycmVudEZyYW1lTm8sXG4gICAgICAgIHJldFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdlYkdM44Os44Oz44OA44Oq44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBnbCBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgKi9cbiAgcHVibGljIHNldEdMKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i77yI44Oi44OH44Or5bqn5qiZ57O777yJ44KS6KiI566X44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHBhcmFtIGNsaXBwaW5nQ29udGV4dCDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBjYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHRcbiAgKTogdm9pZCB7XG4gICAgLy8g6KKr44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv77yI44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI77yJ44Gu5YWo5L2T44Gu55+p5b2iXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgLy8g44GT44Gu44Oe44K544Kv44GM5a6f6Zqb44Gr5b+F6KaB44GL5Yik5a6a44GZ44KLXG4gICAgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44KS5Yip55So44GZ44KL44CM5o+P55S744Kq44OW44K444Kn44Kv44OI44CN44GM44Gy44Go44Gk44Gn44KC5L2/55So5Y+v6IO944Gn44GC44KM44Gw44Oe44K544Kv44KS55Sf5oiQ44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgY29uc3QgY2xpcHBlZERyYXdDb3VudDogbnVtYmVyID1cbiAgICAgIGNsaXBwaW5nQ29udGV4dC5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoXG4gICAgICBsZXQgY2xpcHBlZERyYXdhYmxlSW5kZXggPSAwO1xuICAgICAgY2xpcHBlZERyYXdhYmxlSW5kZXggPCBjbGlwcGVkRHJhd0NvdW50O1xuICAgICAgY2xpcHBlZERyYXdhYmxlSW5kZXgrK1xuICAgICkge1xuICAgICAgLy8g44Oe44K544Kv44KS5L2/55So44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5o+P55S744GV44KM44KL55+p5b2i44KS5rGC44KB44KLXG4gICAgICBjb25zdCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPVxuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdFtjbGlwcGVkRHJhd2FibGVJbmRleF07XG5cbiAgICAgIGNvbnN0IGRyYXdhYmxlVmVydGV4Q291bnQ6IG51bWJlciA9IG1vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoXG4gICAgICAgIGRyYXdhYmxlSW5kZXhcbiAgICAgICk7XG4gICAgICBjb25zdCBkcmF3YWJsZVZlcnRleGVzOiBGbG9hdDMyQXJyYXkgPSBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKFxuICAgICAgICBkcmF3YWJsZUluZGV4XG4gICAgICApO1xuXG4gICAgICBsZXQgbWluWDogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBtaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IG1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICBsZXQgbWF4WTogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcblxuICAgICAgY29uc3QgbG9vcDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhDb3VudCAqIENvbnN0YW50LnZlcnRleFN0ZXA7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgcGk6IG51bWJlciA9IENvbnN0YW50LnZlcnRleE9mZnNldDtcbiAgICAgICAgcGkgPCBsb29wO1xuICAgICAgICBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgeDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhlc1twaV07XG4gICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGkgKyAxXTtcblxuICAgICAgICBpZiAoeCA8IG1pblgpIHtcbiAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA+IG1heFgpIHtcbiAgICAgICAgICBtYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDmnInlirnjgarngrnjgYzkuIDjgaTjgoLlj5bjgozjgarjgYvjgaPjgZ/jga7jgafjgrnjgq3jg4Pjg5dcbiAgICAgIGlmIChtaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxuICAgICAgaWYgKG1pblggPCBjbGlwcGVkRHJhd1RvdGFsTWluWCkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWCA9IG1pblg7XG4gICAgICB9XG4gICAgICBpZiAobWluWSA8IGNsaXBwZWREcmF3VG90YWxNaW5ZKSB7XG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNaW5ZID0gbWluWTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhYID4gY2xpcHBlZERyYXdUb3RhbE1heFgpIHtcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFggPSBtYXhYO1xuICAgICAgfVxuICAgICAgaWYgKG1heFkgPiBjbGlwcGVkRHJhd1RvdGFsTWF4WSkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWF4WSA9IG1heFk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGlwcGVkRHJhd1RvdGFsTWluWCA9PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC5oZWlnaHQgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9pc1VzaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgY29uc3QgaDogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFkgLSBjbGlwcGVkRHJhd1RvdGFsTWluWTtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueCA9IGNsaXBwZWREcmF3VG90YWxNaW5YO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gdztcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gaDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XG4gICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSA9IDI1NjtcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PigpO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtVGV4dHVyZUNvbG9yPigpO1xuICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwgPSBuZXcgY3NtUmVjdCgpO1xuICAgIHRoaXMuX3RtcE1hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX3RtcE1hdHJpeEZvck1hc2sgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbWFza1RleHR1cmUgPSBudWxsO1xuXG4gICAgbGV0IHRtcDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMS4wO1xuICAgIHRtcC5HID0gMC4wO1xuICAgIHRtcC5CID0gMC4wO1xuICAgIHRtcC5BID0gMC4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICB0bXAuUiA9IDAuMDtcbiAgICB0bXAuRyA9IDEuMDtcbiAgICB0bXAuQiA9IDAuMDtcbiAgICB0bXAuQSA9IDAuMDtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdG1wLlIgPSAwLjA7XG4gICAgdG1wLkcgPSAwLjA7XG4gICAgdG1wLkIgPSAxLjA7XG4gICAgdG1wLkEgPSAwLjA7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMC4wO1xuICAgIHRtcC5HID0gMC4wO1xuICAgIHRtcC5CID0gMC4wO1xuICAgIHRtcC5BID0gMS4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChpKSkge1xuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChpKS5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCB2b2lkIDApO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suc2V0KGksIG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG51bGw7XG5cbiAgICAvLyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXfjga9fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2vjgavjgYLjgovjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIfjgZfjgabjgYTjgovjgILkuIroqJjjga7lh6bnkIbjgavjgojjgoropoHntKDjgZTjgajjga5ERUxFVEXjga/kuI3opoHjgIJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LmdldFNpemUoKTsgaSsrKSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl9tYXNrVGV4dHVyZSkge1xuICAgICAgdGhpcy5nbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlKTtcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYW5uZWxDb2xvcnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBudWxsO1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XG4gICAgdGhpcy5nbC5kZWxldGVUZXh0dXJlKHRoaXMuX2NvbG9yQnVmZmVyKTtcbiAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oe44ON44O844K444Oj44Gu5Yid5pyf5YyW5Yem55CGXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSBkcmF3YWJsZUNvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGRyYXdhYmxlQ291bnRzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIGRyYXdhYmxlQ291bnQ6IG51bWJlcixcbiAgICBkcmF3YWJsZU1hc2tzOiBJbnQzMkFycmF5W10sXG4gICAgZHJhd2FibGVNYXNrQ291bnRzOiBJbnQzMkFycmF5XG4gICk6IHZvaWQge1xuICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuOBmeOBueOBpueZu+mMsuOBmeOCi1xuICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBr+OAgemAmuW4uOaVsOWAi+eoi+W6puOBq+mZkOWumuOBl+OBpuS9v+OBhuOCguOBruOBqOOBmeOCi1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgaSsrKSB7XG4gICAgICBpZiAoZHJhd2FibGVNYXNrQ291bnRzW2ldIDw9IDApIHtcbiAgICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GM5L2/55So44GV44KM44Gm44GE44Gq44GE44Ki44O844OI44Oh44OD44K344Ol77yI5aSa44GP44Gu5aC05ZCI5L2/55So44GX44Gq44GE77yJXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnB1c2hCYWNrKG51bGwpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8g5pei44Gr44GC44KLQ2xpcENvbnRleHTjgajlkIzjgZjjgYvjg4Hjgqfjg4Pjgq/jgZnjgotcbiAgICAgIGxldCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuZmluZFNhbWVDbGlwKFxuICAgICAgICBkcmF3YWJsZU1hc2tzW2ldLFxuICAgICAgICBkcmF3YWJsZU1hc2tDb3VudHNbaV1cbiAgICAgICk7XG4gICAgICBpZiAoY2xpcHBpbmdDb250ZXh0ID09IG51bGwpIHtcbiAgICAgICAgLy8g5ZCM5LiA44Gu44Oe44K544Kv44GM5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44Gv55Sf5oiQ44GZ44KLXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dCA9IG5ldyBDdWJpc21DbGlwcGluZ0NvbnRleHQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBkcmF3YWJsZU1hc2tzW2ldLFxuICAgICAgICAgIGRyYXdhYmxlTWFza0NvdW50c1tpXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBjbGlwcGluZ0NvbnRleHQuYWRkQ2xpcHBlZERyYXdhYmxlKGkpO1xuXG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLkvZzmiJDjgZnjgovjgILjg6Ljg4fjg6vmj4/nlLvmmYLjgavlrp/ooYzjgZnjgovjgIJcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gcmVuZGVyZXIg44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc2V0dXBDbGlwcGluZ0NvbnRleHQoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObysrO1xuXG4gICAgLy8g5YWo44Gm44Gu44Kv44Oq44OD44OU44Oz44Kw44KS55So5oSP44GZ44KLXG4gICAgLy8g5ZCM44GY44Kv44Oq44OD44OX77yI6KSH5pWw44Gu5aC05ZCI44Gv44G+44Go44KB44Gm5LiA44Gk44Gu44Kv44Oq44OD44OX77yJ44KS5L2/44GG5aC05ZCI44GvMeW6puOBoOOBkeioreWumuOBmeOCi1xuICAgIGxldCB1c2luZ0NsaXBDb3VudCA9IDA7XG4gICAgZm9yIChcbiAgICAgIGxldCBjbGlwSW5kZXggPSAwO1xuICAgICAgY2xpcEluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpO1xuICAgICAgY2xpcEluZGV4KytcbiAgICApIHtcbiAgICAgIC8vIDHjgaTjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgavplqLjgZfjgaZcbiAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgY2xpcEluZGV4XG4gICAgICApO1xuXG4gICAgICAvLyDjgZPjga7jgq/jg6rjg4Pjg5fjgpLliKnnlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLjgpLoqIjnrpdcbiAgICAgIHRoaXMuY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMobW9kZWwsIGNjKTtcblxuICAgICAgaWYgKGNjLl9pc1VzaW5nKSB7XG4gICAgICAgIHVzaW5nQ2xpcENvdW50Kys7IC8vIOS9v+eUqOS4reOBqOOBl+OBpuOCq+OCpuODs+ODiFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODnuOCueOCr+S9nOaIkOWHpueQhlxuICAgIGlmICh1c2luZ0NsaXBDb3VudCA+IDApIHtcbiAgICAgIC8vIOeUn+aIkOOBl+OBn0ZyYW1lQnVmZmVy44Go5ZCM44GY44K144Kk44K644Gn44OT44Ol44O844Od44O844OI44KS6Kit5a6aXG4gICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLFxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplXG4gICAgICApO1xuXG4gICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcbiAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gdGhpcy5nZXRNYXNrUmVuZGVyVGV4dHVyZSgpO1xuXG4gICAgICAvLyDjg6Ljg4fjg6vmj4/nlLvmmYLjgatEcmF3TWVzaE5vd+OBq+a4oeOBleOCjOOCi+WkieaPmyjjg6Ljg4fjg6t0b+ODr+ODvOODq+ODieW6p+aomeWkieaPmylcbiAgICAgIGNvbnN0IG1vZGVsVG9Xb3JsZEY6IEN1YmlzbU1hdHJpeDQ0ID0gcmVuZGVyZXIuZ2V0TXZwTWF0cml4KCk7XG5cbiAgICAgIHJlbmRlcmVyLnByZURyYXcoKTsgLy8g44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG5cbiAgICAgIC8vIOWQhOODnuOCueOCr+OBruODrOOCpOOCouOCpuODiOOCkuaxuuWumuOBl+OBpuOBhOOBj1xuICAgICAgdGhpcy5zZXR1cExheW91dEJvdW5kcyh1c2luZ0NsaXBDb3VudCk7XG5cbiAgICAgIC8vIC0tLS0tLS0tLS0g44Oe44K544Kv5o+P55S75Yem55CGIC0tLS0tLS0tLS1cbiAgICAgIC8vIOODnuOCueOCr+eUqFJlbmRlclRleHR1cmXjgpJhY3RpdmXjgavjgrvjg4Pjg4hcbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlKTtcblxuICAgICAgLy8g44Oe44K544Kv44KS44Kv44Oq44Ki44GZ44KLXG4gICAgICAvLyAo5Luu5LuV5qeYKSAx44GM54Sh5Yq577yI5o+P44GL44KM44Gq44GE77yJ6aCY5Z+f44CBMOOBjOacieWKue+8iOaPj+OBi+OCjOOCi++8iemgmOWfn+OAgu+8iOOCt+OCp+ODvOODgOODvENkKkNz44GnMOOBq+i/keOBhOWApOOCkuOBi+OBkeOBpuODnuOCueOCr+OCkuS9nOOCi+OAgjHjgpLjgYvjgZHjgovjgajkvZXjgoLotbfjgZPjgonjgarjgYTvvIlcbiAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgdGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXG4gICAgICAvLyDlrp/pmpvjgavjg57jgrnjgq/jgpLnlJ/miJDjgZnjgotcbiAgICAgIC8vIOWFqOOBpuOBruODnuOCueOCr+OCkuOBqeOBruOCiOOBhuOBq+ODrOOCpOOCouOCpuODiOOBl+OBpuaPj+OBj+OBi+OCkuaxuuWumuOBl+OAgUNsaXBDb250ZXh0LCBDbGlwcGVkRHJhd0NvbnRleHTjgavoqJjmhrbjgZnjgotcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBjbGlwSW5kZXggPSAwO1xuICAgICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XG4gICAgICAgIGNsaXBJbmRleCsrXG4gICAgICApIHtcbiAgICAgICAgLy8gLS0tIOWun+mam+OBqzHjgaTjga7jg57jgrnjgq/jgpLmj4/jgY8gLS0tXG4gICAgICAgIGNvbnN0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICBjbGlwSW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYWxsQ2xpcGVkRHJhd1JlY3Q6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0OyAvLyDjgZPjga7jg57jgrnjgq/jgpLkvb/jgYbjgIHjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7oq5bnkIbluqfmqJnkuIrjga7lm7Ljgb/nn6nlvaJcbiAgICAgICAgY29uc3QgbGF5b3V0Qm91bmRzT25UZXgwMTogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHM7IC8vIOOBk+OBruS4reOBq+ODnuOCueOCr+OCkuWPjuOCgeOCi1xuXG4gICAgICAgIC8vIOODouODh+ODq+W6p+aomeS4iuOBruefqeW9ouOCkuOAgemBqeWunOODnuODvOOCuOODs+OCkuS7mOOBkeOBpuS9v+OBhlxuICAgICAgICBjb25zdCBNQVJHSU4gPSAwLjA1O1xuICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLnNldFJlY3QoYWxsQ2xpcGVkRHJhd1JlY3QpO1xuICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChcbiAgICAgICAgICBhbGxDbGlwZWREcmF3UmVjdC53aWR0aCAqIE1BUkdJTixcbiAgICAgICAgICBhbGxDbGlwZWREcmF3UmVjdC5oZWlnaHQgKiBNQVJHSU5cbiAgICAgICAgKTtcbiAgICAgICAgLy8jIyMjIyMjIyMjIOacrOadpeOBr+WJsuOCiuW9k+OBpuOCieOCjOOBn+mgmOWfn+OBruWFqOS9k+OCkuS9v+OCj+OBmuW/heimgeacgOS9jumZkOOBruOCteOCpOOCuuOBjOOCiOOBhFxuXG4gICAgICAgIC8vIOOCt+OCp+ODvOODgOeUqOOBruioiOeul+W8j+OCkuaxguOCgeOCi+OAguWbnui7ouOCkuiAg+aFruOBl+OBquOBhOWgtOWQiOOBr+S7peS4i+OBruOBqOOBiuOCilxuICAgICAgICAvLyBtb3ZlUGVyaW9kJyA9IG1vdmVQZXJpb2QgKiBzY2FsZVggKyBvZmZYXHRcdCAgW1sgbW92ZVBlcmlvZCcgPSAobW92ZVBlcmlvZCAtIHRtcEJvdW5kc09uTW9kZWwubW92ZVBlcmlvZCkqc2NhbGUgKyBsYXlvdXRCb3VuZHNPblRleDAxLm1vdmVQZXJpb2QgXV1cbiAgICAgICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPVxuICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEud2lkdGggLyB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLndpZHRoO1xuICAgICAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9XG4gICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS5oZWlnaHQgLyB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmhlaWdodDtcblxuICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLjgavkvb/jgYbooYzliJfjgpLmsYLjgoHjgotcbiAgICAgICAge1xuICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4LmxvYWRJZGVudGl0eSgpO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxheW91dDAuLjEg44KSIC0xLi4x44Gr5aSJ5o+bXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoLTEuMCwgLTEuMCk7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZSgyLjAsIDIuMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIHZpZXcgdG8gbGF5b3V0MC4uMVxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLngsXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKHNjYWxlWCwgc2NhbGVZKTsgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLngsXG4gICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1bdHJhbnNsYXRlXVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB0bXBNYXRyaXhGb3JNYXNr44GM6KiI566X57WQ5p6cXG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzay5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4LmdldEFycmF5KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0gZHJhd+aZguOBriBtYXNrIOWPgueFp+eUqOihjOWIl+OCkuioiOeul1xuICAgICAgICB7XG4gICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcbiAgICAgICAgICB0aGlzLl90bXBNYXRyaXgubG9hZElkZW50aXR5KCk7XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLngsXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKHNjYWxlWCwgc2NhbGVZKTsgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLngsXG4gICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1bdHJhbnNsYXRlXVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3LnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpcENvbnRleHQuX21hdHJpeEZvck1hc2suc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeEZvck1hc2suZ2V0QXJyYXkoKSk7XG4gICAgICAgIGNsaXBDb250ZXh0Ll9tYXRyaXhGb3JEcmF3LnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXhGb3JEcmF3LmdldEFycmF5KCkpO1xuXG4gICAgICAgIGNvbnN0IGNsaXBEcmF3Q291bnQ6IG51bWJlciA9IGNsaXBDb250ZXh0Ll9jbGlwcGluZ0lkQ291bnQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xpcERyYXdDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2xpcERyYXdJbmRleDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2ldO1xuXG4gICAgICAgICAgLy8g6aCC54K55oOF5aCx44GM5pu05paw44GV44KM44Gm44GK44KJ44Ga44CB5L+h6aC85oCn44GM44Gq44GE5aC05ZCI44Gv5o+P55S744KS44OR44K544GZ44KLXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoY2xpcERyYXdJbmRleClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlbmRlcmVyLnNldElzQ3VsbGluZyhcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ3VsbGluZyhjbGlwRHJhd0luZGV4KSAhPSBmYWxzZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyDku4rlm57lsILnlKjjga7lpInmj5vjgpLpgannlKjjgZfjgabmj4/jgY9cbiAgICAgICAgICAvLyDjg4Hjg6Pjg7Pjg43jg6vjgoLliIfjgormm7/jgYjjgovlv4XopoHjgYzjgYLjgosoQSxSLEcsQilcbiAgICAgICAgICByZW5kZXJlci5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKGNsaXBDb250ZXh0KTtcbiAgICAgICAgICByZW5kZXJlci5kcmF3TWVzaChcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVGV4dHVyZUluZGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4VXZzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVPcGFjaXR5KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwsIC8vIOOCr+ODquODg+ODlOODs+OCsOOBr+mAmuW4uOaPj+eUu+OCkuW8t+WItlxuICAgICAgICAgICAgZmFsc2UgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gv44Kv44Oq44OD44OU44Oz44Kw44Gu5Y+N6Lui5L2/55So44Gv5YWo44GP6Zai5L+C44GM44Gq44GEXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAtLS0g5b6M5Yem55CGIC0tLVxuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pOyAvLyDmj4/nlLvlr77osaHjgpLmiLvjgZlcbiAgICAgIHJlbmRlcmVyLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG5cbiAgICAgIHRoaXMuZ2wudmlld3BvcnQoXG4gICAgICAgIHNfdmlld3BvcnRbMF0sXG4gICAgICAgIHNfdmlld3BvcnRbMV0sXG4gICAgICAgIHNfdmlld3BvcnRbMl0sXG4gICAgICAgIHNfdmlld3BvcnRbM11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOaXouOBq+ODnuOCueOCr+OCkuS9nOOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjVxuICAgKiDkvZzjgaPjgabjgYTjgovmp5jjgafjgYLjgozjgbDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZlcbiAgICog5L2c44Gj44Gm44GE44Gq44GR44KM44GwTlVMTOOCkui/lOOBmVxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza0NvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICogQHJldHVybiDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzlrZjlnKjjgZnjgozjgbDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZfjgIHjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZmluZFNhbWVDbGlwKFxuICAgIGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXksXG4gICAgZHJhd2FibGVNYXNrQ291bnRzOiBudW1iZXJcbiAgKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAvLyDkvZzmiJDmuIjjgb9DbGlwcGluZ0NvbnRleHTjgajkuIDoh7TjgZnjgovjgYvnorroqo1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICBpXG4gICAgICApO1xuICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZENvdW50O1xuXG4gICAgICAvLyDlgIvmlbDjgYzpgZXjgYbloLTlkIjjga/liKXnialcbiAgICAgIGlmIChjb3VudCAhPSBkcmF3YWJsZU1hc2tDb3VudHMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1lQ291bnQgPSAwO1xuXG4gICAgICAvLyDlkIzjgZhJROOCkuaMgeOBpOOBi+eiuuiqjeOAgumFjeWIl+OBruaVsOOBjOWQjOOBmOOBquOBruOBp+OAgeS4gOiHtOOBl+OBn+WAi+aVsOOBjOWQjOOBmOOBquOCieWQjOOBmOeJqeOCkuaMgeOBpOOBqOOBmeOCi1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNsaXBJZDogbnVtYmVyID0gY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGluZ0lkTGlzdFtqXTtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGNvdW50OyBrKyspIHtcbiAgICAgICAgICBpZiAoZHJhd2FibGVNYXNrc1trXSA9PSBjbGlwSWQpIHtcbiAgICAgICAgICAgIHNhbWVDb3VudCsrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzYW1lQ291bnQgPT0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaXBwaW5nQ29udGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDsgLy8g6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6YWN572u44GZ44KL44Os44Kk44Ki44Km44OIXG4gICAqIOS4gOOBpOOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OCkualteWKm+OBhOOBo+OBseOBhOOBq+S9v+OBo+OBpuODnuOCueOCr+OCkuODrOOCpOOCouOCpuODiOOBmeOCi1xuICAgKiDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBq+S4gOOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHVzaW5nQ2xpcENvdW50IOmFjee9ruOBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruaVsFxuICAgKi9cbiAgcHVibGljIHNldHVwTGF5b3V0Qm91bmRzKHVzaW5nQ2xpcENvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjgbLjgajjgaTjga5SZW5kZXJUZXh0dXJl44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXG4gICAgLy8g44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgasx44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi1xuXG4gICAgLy8gUkdCQeOCkumghueVquOBq+S9v+OBo+OBpuOBhOOBj1xuICAgIGxldCBkaXY6IG51bWJlciA9IHVzaW5nQ2xpcENvdW50IC8gQ29sb3JDaGFubmVsQ291bnQ7IC8vIDHjg4Hjg6Pjg7Pjg43jg6vjgavphY3nva7jgZnjgovln7rmnKzjga7jg57jgrnjgq9cbiAgICBsZXQgbW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcblxuICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgIGRpdiA9IH5+ZGl2O1xuICAgIG1vZCA9IH5+bW9kO1xuXG4gICAgLy8gUkdCQeOBneOCjOOBnuOCjOOBruODgeODo+ODs+ODjeODq+OCkueUqOaEj+OBl+OBpuOBhOOBj++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxuICAgIGxldCBjdXJDbGlwSW5kZXggPSAwOyAvLyDpoIbnlarjgavoqK3lrprjgZfjgabjgYTjgY9cblxuICAgIGZvciAobGV0IGNoYW5uZWxObyA9IDA7IGNoYW5uZWxObyA8IENvbG9yQ2hhbm5lbENvdW50OyBjaGFubmVsTm8rKykge1xuICAgICAgLy8g44GT44Gu44OB44Oj44Oz44ON44Or44Gr44Os44Kk44Ki44Km44OI44GZ44KL5pWwXG4gICAgICBjb25zdCBsYXlvdXRDb3VudDogbnVtYmVyID0gZGl2ICsgKGNoYW5uZWxObyA8IG1vZCA/IDEgOiAwKTtcblxuICAgICAgLy8g5YiG5Ymy5pa55rOV44KS5rG65a6a44GZ44KLXG4gICAgICBpZiAobGF5b3V0Q291bnQgPT0gMCkge1xuICAgICAgICAvLyDkvZXjgoLjgZfjgarjgYRcbiAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMSkge1xuICAgICAgICAvLyDlhajjgabjgpLjgZ3jga7jgb7jgb7kvb/jgYZcbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICk7XG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy55ID0gMC4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG5cbiAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICB4cG9zID0gfn54cG9zO1xuXG4gICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgY3VyQ2xpcEluZGV4KytcbiAgICAgICAgICApO1xuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xuICAgICAgICAgIC8vIFVW44KSMuOBpOOBq+WIhuino+OBl+OBpuS9v+OBhlxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50IDw9IDQpIHtcbiAgICAgICAgLy8gNOWIhuWJsuOBl+OBpuS9v+OBhlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG4gICAgICAgICAgbGV0IHlwb3M6IG51bWJlciA9IGkgLyAyO1xuXG4gICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgeHBvcyA9IH5+eHBvcztcbiAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgKiAwLjU7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMC41O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50IDw9IDkpIHtcbiAgICAgICAgLy8gOeWIhuWJsuOBl+OBpuS9v+OBhlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvcyA9IGkgJSAzO1xuICAgICAgICAgIGxldCB5cG9zID0gaSAvIDM7XG5cbiAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICB4cG9zID0gfn54cG9zO1xuICAgICAgICAgIHlwb3MgPSB+fnlwb3M7XG5cbiAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXG4gICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xuICAgICAgICAgICk7XG4gICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgLyAzLjA7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAvIDMuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wIC8gMy4wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDdWJpc21Mb2dFcnJvcignbm90IHN1cHBvcnRlZCBtYXNrIGNvdW50IDogezB9JywgbGF5b3V0Q291bnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6njg7zjg5Djg4Pjg5XjgqHjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjgqvjg6njg7zjg5Djg4Pjg5XjgqFcbiAgICovXG4gIHB1YmxpYyBnZXRDb2xvckJ1ZmZlcigpOiBXZWJHTFRleHR1cmUge1xuICAgIHJldHVybiB0aGlzLl9jb2xvckJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLmj4/nlLvjgavkvb/nlKjjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnlLvpnaLmj4/nlLvjgavkvb/nlKjjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpOiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSBzaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBfbWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICBwdWJsaWMgX2NvbG9yQnVmZmVyOiBXZWJHTFRleHR1cmU7IC8vIOODnuOCueOCr+eUqOOCq+ODqeODvOODkOODg+ODleOCoeODvOOBruOCouODieODrOOCuVxuICBwdWJsaWMgX2N1cnJlbnRGcmFtZU5vOiBudW1iZXI7IC8vIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+S4juOBiOOCi+ODleODrOODvOODoOeVquWPt1xuXG4gIHB1YmxpYyBfY2hhbm5lbENvbG9yczogY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj47XG4gIHB1YmxpYyBfbWFza1RleHR1cmU6IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTsgLy8g44Oe44K544Kv55So44Gu44OG44Kv44K544OB44Oj44Oq44K944O844K544Gu44Oq44K544OIXG4gIHB1YmxpYyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2s6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+OyAvLyDjg57jgrnjgq/nlKjjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjga7jg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdzogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOaPj+eUu+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICBwdWJsaWMgX2NsaXBwaW5nTWFza0J1ZmZlclNpemU6IG51bWJlcjsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44OQ44OD44OV44Kh44K144Kk44K677yI5Yid5pyf5YCkOjI1Nu+8iVxuXG4gIHByaXZhdGUgX3RtcE1hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gIHByaXZhdGUgX3RtcE1hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgcHJpdmF0ZSBfdG1wQm91bmRzT25Nb2RlbDogY3NtUmVjdDsgLy8g44Oe44K544Kv6YWN572u6KiI566X55So44Gu55+p5b2iXG5cbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbn1cblxuLyoqXG4gKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBp+S9v+eUqOOBmeOCi1xuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gZnJhbWVObyDjg6zjg7Pjg4Djg6njg7zjga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICogQHBhcmFtIHRleHR1cmUg44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoZnJhbWVObzogbnVtYmVyLCB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgdGhpcy5mcmFtZU5vID0gZnJhbWVObztcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICB9XG5cbiAgcHVibGljIGZyYW1lTm86IG51bWJlcjsgLy8g44Os44Oz44OA44Op44Gu44OV44Os44O844Og55Wq5Y+3XG4gIHB1YmxpYyB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyOyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXG4gICAgY2xpcHBpbmdEcmF3YWJsZUluZGljZXM6IEludDMyQXJyYXksXG4gICAgY2xpcENvdW50OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5fb3duZXIgPSBtYW5hZ2VyO1xuXG4gICAgLy8g44Kv44Oq44OD44OX44GX44Gm44GE44KL77yI77yd44Oe44K544Kv55So44Gu77yJRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICB0aGlzLl9jbGlwcGluZ0lkTGlzdCA9IGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzO1xuXG4gICAgLy8g44Oe44K544Kv44Gu5pWwXG4gICAgdGhpcy5fY2xpcHBpbmdJZENvdW50ID0gY2xpcENvdW50O1xuXG4gICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcbiAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBuZXcgY3NtUmVjdCgpO1xuXG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gW107XG5cbiAgICB0aGlzLl9tYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xheW91dEJvdW5kcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9hbGxDbGlwcGVkRHJhd1JlY3QgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCDjgq/jg6rjg4Pjg5Tjg7PjgrDlr77osaHjgavov73liqDjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBhZGRDbGlwcGVkRHJhd2FibGUoZHJhd2FibGVJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0LnB1c2goZHJhd2FibGVJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu44Oe44K544Kv44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYW5hZ2VyKCk6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCB7XG4gICAgcmV0dXJuIHRoaXMuX293bmVyO1xuICB9XG5cbiAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XG4gIH1cblxuICBwdWJsaWMgX2lzVXNpbmc6IGJvb2xlYW47IC8vIOePvuWcqOOBruaPj+eUu+eKtuaFi+OBp+ODnuOCueOCr+OBrua6luWCmeOBjOW/heimgeOBquOCiXRydWVcbiAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0lkQ291bnQ6IG51bWJlcjsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5pWwXG4gIHB1YmxpYyBfbGF5b3V0Q2hhbm5lbE5vOiBudW1iZXI7IC8vIFJHQkHjga7jgYTjgZrjgozjga7jg4Hjg6Pjg7Pjg43jg6vjgavjgZPjga7jgq/jg6rjg4Pjg5fjgpLphY3nva7jgZnjgovjgYvvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxuICBwdWJsaWMgX2FsbENsaXBwZWREcmF3UmVjdDogY3NtUmVjdDsgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44Gn44CB44Kv44Oq44OD44OU44Oz44Kw44GV44KM44KL44GZ44G544Gm44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5Zuy44G/55+p5b2i77yI5q+O5Zue5pu05paw77yJXG4gIHB1YmxpYyBfbWF0cml4Rm9yTWFzazogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+OBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xuICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgcHVibGljIF9jbGlwcGVkRHJhd2FibGVJbmRleExpc3Q6IG51bWJlcltdOyAvLyDjgZPjga7jg57jgrnjgq/jgavjgq/jg6rjg4Pjg5fjgZXjgozjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9vd25lcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgZPjga7jg57jgrnjgq/jgpLnrqHnkIbjgZfjgabjgYTjgovjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7Pjgrlcbn1cblxuLyoqXG4gKiBXZWJHTOeUqOOBruOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkueUn+aIkOODu+egtOajhOOBmeOCi+OCr+ODqeOCuVxuICog44K344Oz44Kw44Or44OI44Oz44Gq44Kv44Op44K544Gn44GC44KK44CBQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNl44GL44KJ44Ki44Kv44K744K544GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21TaGFkZXJfV2ViR0wge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXG4gICAqIEByZXR1cm4g44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEN1YmlzbVNoYWRlcl9XZWJHTCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IG5ldyBDdWJpc21TaGFkZXJfV2ViR0woKTtcblxuICAgICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gICAgfVxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkumWi+aUvuOBmeOCi++8iOOCt+ODs+OCsOODq+ODiOODs++8iVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGVJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSkge1xuICAgICAgc19pbnN0YW5jZS5yZWxlYXNlKCk7XG4gICAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJpdmF0ZeOBquOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zaGFkZXJTZXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbGVhc2VTaGFkZXJQcm9ncmFtKCk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu5LiA6YCj44Gu44K744OD44OI44Ki44OD44OX44KS5a6f6KGM44GZ44KLXG4gICAqIEBwYXJhbSByZW5kZXJlciDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHBhcmFtIHRleHR1cmVJZCBHUFXjga7jg4bjgq/jgrnjg4Hjg6NJRFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXG4gICAqIEBwYXJhbSBiYXNlQ29sb3Ig44OZ44O844K544Kr44Op44O8XG4gICAqIEBwYXJhbSBpc1ByZW11bHRpcGxpZWRBbHBoYSDkuZfnrpfmuIjjgb/jgqLjg6vjg5XjgqHjgYvjganjgYbjgYtcbiAgICogQHBhcmFtIG1hdHJpeDR4NCBNb2RlbC1WaWV3LVByb2plY3Rpb27ooYzliJdcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/jgpLlj43ou6LjgZfjgabkvb/nlKjjgZnjgovjg5Xjg6njgrBcbiAgICovXG4gIHB1YmxpYyBzZXR1cFNoYWRlclByb2dyYW0oXG4gICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMLFxuICAgIHRleHR1cmVJZDogV2ViR0xUZXh0dXJlLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgYnVmZmVyRGF0YToge1xuICAgICAgdmVydGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIHV2OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICB9LFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgIGJhc2VDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIGlzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuLFxuICAgIG1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQge1xuICAgIGlmICghaXNQcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdOb1ByZW11bHRpcGxpZWRBbHBoYSBpcyBub3QgYWxsb3dlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlU2hhZGVycygpO1xuICAgIH1cblxuICAgIC8vIEJsZW5kaW5nXG4gICAgbGV0IFNSQ19DT0xPUjogbnVtYmVyO1xuICAgIGxldCBEU1RfQ09MT1I6IG51bWJlcjtcbiAgICBsZXQgU1JDX0FMUEhBOiBudW1iZXI7XG4gICAgbGV0IERTVF9BTFBIQTogbnVtYmVyO1xuXG4gICAgaWYgKHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKSAhPSBudWxsKSB7XG4gICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYJcbiAgICAgIGNvbnN0IHNoYWRlclNldDogQ3ViaXNtU2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfU2V0dXBNYXNrXG4gICAgICApO1xuICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHNoYWRlclNldC5zaGFkZXJQcm9ncmFtKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kit5a6aXG4gICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcbiAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiwgMCk7XG5cbiAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXG4gICAgICBpZiAoYnVmZmVyRGF0YS52ZXJ0ZXggPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnZlcnRleCA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudmVydGV4KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcbiAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgIHZlcnRleEFycmF5LFxuICAgICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+mggueCueOBruioreWumlxuICAgICAgaWYgKGJ1ZmZlckRhdGEudXYgPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIC8vIOODgeODo+ODs+ODjeODq1xuICAgICAgY29uc3QgY2hhbm5lbE5vOiBudW1iZXIgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKClcbiAgICAgICAgLl9sYXlvdXRDaGFubmVsTm87XG4gICAgICBjb25zdCBjb2xvckNoYW5uZWw6IEN1YmlzbVRleHR1cmVDb2xvciA9IHJlbmRlcmVyXG4gICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKClcbiAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgIC5nZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vKTtcbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24sXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5SLFxuICAgICAgICBjb2xvckNoYW5uZWwuRyxcbiAgICAgICAgY29sb3JDaGFubmVsLkIsXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5BXG4gICAgICApO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9tYXRyaXhGb3JNYXNrLmdldEFycmF5KClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlY3Q6IGNzbVJlY3QgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKClcbiAgICAgICAgLl9sYXlvdXRCb3VuZHM7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uLFxuICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXG4gICAgICAgIHJlY3QueSAqIDIuMCAtIDEuMCxcbiAgICAgICAgcmVjdC5nZXRSaWdodCgpICogMi4wIC0gMS4wLFxuICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXG4gICAgICApO1xuXG4gICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLlpFUk87XG4gICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQ09MT1I7XG4gICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgfSAvLyDjg57jgrnjgq/nlJ/miJDku6XlpJbjga7loLTlkIhcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IG1hc2tlZDogYm9vbGVhbiA9XG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKSAhPSBudWxsOyAvLyDjgZPjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga/jg57jgrnjgq/lr77osaHjgYtcbiAgICAgIGNvbnN0IG9mZnNldDogbnVtYmVyID0gbWFza2VkID8gKGludmVydGVkTWFzayA/IDIgOiAxKSA6IDA7XG5cbiAgICAgIGxldCBzaGFkZXJTZXQ6IEN1YmlzbVNoYWRlclNldCA9IG5ldyBDdWJpc21TaGFkZXJTZXQoKTtcblxuICAgICAgc3dpdGNoIChjb2xvckJsZW5kTW9kZSkge1xuICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19Ob3JtYWxQcmVtdWx0aXBsaWVkQWxwaGEgKyBvZmZzZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlOlxuICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19BZGRQcmVtdWx0aXBsaWVkQWxwaGEgKyBvZmZzZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcbiAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmU6XG4gICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX011bHRQcmVtdWx0aXBsaWVkQWxwaGEgKyBvZmZzZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuRFNUX0NPTE9SO1xuICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJTZXQuc2hhZGVyUHJvZ3JhbSk7XG5cbiAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumlxuICAgICAgaWYgKGJ1ZmZlckRhdGEudmVydGV4ID09IG51bGwpIHtcbiAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnZlcnRleCk7XG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgIHRoaXMuZ2wuQVJSQVlfQlVGRkVSLFxuICAgICAgICB2ZXJ0ZXhBcnJheSxcbiAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uKTtcbiAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgc2hhZGVyU2V0LmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24sXG4gICAgICAgIDIsXG4gICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAwLFxuICAgICAgICAwXG4gICAgICApO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PpoILngrnjga7oqK3lrppcbiAgICAgIGlmIChidWZmZXJEYXRhLnV2ID09IG51bGwpIHtcbiAgICAgICAgYnVmZmVyRGF0YS51diA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudXYpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB1dkFycmF5LCB0aGlzLmdsLkRZTkFNSUNfRFJBVyk7XG4gICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uKTtcbiAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24sXG4gICAgICAgIDIsXG4gICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAwLFxuICAgICAgICAwXG4gICAgICApO1xuXG4gICAgICBpZiAobWFza2VkKSB7XG4gICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTtcbiAgICAgICAgY29uc3QgdGV4OiBXZWJHTFRleHR1cmUgPSByZW5kZXJlclxuICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAuZ2V0Q29sb3JCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRleCk7XG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiwgMSk7XG5cbiAgICAgICAgLy8gdmlld+W6p+aomeOCkkNsaXBwaW5nQ29udGV4dOOBruW6p+aomeOBq+WkieaPm+OBmeOCi+OBn+OCgeOBruihjOWIl+OCkuioreWumlxuICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpLl9tYXRyaXhGb3JEcmF3LmdldEFycmF5KClcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDkvb/nlKjjgZnjgovjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vjgpLoqK3lrppcbiAgICAgICAgY29uc3QgY2hhbm5lbE5vOiBudW1iZXIgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcbiAgICAgICAgICAuX2xheW91dENoYW5uZWxObztcbiAgICAgICAgY29uc3QgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlclxuICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuUixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuRyxcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcbiAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcblxuICAgICAgLy8g5bqn5qiZ5aSJ5o+bXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtTWF0cml4TG9jYXRpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXG4gICAgICAgIGJhc2VDb2xvci5SLFxuICAgICAgICBiYXNlQ29sb3IuRyxcbiAgICAgICAgYmFzZUNvbG9yLkIsXG4gICAgICAgIGJhc2VDb2xvci5BXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIElCT+OCkuS9nOaIkOOBl+OAgeODh+ODvOOCv+OCkui7oumAgVxuICAgIGlmIChidWZmZXJEYXRhLmluZGV4ID09IG51bGwpIHtcbiAgICAgIGJ1ZmZlckRhdGEuaW5kZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIH1cbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS5pbmRleCk7XG4gICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgIGluZGV4QXJyYXksXG4gICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICk7XG4gICAgdGhpcy5nbC5ibGVuZEZ1bmNTZXBhcmF0ZShTUkNfQ09MT1IsIERTVF9DT0xPUiwgU1JDX0FMUEhBLCBEU1RfQUxQSEEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2VTaGFkZXJQcm9ncmFtKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2hhZGVyU2V0cy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KGkpLnNoYWRlclByb2dyYW0gPSAwO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5zZXQoaSwgdm9pZCAwKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLliJ3mnJ/ljJbjgZnjgotcbiAgICogQHBhcmFtIHZlcnRTaGFkZXJTcmMg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEBwYXJhbSBmcmFnU2hhZGVyU3JjIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgKi9cbiAgcHVibGljIGdlbmVyYXRlU2hhZGVycygpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYWRlckNvdW50OyBpKyspIHtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMucHVzaEJhY2sobmV3IEN1YmlzbVNoYWRlclNldCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgdmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrLFxuICAgICAgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2tcbiAgICApO1xuXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyYyxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgdmVydGV4U2hhZGVyU3JjTWFza2VkLFxuICAgICAgZnJhZ21lbnRTaGFkZXJTcmNNYXNrUHJlbXVsdGlwbGllZEFscGhhXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgdmVydGV4U2hhZGVyU3JjTWFza2VkLFxuICAgICAgZnJhZ21lbnRTaGFkZXJTcmNNYXNrSW52ZXJ0ZWRQcmVtdWx0aXBsaWVkQWxwaGFcbiAgICApO1xuXG4gICAgLy8g5Yqg566X44KC6YCa5bi444Go5ZCM44GY44K344Kn44O844OA44O844KS5Yip55So44GZ44KLXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW07XG5cbiAgICAvLyDkuZfnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW07XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbTtcblxuICAgIC8vIFNldHVwTWFza1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAwXG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDBcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAwXG4gICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jbGlwTWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDBcbiAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jaGFubmVsRmxhZydcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAwXG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2Jhc2VDb2xvcidcbiAgICApO1xuXG4gICAgLy8g6YCa5bi477yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDFcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfcG9zaXRpb24nXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgMVxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV90ZXhDb29yZCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAxXG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2Jhc2VDb2xvcidcbiAgICApO1xuXG4gICAgLy8g6YCa5bi477yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDJcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfcG9zaXRpb24nXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgMlxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV90ZXhDb29yZCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDJcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgMlxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDJcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICk7XG5cbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAzXG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDNcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAzXG4gICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jbGlwTWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDNcbiAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jaGFubmVsRmxhZydcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAzXG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2Jhc2VDb2xvcidcbiAgICApO1xuXG4gICAgLy8g5Yqg566X77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDRcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfcG9zaXRpb24nXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNFxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV90ZXhDb29yZCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA0XG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2Jhc2VDb2xvcidcbiAgICApO1xuXG4gICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDVcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfcG9zaXRpb24nXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNVxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV90ZXhDb29yZCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDVcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNVxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDVcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICk7XG5cbiAgICAvLyDliqDnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNlxuICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV9wb3NpdGlvbidcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA2XG4gICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdhX3RleENvb3JkJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNlxuICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA2XG4gICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgNlxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9iYXNlQ29sb3InXG4gICAgKTtcblxuICAgIC8vIOS5l+eul++8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA3XG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDdcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgN1xuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9iYXNlQ29sb3InXG4gICAgKTtcblxuICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA4XG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDhcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA4XG4gICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jbGlwTWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDhcbiAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9jaGFubmVsRmxhZydcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICA4XG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2Jhc2VDb2xvcidcbiAgICApO1xuXG4gICAgLy8g5LmX566X77yI44Kv44Oq44OD44OU44Oz44Kw44O75Y+N6Lui44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDlcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ2FfcG9zaXRpb24nXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgOVxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAnYV90ZXhDb29yZCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDlcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgOVxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgIDlcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44OX44Ot44Kw44Op44Og44KS44Ot44O844OJ44GX44Gm44Ki44OJ44Os44K544KS6L+U44GZXG4gICAqIEBwYXJhbSB2ZXJ0ZXhTaGFkZXJTb3VyY2UgICAg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclNvdXJjZSAg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEByZXR1cm4g44K344Kn44O844OA44OX44Ot44Kw44Op44Og44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgbG9hZFNoYWRlclByb2dyYW0oXG4gICAgdmVydGV4U2hhZGVyU291cmNlOiBzdHJpbmcsXG4gICAgZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIC8vIENyZWF0ZSBTaGFkZXIgUHJvZ3JhbVxuICAgIGxldCBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgIGxldCB2ZXJ0U2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5WRVJURVhfU0hBREVSLFxuICAgICAgdmVydGV4U2hhZGVyU291cmNlXG4gICAgKTtcblxuICAgIGlmICghdmVydFNoYWRlcikge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciEnKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBmcmFnU2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICBmcmFnbWVudFNoYWRlclNvdXJjZVxuICAgICk7XG4gICAgaWYgKCFmcmFnU2hhZGVyKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcignVmVydGV4IHNoYWRlciBjb21waWxlIGVycm9yIScpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIHZlcnRleCBzaGFkZXIgdG8gcHJvZ3JhbVxuICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRTaGFkZXIpO1xuXG4gICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXG4gICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG5cbiAgICAvLyBsaW5rIHByb2dyYW1cbiAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgIGNvbnN0IGxpbmtTdGF0dXMgPSB0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIoXG4gICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgdGhpcy5nbC5MSU5LX1NUQVRVU1xuICAgICk7XG5cbiAgICAvLyDjg6rjg7Pjgq/jgavlpLHmlZfjgZfjgZ/jgonjgrfjgqfjg7zjg4Djg7zjgpLliYrpmaRcbiAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gbGluayBwcm9ncmFtOiB7MH0nLCBzaGFkZXJQcm9ncmFtKTtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgICB2ZXJ0U2hhZGVyID0gMDtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG4gICAgICBmcmFnU2hhZGVyID0gMDtcblxuICAgICAgaWYgKHNoYWRlclByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgICAgICBzaGFkZXJQcm9ncmFtID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gUmVsZWFzZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuXG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG5cbiAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcbiAgICogQHBhcmFtIHNoYWRlclR5cGUg44K344Kn44O844OA44K/44Kk44OXKFZlcnRleC9GcmFnbWVudClcbiAgICogQHBhcmFtIHNoYWRlclNvdXJjZSDjgrfjgqfjg7zjg4Djgr3jg7zjgrnjgrPjg7zjg4lcbiAgICpcbiAgICogQHJldHVybiDjgrPjg7Pjg5HjgqTjg6vjgZXjgozjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcbiAgICovXG4gIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxuICAgIHNoYWRlclR5cGU6IEdMZW51bSxcbiAgICBzaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gc2hhZGVyU291cmNlO1xuXG4gICAgY29uc3Qgc2hhZGVyOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcbiAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoIXNoYWRlcikge1xuICAgICAgY29uc3QgbG9nOiBzdHJpbmcgPSB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdTaGFkZXIgY29tcGlsZSBsb2c6IHswfSAnLCBsb2cpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXG4gICAgICBzaGFkZXIsXG4gICAgICB0aGlzLmdsLkNPTVBJTEVfU1RBVFVTXG4gICAgKTtcbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgfVxuXG4gIF9zaGFkZXJTZXRzOiBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PjsgLy8g44Ot44O844OJ44GX44Gf44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5L+d5oyB44GZ44KL5aSJ5pWwXG4gIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG59XG5cbi8qKlxuICogQ3ViaXNtU2hhZGVyX1dlYkdM44Gu44Kk44Oz44OK44O844Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21TaGFkZXJTZXQge1xuICBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxuICBhdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXG4gIGF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb246IEdMdWludDsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4Q29vcmTvvIlcbiAgdW5pZm9ybU1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITWF0cml477yJXG4gIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXG4gIHNhbXBsZXJUZXh0dXJlMExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTDvvIlcbiAgc2FtcGxlclRleHR1cmUxTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMe+8iVxuICB1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhCYXNlQ29sb3LvvIlcbiAgdW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDaGFubmVsRmxhZ++8iVxufVxuXG5leHBvcnQgZW51bSBTaGFkZXJOYW1lcyB7XG4gIC8vIFNldHVwTWFza1xuICBTaGFkZXJOYW1lc19TZXR1cE1hc2ssXG5cbiAgLy8gTm9ybWFsXG4gIFNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTm9ybWFsTWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19Ob21yYWxNYXNrZWRJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSxcblxuICAvLyBBZGRcbiAgU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19BZGRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX0FkZE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYUludmVydGVkLFxuXG4gIC8vIE11bHRcbiAgU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTXVsdE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTXVsdE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYUludmVydGVkXG59XG5cbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2sgPVxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArXG4gICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfbXlQb3MgPSB1X2NsaXBNYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICd9JztcbmV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFzayA9XG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGZsb2F0IGlzSW5zaWRlID0gJyArXG4gICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh1X2Jhc2VDb2xvci55LCB2X215UG9zLnkvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLngvdl9teVBvcy53LCB1X2Jhc2VDb2xvci56KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IHVfY2hhbm5lbEZsYWcgKiB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCkuYSAqIGlzSW5zaWRlOycgK1xuICAnfSc7XG5cbi8vLS0tLS0g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmlxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyYyA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICsgLy92LnZlcnRleFxuICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArIC8vdi50ZXhjb29yZFxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqO+8iVxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY01hc2tlZCA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICtcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4OycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfY2xpcE1hdHJpeDsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICBnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfY2xpcFBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLy0tLS0tIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoCAtLS0tLVxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJog77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICsgLy92MmYudGV4Y29vcmRcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgKyAvL19NYWluVGV4XG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAgLCB2X3RleENvb3JkKSAqIHVfYmFzZUNvbG9yOycgK1xuICAnfSc7XG5cbi8vIE5vcm1hbCDvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgZ/jgoLjga7jga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHlhbznlKjvvIlcbmV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X2NsaXBQb3M7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTE7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgdmVjNCBjb2xfZm9ybWFzayA9IHRleHR1cmUyRChzX3RleHR1cmUwICwgdl90ZXhDb29yZCkgKiB1X2Jhc2VDb2xvcjsnICtcbiAgJyAgIHZlYzQgY2xpcE1hc2sgPSAoMS4wIC0gdGV4dHVyZTJEKHNfdGV4dHVyZTEsIHZfY2xpcFBvcy54eSAvIHZfY2xpcFBvcy53KSkgKiB1X2NoYW5uZWxGbGFnOycgK1xuICAnICAgZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7JyArXG4gICcgICBjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogbWFza1ZhbDsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IGNvbF9mb3JtYXNrOycgK1xuICAnfSc7XG5cbi8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCa77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gm5Y+N6Lui5L2/55So44Gu5o+P55S755So44CBUHJlbXVsdGlwbGllZEFscGhh44Gu5aC05ZCI77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrSW52ZXJ0ZWRQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCB2X2NsaXBQb3M7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUwOycgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgc190ZXh0dXJlMTsnICtcbiAgJ3VuaWZvcm0gdmVjNCB1X2NoYW5uZWxGbGFnOycgK1xuICAndW5pZm9ybSB2ZWM0IHVfYmFzZUNvbG9yOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJ3ZlYzQgY29sX2Zvcm1hc2sgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCkgKiB1X2Jhc2VDb2xvcjsnICtcbiAgJ3ZlYzQgY2xpcE1hc2sgPSAoMS4wIC0gdGV4dHVyZTJEKHNfdGV4dHVyZTEsIHZfY2xpcFBvcy54eSAvIHZfY2xpcFBvcy53KSkgKiB1X2NoYW5uZWxGbGFnOycgK1xuICAnZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7JyArXG4gICdjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogKDEuMCAtIG1hc2tWYWwpOycgK1xuICAnZ2xfRnJhZ0NvbG9yID0gY29sX2Zvcm1hc2s7JyArXG4gICd9JztcblxuLyoqXG4gKiBXZWJHTOeUqOOBruaPj+eUu+WRveS7pOOCkuWun+ijheOBl+OBn+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgZXh0ZW5kcyBDdWJpc21SZW5kZXJlciB7XG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGlmIChtb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7IC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OCkuWIneacn+WMllxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXG4gICAgICAgIG1vZGVsLFxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZUNvdW50KCksXG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlTWFza3MoKSxcbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QucmVzaXplKG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSwgMCk7XG5cbiAgICBzdXBlci5pbml0aWFsaXplKG1vZGVsKTsgLy8g6Kaq44Kv44Op44K544Gu5Yem55CG44KS5ZG844G2XG4gIH1cblxuICAvKipcbiAgICogV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7jg5DjgqTjg7Pjg4nlh6bnkIZcbiAgICogQ3ViaXNtUmVuZGVyZXLjgavjg4bjgq/jgrnjg4Hjg6PjgpLoqK3lrprjgZfjgIFDdWJpc21SZW5kZXJlcuWGheOBp+OBneOBrueUu+WDj+OCkuWPgueFp+OBmeOCi+OBn+OCgeOBrkluZGV45YCk44KS5oi744KK5YCk44Go44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICogQHBhcmFtIGdsVGV4dHVyZU5vIFdlYkdM44OG44Kv44K544OB44Oj44Gu55Wq5Y+3XG4gICAqL1xuICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICB0aGlzLl90ZXh0dXJlcy5zZXRWYWx1ZShtb2RlbFRleHR1cmVObywgZ2xUZXh0dXJlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJHTOOBq+ODkOOCpOODs+ODieOBleOCjOOBn+ODhuOCr+OCueODgeODo+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldEJpbmRlZFRleHR1cmVzKCk6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT4ge1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLoqK3lrprjgZnjgotcbiAgICog44Oe44K544Kv55So44GuRnJhbWVCdWZmZXLjgpLnoLTmo4TjgIHlho3kvZzmiJDjgZnjgovngrrlh6bnkIbjgrPjgrnjg4jjga/pq5jjgYRcbiAgICogQHBhcmFtIHNpemUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICAvLyBGcmFtZUJ1ZmZlcuOBruOCteOCpOOCuuOCkuWkieabtOOBmeOCi+OBn+OCgeOBq+OCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOODu+WGjeS9nOaIkOOBmeOCi1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7XG5cbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplKTtcblxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tzKCksXG4gICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sgPSBudWxsO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBudWxsO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTtcbiAgICB0aGlzLmZpcnN0RHJhdyA9IHRydWU7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0ID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gICAgdGhpcy5fYnVmZmVyRGF0YSA9IHtcbiAgICAgIHZlcnRleDogV2ViR0xCdWZmZXIgPSBudWxsLFxuICAgICAgdXY6IFdlYkdMQnVmZmVyID0gbnVsbCxcbiAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlciA9IG51bGxcbiAgICB9O1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj5a++5b+c44Oe44OD44OX44Gu5a656YeP44KS56K65L+d44GX44Gm44GK44GPXG4gICAgdGhpcy5fdGV4dHVyZXMucHJlcGFyZUNhcGFjaXR5KDMyLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnZlcnRleCk7XG4gICAgdGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXggPSBudWxsO1xuICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEudXYpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEudXYgPSBudWxsO1xuICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEuaW5kZXgpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEuaW5kZXggPSBudWxsO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEgPSBudWxsO1xuXG4gICAgdGhpcy5fdGV4dHVyZXMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIGRvRHJhd01vZGVsKCk6IHZvaWQge1xuICAgIC8vLS0tLS0tLS0tLS0tIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OBruWgtOWQiCAtLS0tLS0tLS0tLS1cbiAgICBpZiAodGhpcy5fY2xpcHBpbmdNYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMucHJlRHJhdygpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldHVwQ2xpcHBpbmdDb250ZXh0KHRoaXMuZ2V0TW9kZWwoKSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8g5LiK6KiY44Kv44Oq44OD44OU44Oz44Kw5Yem55CG5YaF44Gn44KC5LiA5bqmUHJlRHJhd+OCkuWRvOOBtuOBruOBp+azqOaEjyEhXG4gICAgdGhpcy5wcmVEcmF3KCk7XG5cbiAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDb3VudCgpO1xuICAgIGNvbnN0IHJlbmRlck9yZGVyOiBJbnQzMkFycmF5ID0gdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlUmVuZGVyT3JkZXJzKCk7XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgafjgr3jg7zjg4hcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3Qgb3JkZXI6IG51bWJlciA9IHJlbmRlck9yZGVyW2ldO1xuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcbiAgICB9XG5cbiAgICAvLyDmj4/nlLtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID0gdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QuYXQoaSk7XG5cbiAgICAgIC8vIERyYXdhYmxl44GM6KGo56S654q25oWL44Gn44Gq44GR44KM44Gw5Yem55CG44KS44OR44K544GZ44KLXG4gICAgICBpZiAoIXRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyICE9IG51bGxcbiAgICAgICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlclxuICAgICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcoKVxuICAgICAgICAgICAgICAuYXQoZHJhd2FibGVJbmRleClcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleCkpO1xuXG4gICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU9wYWNpdHkoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUJsZW5kTW9kZShkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlSW52ZXJ0ZWRNYXNrQml0KGRyYXdhYmxlSW5kZXgpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBb44Kq44O844OQ44O844Op44Kk44OJXVxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgovjgIJcbiAgICog44Od44Oq44K044Oz44Oh44OD44K344Ol44Go44OG44Kv44K544OB44Oj55Wq5Y+344KS44K744OD44OI44Gn5rih44GZ44CCXG4gICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O85ZCI5oiQ44K/44Kk44OXXG4gICAqIEBwYXJhbSBpbnZlcnRlZE1hc2sg44Oe44K544Kv5L2/55So5pmC44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZHJhd01lc2goXG4gICAgdGV4dHVyZU5vOiBudW1iZXIsXG4gICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQge1xuICAgIC8vIOijj+mdouaPj+eUu+OBruacieWKueODu+eEoeWKuVxuICAgIGlmICh0aGlzLmlzQ3VsbGluZygpKSB7XG4gICAgICB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgfVxuXG4gICAgdGhpcy5nbC5mcm9udEZhY2UodGhpcy5nbC5DQ1cpOyAvLyBDdWJpc20gU0RLIE9wZW5HTOOBr+ODnuOCueOCr+ODu+OCouODvOODiOODoeODg+OCt+ODpeWFseOBq0NDV+OBjOihqOmdolxuXG4gICAgY29uc3QgbW9kZWxDb2xvclJHQkE6IEN1YmlzbVRleHR1cmVDb2xvciA9IHRoaXMuZ2V0TW9kZWxDb2xvcigpO1xuXG4gICAgaWYgKHRoaXMuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpID09IG51bGwpIHtcbiAgICAgIC8vIOODnuOCueOCr+eUn+aIkOaZguS7peWkllxuICAgICAgbW9kZWxDb2xvclJHQkEuQSAqPSBvcGFjaXR5O1xuICAgICAgaWYgKHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSkge1xuICAgICAgICBtb2RlbENvbG9yUkdCQS5SICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICAgIG1vZGVsQ29sb3JSR0JBLkcgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuQiAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkcmF3dGV4dHVyZTogV2ViR0xUZXh0dXJlOyAvLyDjgrfjgqfjg7zjg4DjgavmuKHjgZnjg4bjgq/jgrnjg4Hjg6NcblxuICAgIC8vIOODhuOCr+OCueODgeODo+ODnuODg+ODl+OBi+OCieODkOOCpOODs+ODiea4iOOBv+ODhuOCr+OCueODgeODo++8qe+8pOOCkuWPluW+l1xuICAgIC8vIOODkOOCpOODs+ODieOBleOCjOOBpuOBhOOBquOBkeOCjOOBsOODgOODn+ODvOOBruODhuOCr+OCueODgeODo0lE44KS44K744OD44OI44GZ44KLXG4gICAgaWYgKHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKHRleHR1cmVObykgIT0gbnVsbCkge1xuICAgICAgZHJhd3RleHR1cmUgPSB0aGlzLl90ZXh0dXJlcy5nZXRWYWx1ZSh0ZXh0dXJlTm8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmF3dGV4dHVyZSA9IG51bGw7XG4gICAgfVxuXG4gICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0dXBTaGFkZXJQcm9ncmFtKFxuICAgICAgdGhpcyxcbiAgICAgIGRyYXd0ZXh0dXJlLFxuICAgICAgdmVydGV4Q291bnQsXG4gICAgICB2ZXJ0ZXhBcnJheSxcbiAgICAgIGluZGV4QXJyYXksXG4gICAgICB1dkFycmF5LFxuICAgICAgdGhpcy5fYnVmZmVyRGF0YSxcbiAgICAgIG9wYWNpdHksXG4gICAgICBjb2xvckJsZW5kTW9kZSxcbiAgICAgIG1vZGVsQ29sb3JSR0JBLFxuICAgICAgdGhpcy5pc1ByZW11bHRpcGxpZWRBbHBoYSgpLFxuICAgICAgdGhpcy5nZXRNdnBNYXRyaXgoKSxcbiAgICAgIGludmVydGVkTWFza1xuICAgICk7XG5cbiAgICAvLyDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6XjgpLmj4/nlLvjgZnjgotcbiAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhcbiAgICAgIHRoaXMuZ2wuVFJJQU5HTEVTLFxuICAgICAgaW5kZXhDb3VudCxcbiAgICAgIHRoaXMuZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgICAwXG4gICAgKTtcblxuICAgIC8vIOW+jOWHpueQhlxuICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShudWxsKTtcbiAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcobnVsbCk7XG4gICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkuino+aUvuOBmeOCi1xuICAgKiBXZWJHTOOBrumdmeeahOOBquOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkb1N0YXRpY1JlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmRlbGV0ZUluc3RhbmNlKCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44O844K544OG44O844OI44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBmYm8g44Ki44OX44Oq44Kx44O844K344On44Oz5YG044Gn5oyH5a6a44GX44Gm44GE44KL44OV44Os44O844Og44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSB2aWV3cG9ydCDjg5Pjg6Xjg7zjg53jg7zjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShmYm86IFdlYkdMRnJhbWVidWZmZXIsIHZpZXdwb3J0OiBudW1iZXJbXSk6IHZvaWQge1xuICAgIHNfZmJvID0gZmJvO1xuICAgIHNfdmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmj4/nlLvplovlp4vmmYLjga7ov73liqDlh6bnkIZcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5YmN44Gr44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr5b+F6KaB44Gq5Yem55CG44KS5a6f6KOF44GX44Gm44GE44KLXG4gICAqL1xuICBwdWJsaWMgcHJlRHJhdygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5maXJzdERyYXcpIHtcbiAgICAgIHRoaXMuZmlyc3REcmF3ID0gZmFsc2U7XG5cbiAgICAgIC8vIOaLoeW8teapn+iDveOCkuacieWKueOBq+OBmeOCi1xuICAgICAgdGhpcy5fYW5pc29ydG9weSA9XG4gICAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgICB0aGlzLmdsLmdldEV4dGVuc2lvbignV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XG4gICAgfVxuXG4gICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuU0NJU1NPUl9URVNUKTtcbiAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpO1xuICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXG4gICAgLy8g44Kr44Oq44Oz44Kw77yIMS4wYmV0YTPvvIlcbiAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsLkNXKTtcblxuICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpO1xuICAgIHRoaXMuZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTsgLy8g5YmN44Gr44OQ44OD44OV44Kh44GM44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gf44KJ56C05qOE44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KSB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIGds44Gu6Kit5a6aXG4gICAqL1xuICBwdWJsaWMgc3RhcnRVcChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXRHTChnbCk7XG4gICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0R2woZ2wpO1xuICB9XG5cbiAgX3RleHR1cmVzOiBjc21NYXA8bnVtYmVyLCBXZWJHTFRleHR1cmU+OyAvLyDjg6Ljg4fjg6vjgYzlj4LnhafjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjgajjg6zjg7Pjg4Djg6njgafjg5DjgqTjg7Pjg4njgZfjgabjgYTjgovjg4bjgq/jgrnjg4Hjg6Pjgajjga7jg57jg4Pjg5dcbiAgX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0OiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gr5Lim44G544Gf44Oq44K544OIXG4gIF9jbGlwcGluZ01hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv566h55CG44Kq44OW44K444Kn44Kv44OIXG4gIF9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrOiBDdWJpc21DbGlwcGluZ0NvbnRleHQ7IC8vIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OBn+OCgeOBruOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAvLyDnlLvpnaLkuIrmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgZmlyc3REcmF3OiBib29sZWFuO1xuICBfYnVmZmVyRGF0YToge1xuICAgIHZlcnRleDogV2ViR0xCdWZmZXI7XG4gICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgfTsgLy8g6aCC54K544OQ44OD44OV44Kh44OH44O844K/XG4gIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG59XG5cbi8qKlxuICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gKi9cbkN1YmlzbVJlbmRlcmVyLnN0YXRpY1JlbGVhc2UgPSAoKTogdm9pZCA9PiB7XG4gIEN1YmlzbVJlbmRlcmVyX1dlYkdMLmRvU3RhdGljUmVsZWFzZSgpO1xufTtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9ICQuQ3ViaXNtQ2xpcHBpbmdDb250ZXh0O1xuICBleHBvcnQgdHlwZSBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSAkLkN1YmlzbUNsaXBwaW5nQ29udGV4dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCA9ICQuQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMO1xuICBleHBvcnQgdHlwZSBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZSA9ICQuQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlO1xuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UgPSAkLkN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gJC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgPSAkLkN1YmlzbVJlbmRlcmVyX1dlYkdMO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtU2hhZGVyU2V0ID0gJC5DdWJpc21TaGFkZXJTZXQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtU2hhZGVyX1dlYkdMID0gJC5DdWJpc21TaGFkZXJfV2ViR0w7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVNoYWRlcl9XZWJHTCA9ICQuQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBleHBvcnQgY29uc3QgU2hhZGVyTmFtZXMgPSAkLlNoYWRlck5hbWVzO1xuICBleHBvcnQgdHlwZSBTaGFkZXJOYW1lcyA9ICQuU2hhZGVyTmFtZXM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21Mb2dEZWJ1ZyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcblxuLyoqXG4gKiBLZXktVmFsdWXjga7jg5rjgqLjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcbiAqIGNzbU1hcOOCr+ODqeOCueOBruWGhemDqOODh+ODvOOCv+OBp+S9v+eUqOOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0ga2V5IEtleeOBqOOBl+OBpuOCu+ODg+ODiOOBmeOCi+WApFxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWXjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihrZXk/OiBfS2V5VCwgdmFsdWU/OiBfVmFsVCkge1xuICAgIHRoaXMuZmlyc3QgPSBrZXkgPT0gdW5kZWZpbmVkID8gbnVsbCA6IGtleTtcblxuICAgIHRoaXMuc2Vjb25kID0gdmFsdWUgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIGZpcnN0OiBfS2V5VDsgLy8ga2V544Go44GX44Gm55So44GE44KL5aSJ5pWwXG4gIHB1YmxpYyBzZWNvbmQ6IF9WYWxUOyAvLyB2YWx1ZeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxufVxuXG4vKipcbiAqIOODnuODg+ODl+Wei1xuICovXG5leHBvcnQgY2xhc3MgY3NtTWFwPF9LZXlULCBfVmFsVD4ge1xuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBzaXplIOWIneacn+WMluaZgueCueOBp+eiuuS/neOBmeOCi+OCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNpemU/OiBudW1iZXIpIHtcbiAgICBpZiAoc2l6ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChzaXplIDwgMSkge1xuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KHNpemUpO1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICB0aGlzLl9kdW1teVZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq3jg7zjgpLov73liqDjgZnjgotcbiAgICogQHBhcmFtIGtleSDmlrDjgZ/jgavov73liqDjgZnjgovjgq3jg7xcbiAgICovXG4gIHB1YmxpYyBhcHBlbmRLZXkoa2V5OiBfS2V5VCk6IHZvaWQge1xuICAgIC8vIOaWsOOBl+OBj0tleS9WYWx1ZeOBruODmuOCouOCkuS9nOOCi1xuICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyAxLCBmYWxzZSk7IC8vIDHjgaTku6XkuIrlhaXjgovpmpnplpPjgpLkvZzjgotcbiAgICAvLyDmlrDjgZfjgYRrZXkvdmFsdWXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga9fc2l6ZVxuXG4gICAgdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemVdID0gbmV3IGNzbVBhaXI8X0tleVQsIF9WYWxUPihrZXkpO1xuICAgIHRoaXMuX3NpemUgKz0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShnZXQpXG4gICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZShrZXk6IF9LZXlUKTogX1ZhbFQge1xuICAgIGxldCBmb3VuZCA9IC0xO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZvdW5kID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBlbmRLZXkoa2V5KTsgLy8g5paw6KaP44Kt44O844KS6L+95YqgXG4gICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtrZXld44Gu44Kq44O844OQ44O844Ot44O844OJKHNldClcbiAgICogQHBhcmFtIGtleSDmt7vlrZfjgYvjgonnibnlrprjgZXjgozjgotWYWx1ZeWApFxuICAgKiBAcGFyYW0gdmFsdWUg5Luj5YWl44GZ44KLVmFsdWXlgKRcbiAgICovXG4gIHB1YmxpYyBzZXRWYWx1ZShrZXk6IF9LZXlULCB2YWx1ZTogX1ZhbFQpOiB2b2lkIHtcbiAgICBsZXQgZm91bmQgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcbiAgICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+a4oeOBl+OBn0tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi+OBi1xuICAgKiBAcGFyYW0ga2V5IOWtmOWcqOOCkueiuuiqjeOBmeOCi2tleVxuICAgKiBAcmV0dXJuIHRydWUg5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdChrZXk6IF9LZXlUKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICoga2V5VmFsdWXjga7jg53jgqTjg7Pjgr/jgpLlhajjgabop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcblxuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgpLnorrkv53jgZnjgotcbiAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GE44CCXG4gICAqIEBwYXJhbSBmaXRUb1NpemUgdHJ1ZeOBquOCieaMh+WumuOBl+OBn+OCteOCpOOCuuOBq+WQiOOCj+OBm+OCi+OAgmZhbHNl44Gq44KJ44K144Kk44K644KSMuWAjeeiuuS/neOBl+OBpuOBiuOBj+OAglxuICAgKi9cbiAgcHVibGljIHByZXBhcmVDYXBhY2l0eShuZXdTaXplOiBudW1iZXIsIGZpdFRvU2l6ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChuZXdTaXplID4gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICBpZiAoIWZpdFRvU2l6ZSAmJiBuZXdTaXplIDwgY3NtTWFwLkRlZmF1bHRTaXplKVxuICAgICAgICAgIG5ld1NpemUgPSBjc21NYXAuRGVmYXVsdFNpemU7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IHRoaXMuX2tleVZhbHVlcy5sZW5ndGggKiAyKVxuICAgICAgICAgIG5ld1NpemUgPSB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMjtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFiOmgreimgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGJlZ2luKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMsIDApO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu57WC56uv6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuX3NpemVcbiAgICApOyAvLyDntYLkuoZcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xuICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xuICAgICAgcmV0dXJuIGl0ZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXG4gICAgfVxuXG4gICAgLy8g5YmK6ZmkXG4gICAgdGhpcy5fa2V5VmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgLS10aGlzLl9zaXplO1xuXG4gICAgY29uc3QgaXRlMjogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxuICAgICAgdGhpcyxcbiAgICAgIGluZGV4XG4gICAgKTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YCk44KSMzLjg5Pjg4Pjg4jnrKblj7fku5jjgY3mlbTmlbDlnovjgafjg4Djg7Pjg5fjgZnjgotcbiAgICovXG4gIHB1YmxpYyBkdW1wQXNJbnQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKCd7MH0gLCcsIHRoaXMuX2tleVZhbHVlc1tpXSk7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZygnXFxuJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBEZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rjga7liJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbiAgcHVibGljIF9rZXlWYWx1ZXM6IGNzbVBhaXI8X0tleVQsIF9WYWxUPltdOyAvLyBrZXktdmFsdWXjg5rjgqLjga7phY3liJdcbiAgcHVibGljIF9kdW1teVZhbHVlOiBfVmFsVDsgLy8g56m644Gu5YCk44KS6L+U44GZ54K644Gu44OA44Of44O8XG4gIHB1YmxpYyBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbn1cblxuLyoqXG4gKiBjc21NYXA8VD7jga7jgqTjg4bjg6zjg7zjgr9cbiAqL1xuZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2PzogY3NtTWFwPF9LZXlULCBfVmFsVD4sIGlkeD86IG51bWJlcikge1xuICAgIHRoaXMuX21hcCA9IHYgIT0gdW5kZWZpbmVkID8gdiA6IG5ldyBjc21NYXA8X0tleVQsIF9WYWxUPigpO1xuXG4gICAgdGhpcy5faW5kZXggPSBpZHggIT0gdW5kZWZpbmVkID8gaWR4IDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgc2V0KGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcbiAgICB0aGlzLl9tYXAgPSBpdGUuX21hcDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0rK+a8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICArK3RoaXMuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWJjee9ruOBjS0t5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgcHJlRGVjcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIC0tdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNKyvmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcy5fbWFwLCB0aGlzLl9pbmRleCsrKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgcmV0dXJuIGl0ZW9sZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvoznva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLl9tYXAsIHRoaXMuX2luZGV4KTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgdGhpcy5fbWFwID0gaXRlb2xkLl9tYXA7XG4gICAgdGhpcy5faW5kZXggPSBpdGVvbGQuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqICrmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBwdHIoKTogY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLl9rZXlWYWx1ZXNbdGhpcy5faW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqICE95ryU566XXG4gICAqL1xuICBwdWJsaWMgbm90RXF1YWwoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fbWFwICE9IGl0ZS5fbWFwO1xuICB9XG5cbiAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICBfbWFwOiBjc21NYXA8X0tleVQsIF9WYWxUPjsgLy8g44Kz44Oz44OG44OKXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbW1hcCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgY3NtTWFwID0gJC5jc21NYXA7XG4gIGV4cG9ydCB0eXBlIGNzbU1hcDxLLCBWPiA9ICQuY3NtTWFwPEssIFY+O1xuICBleHBvcnQgY29uc3QgY3NtUGFpciA9ICQuY3NtUGFpcjtcbiAgZXhwb3J0IHR5cGUgY3NtUGFpcjxLLCBWPiA9ICQuY3NtUGFpcjxLLCBWPjtcbiAgZXhwb3J0IGNvbnN0IGl0ZXJhdG9yID0gJC5pdGVyYXRvcjtcbiAgZXhwb3J0IHR5cGUgaXRlcmF0b3I8SywgVj4gPSAkLml0ZXJhdG9yPEssIFY+O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDnn6nlvaLlvaLnirbvvIjluqfmqJnjg7vplbfjgZXjga9mbG9hdOWApO+8ieOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgY3NtUmVjdCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIHgg5bem56uvWOW6p+aomVxuICAgKiBAcGFyYW0geSDkuIrnq69Z5bqn5qiZXG4gICAqIEBwYXJhbSB3IOW5hVxuICAgKiBAcGFyYW0gaCDpq5jjgZVcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih4PzogbnVtYmVyLCB5PzogbnVtYmVyLCB3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3O1xuICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKyAwLjUgKiB0aGlzLndpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouS4reWkruOBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueSArIDAuNSAqIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOWPs+WBtOOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRSaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+err+OBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRCb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i44Gr5YCk44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSByIOefqeW9ouOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHNldFJlY3QocjogY3NtUmVjdCk6IHZvaWQge1xuICAgIHRoaXMueCA9IHIueDtcbiAgICB0aGlzLnkgPSByLnk7XG4gICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSByLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jgpLou7jjgavjgZfjgabnuKbmqKrjgpLmi6HnuK7jgZnjgotcbiAgICogQHBhcmFtIHcg5bmF5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXG4gICAqIEBwYXJhbSBoIOmrmOOBleaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgKi9cbiAgcHVibGljIGV4cGFuZCh3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgIHRoaXMueCAtPSB3O1xuICAgIHRoaXMueSAtPSBoO1xuICAgIHRoaXMud2lkdGggKz0gdyAqIDIuMDtcbiAgICB0aGlzLmhlaWdodCArPSBoICogMi4wO1xuICB9XG5cbiAgcHVibGljIHg6IG51bWJlcjsgLy8g5bem56uvWOW6p+aomVxuICBwdWJsaWMgeTogbnVtYmVyOyAvLyDkuIrnq69Z5bqn5qiZXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyOyAvLyDluYVcbiAgcHVibGljIGhlaWdodDogbnVtYmVyOyAvLyDpq5jjgZVcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3NtcmVjdGYnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbVJlY3QgPSAkLmNzbVJlY3Q7XG4gIGV4cG9ydCB0eXBlIGNzbVJlY3QgPSAkLmNzbVJlY3Q7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOaWh+Wtl+WIl+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgY3NtU3RyaW5nIHtcbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OCkuW+jOaWueOBq+i/veWKoOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gYyDov73liqDjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiDmm7TmlrDjgZXjgozjgZ/mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBhcHBlbmQoYzogc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiBjc21TdHJpbmcge1xuICAgIHRoaXMucyArPSBsZW5ndGggIT09IHVuZGVmaW5lZCA/IGMuc3Vic3RyKDAsIGxlbmd0aCkgOiBjO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X44K144Kk44K644KS5ouh5by144GX44Gm5paH5a2X44KS5Z+L44KB44KLXG4gICAqIEBwYXJhbSBsZW5ndGggICAg5ouh5by144GZ44KL5paH5a2X5pWwXG4gICAqIEBwYXJhbSB2ICAgICAgICAg5Z+L44KB44KL5paH5a2XXG4gICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgZXhwYW5zaW9uKGxlbmd0aDogbnVtYmVyLCB2OiBzdHJpbmcpOiBjc21TdHJpbmcge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYXBwZW5kKHYpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBrumVt+OBleOCkuODkOOCpOODiOaVsOOBp+WPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldEJ5dGVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnMpLnJlcGxhY2UoLyUuLi9nLCAneCcpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjga7plbfjgZXjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfmr5TovIMgPFxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlsI/jgZXjgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcbiAgICovXG4gIHB1YmxpYyBpc0xlc3MoczogY3NtU3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucyA8IHMucztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfmr5TovIMgPlxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlsI/jgZXjgYRcbiAgICovXG4gIHB1YmxpYyBpc0dyZWF0KHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPiBzLnM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDID09XG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOetieOBl+OBhFxuICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOeVsOOBquOCi1xuICAgKi9cbiAgcHVibGljIGlzRXF1YWwoczogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucyA9PSBzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBjOepuuOBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJuIHRydWU6IOepuuOBruaWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIGZhbHNlOiDlgKTjgYzoqK3lrprjgZXjgozjgabjgYTjgotcbiAgICovXG4gIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMubGVuZ3RoID09IDA7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKSB7XG4gICAgdGhpcy5zID0gcztcbiAgfVxuXG4gIHM6IHN0cmluZztcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3Ntc3RyaW5nJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21TdHJpbmcgPSAkLmNzbVN0cmluZztcbiAgZXhwb3J0IHR5cGUgY3NtU3RyaW5nID0gJC5jc21TdHJpbmc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOODmeOCr+OCv+ODvOWei++8iOWPr+WkiemFjeWIl+Wei++8iVxuICovXG5leHBvcnQgY2xhc3MgY3NtVmVjdG9yPFQ+IHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gaW5paXRhbENhcGFjaXR5IOWIneacn+WMluW+jOOBruOCreODo+ODkeOCt+ODhuOCo+OAguODh+ODvOOCv+OCteOCpOOCuuOBr19jYXBhY2l0eSAqIHNpemVvZihUKVxuICAgKiBAcGFyYW0gemVyb0NsZWFyIHRydWXjgarjgonliJ3mnJ/ljJbmmYLjgavnorrkv53jgZfjgZ/poJjln5/jgpIw44Gn5Z+L44KB44KLXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ2FwYWNpdHkgPSAwKSB7XG4gICAgaWYgKGluaXRpYWxDYXBhY2l0eSA8IDEpIHtcbiAgICAgIHRoaXMuX3B0ciA9IFtdO1xuICAgICAgdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShpbml0aWFsQ2FwYWNpdHkpO1xuICAgICAgdGhpcy5fY2FwYWNpdHkgPSBpbml0aWFsQ2FwYWNpdHk7XG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgYXQoaW5kZXg6IG51bWJlcik6IFQge1xuICAgIHJldHVybiB0aGlzLl9wdHJbaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0gaW5kZXgg6KaB57Sg44KS44K744OD44OI44GZ44KL44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2YWx1ZSDjgrvjg4Pjg4jjgZnjgovopoHntKBcbiAgICovXG4gIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLl9wdHJbaW5kZXhdID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0KG9mZnNldCA9IDApOiBUW10ge1xuICAgIGNvbnN0IHJldDogVFtdID0gbmV3IEFycmF5PFQ+KCk7XG4gICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgcmV0LnB1c2godGhpcy5fcHRyW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdXNoQmFja+WHpueQhuOAgeOCs+ODs+ODhuODiuOBq+aWsOOBn+OBquimgee0oOOCkui/veWKoOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgUHVzaEJhY2vlh6bnkIbjgafov73liqDjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBwdXNoQmFjayh2YWx1ZTogVCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zaXplID49IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPT0gMCA/IGNzbVZlY3Rvci5zX2RlZmF1bHRTaXplIDogdGhpcy5fY2FwYWNpdHkgKiAyXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3B0clt0aGlzLl9zaXplKytdID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YWo6KaB57Sg44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fcHRyLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu6KaB57Sg5pWw44KS6L+U44GZXG4gICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOBq+WvvuOBl+OBpuS7o+WFpeWHpueQhuOCkuihjOOBhlxuICAgKiBAcGFyYW0gbmV3U2l6ZSDku6PlhaXlh6bnkIblvozjga7jgrXjgqTjgrpcbiAgICogQHBhcmFtIHZhbHVlIOimgee0oOOBq+S7o+WFpeOBmeOCi+WApFxuICAgKi9cbiAgcHVibGljIGFzc2lnbihuZXdTaXplOiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgY29uc3QgY3VyU2l6ZSA9IHRoaXMuX3NpemU7XG5cbiAgICBpZiAoY3VyU2l6ZSA8IG5ld1NpemUpIHtcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICB0aGlzLl9wdHJbaV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrlpInmm7RcbiAgICovXG4gIHB1YmxpYyByZXNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCA9IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVNpemUobmV3U2l6ZSwgdmFsdWUsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOOCuuWkieabtFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVNpemUoXG4gICAgbmV3U2l6ZTogbnVtYmVyLFxuICAgIHZhbHVlOiBhbnkgPSBudWxsLFxuICAgIGNhbGxQbGFjZW1lbnROZXcgPSB0cnVlXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGN1clNpemU6IG51bWJlciA9IHRoaXMuX3NpemU7XG5cbiAgICBpZiAoY3VyU2l6ZSA8IG5ld1NpemUpIHtcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxuXG4gICAgICBpZiAoY2FsbFBsYWNlbWVudE5ldykge1xuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBuZXdcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobmV3IHZhbHVlKCkpKTtcbiAgICAgICAgICB9IC8vIOODl+ODquODn+ODhuOCo+ODluWei+OBquOBruOBp+WApOa4oeOBl1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmV3U2l6ZSA8PSB0aGlzLl9zaXplXG4gICAgICAvLy0tLVxuICAgICAgY29uc3Qgc3ViID0gdGhpcy5fc2l6ZSAtIG5ld1NpemU7XG4gICAgICB0aGlzLl9wdHIuc3BsaWNlKHRoaXMuX3NpemUgLSBzdWIsIHN1Yik7IC8vIOS4jeimgeOBquOBruOBp+egtOajhOOBmeOCi1xuICAgIH1cbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgavjgrPjg7Pjg4bjg4ropoHntKDjgpLmjL/lhaXjgZnjgotcbiAgICogQHBhcmFtIHBvc2l0aW9uIOaMv+WFpeOBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gYmVnaW4g5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu6ZaL5aeL5L2N572uXG4gICAqIEBwYXJhbSBlbmQg5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu57WC56uv5L2N572uXG4gICAqL1xuICBwdWJsaWMgaW5zZXJ0KFxuICAgIHBvc2l0aW9uOiBpdGVyYXRvcjxUPixcbiAgICBiZWdpbjogaXRlcmF0b3I8VD4sXG4gICAgZW5kOiBpdGVyYXRvcjxUPlxuICApOiB2b2lkIHtcbiAgICBsZXQgZHN0U2k6IG51bWJlciA9IHBvc2l0aW9uLl9pbmRleDtcbiAgICBjb25zdCBzcmNTaTogbnVtYmVyID0gYmVnaW4uX2luZGV4O1xuICAgIGNvbnN0IHNyY0VpOiBudW1iZXIgPSBlbmQuX2luZGV4O1xuXG4gICAgY29uc3QgYWRkQ291bnQ6IG51bWJlciA9IHNyY0VpIC0gc3JjU2k7XG5cbiAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9zaXplICsgYWRkQ291bnQpO1xuXG4gICAgLy8g5oy/5YWl55So44Gu5pei5a2Y44OH44O844K/44KS44K344OV44OI44GX44Gm6ZqZ6ZaT44KS5L2c44KLXG4gICAgY29uc3QgYWRkU2l6ZSA9IHRoaXMuX3NpemUgLSBkc3RTaTtcbiAgICBpZiAoYWRkU2l6ZSA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkU2l6ZTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3B0ci5zcGxpY2UoZHN0U2kgKyBpLCAwLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBzcmNTaTsgaSA8IHNyY0VpOyBpKyssIGRzdFNpKyspIHtcbiAgICAgIHRoaXMuX3B0cltkc3RTaV0gPSBiZWdpbi5fdmVjdG9yLl9wdHJbaV07XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZSA9IHRoaXMuX3NpemUgKyBhZGRDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonjgqTjg7Pjg4fjg4Pjgq/jgrnjgafmjIflrprjgZfjgZ/opoHntKDjgpLliYrpmaTjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg5YmK6Zmk5a6f6KGMXG4gICAqIEByZXR1cm4gZmFsc2Ug5YmK6Zmk56+E5Zuy5aSWXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXG4gICAgfVxuXG4gICAgdGhpcy5fcHRyLnNwbGljZShpbmRleCwgMSk7XG4gICAgLS10aGlzLl9zaXplO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GX44Gm5LuW44Gu6KaB57Sg44KS44K344OV44OI44GZ44KLXG4gICAqIEBwYXJhbSBpdGUg5YmK6Zmk44GZ44KL6KaB57SgXG4gICAqL1xuICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIC8vIOWJiumZpFxuICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIGNvbnN0IGl0ZTI6IGl0ZXJhdG9yPFQ+ID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIGluZGV4KTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXG4gICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhC5cbiAgICovXG4gIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKG5ld1NpemUgPiB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgaWYgKHRoaXMuX2NhcGFjaXR5ID09IDApIHtcbiAgICAgICAgdGhpcy5fcHRyID0gbmV3IEFycmF5KG5ld1NpemUpO1xuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wdHIubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9XG4gICAgICB0aGlzLl9zaXplID09IDAgPyB0aGlzLmVuZCgpIDogbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIDApO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu57WC56uv6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFQ+ID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIHRoaXMuX3NpemUpO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0T2Zmc2V0KG9mZnNldDogbnVtYmVyKTogY3NtVmVjdG9yPFQ+IHtcbiAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgY3NtVmVjdG9yPFQ+KCk7XG4gICAgbmV3VmVjdG9yLl9wdHIgPSB0aGlzLmdldChvZmZzZXQpO1xuICAgIG5ld1ZlY3Rvci5fc2l6ZSA9IHRoaXMuZ2V0KG9mZnNldCkubGVuZ3RoO1xuICAgIG5ld1ZlY3Rvci5fY2FwYWNpdHkgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcblxuICAgIHJldHVybiBuZXdWZWN0b3I7XG4gIH1cblxuICBfcHRyOiBUW107IC8vIOOCs+ODs+ODhuODiuOBruWFiOmgreOCouODieODrOOCuVxuICBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbiAgX2NhcGFjaXR5OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo1xuXG4gIHN0YXRpYyByZWFkb25seSBzX2RlZmF1bHRTaXplID0gMTA7IC8vIOOCs+ODs+ODhuODiuWIneacn+WMluOBruODh+ODleOCqeODq+ODiOOCteOCpOOCulxufVxuXG5leHBvcnQgY2xhc3MgaXRlcmF0b3I8VD4ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iodj86IGNzbVZlY3RvcjxUPiwgaW5kZXg/OiBudW1iZXIpIHtcbiAgICB0aGlzLl92ZWN0b3IgPSB2ICE9IHVuZGVmaW5lZCA/IHYgOiBudWxsO1xuICAgIHRoaXMuX2luZGV4ID0gaW5kZXggIT0gdW5kZWZpbmVkID8gaW5kZXggOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOS7o+WFpVxuICAgKi9cbiAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcbiAgICB0aGlzLl92ZWN0b3IgPSBpdGUuX3ZlY3RvcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0rK+a8lOeul1xuICAgKi9cbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgKyt0aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0tLea8lOeul1xuICAgKi9cbiAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgLS10aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlvoznva7jgY0rK+a8lOeul+WtkFxuICAgKi9cbiAgcHVibGljIGluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMuX3ZlY3RvciwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHJldHVybiBpdGVvbGQ7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNLS3mvJTnrpflrZBcbiAgICovXG4gIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4LS0pOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcbiAgICByZXR1cm4gaXRlb2xkO1xuICB9XG5cbiAgLyoqXG4gICAqIHB0clxuICAgKi9cbiAgcHVibGljIHB0cigpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fdmVjdG9yLl9wdHJbdGhpcy5faW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBzdWJzdGl0dXRpb24oaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogIT3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBub3RFcXVhbChpdGU6IGl0ZXJhdG9yPFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fdmVjdG9yICE9IGl0ZS5fdmVjdG9yO1xuICB9XG5cbiAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICBfdmVjdG9yOiBjc21WZWN0b3I8VD47IC8vIOOCs+ODs+ODhuODilxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc212ZWN0b3InO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbVZlY3RvciA9ICQuY3NtVmVjdG9yO1xuICBleHBvcnQgdHlwZSBjc21WZWN0b3I8VD4gPSAkLmNzbVZlY3RvcjxUPjtcbiAgZXhwb3J0IGNvbnN0IGl0ZXJhdG9yID0gJC5pdGVyYXRvcjtcbiAgZXhwb3J0IHR5cGUgaXRlcmF0b3I8VD4gPSAkLml0ZXJhdG9yPFQ+O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ1NNX0xPR19MRVZFTCxcbiAgQ1NNX0xPR19MRVZFTF9ERUJVRyxcbiAgQ1NNX0xPR19MRVZFTF9FUlJPUixcbiAgQ1NNX0xPR19MRVZFTF9JTkZPLFxuICBDU01fTE9HX0xFVkVMX1ZFUkJPU0UsXG4gIENTTV9MT0dfTEVWRUxfV0FSTklOR1xufSBmcm9tICcuLi9jdWJpc21mcmFtZXdvcmtjb25maWcnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrLCBMb2dMZXZlbCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbmV4cG9ydCBjb25zdCBDdWJpc21Mb2dQcmludCA9IChsZXZlbDogTG9nTGV2ZWwsIGZtdDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4ge1xuICBDdWJpc21EZWJ1Zy5wcmludChsZXZlbCwgJ1tDU01dJyArIGZtdCwgYXJncyk7XG59O1xuXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nUHJpbnRJbiA9IChsZXZlbDogTG9nTGV2ZWwsIGZtdDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4ge1xuICBDdWJpc21Mb2dQcmludChsZXZlbCwgZm10ICsgJ1xcbicsIGFyZ3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IENTTV9BU1NFUlQgPSAoZXhwcjogYW55KSA9PiB7XG4gIGNvbnNvbGUuYXNzZXJ0KGV4cHIpO1xufTtcblxuZXhwb3J0IGxldCBDdWJpc21Mb2dWZXJib3NlOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dEZWJ1ZzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nSW5mbzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nV2FybmluZzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRXJyb3I6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbmlmIChDU01fTE9HX0xFVkVMIDw9IENTTV9MT0dfTEVWRUxfVkVSQk9TRSkge1xuICBDdWJpc21Mb2dWZXJib3NlID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfVmVyYm9zZSwgJ1tWXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRGVidWcsICdbRF0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfREVCVUcpIHtcbiAgQ3ViaXNtTG9nRGVidWcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgJ1tEXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9JTkZPKSB7XG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9XQVJOSU5HKSB7XG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfRVJST1IpIHtcbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufVxuXG4vKipcbiAqIOODh+ODkOODg+OCsOeUqOOBruODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCueOAglxuICog44Ot44Kw44Gu5Ye65Yqb44CB44OQ44Kk44OI44Gu44OA44Oz44OX44Gq44GpXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21EZWJ1ZyB7XG4gIC8qKlxuICAgKiDjg63jgrDjgpLlh7rlipvjgZnjgovjgILnrKzkuIDlvJXmlbDjgavjg63jgrDjg6zjg5njg6vjgpLoqK3lrprjgZnjgovjgIJcbiAgICogQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeaZguOBq+OCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhOOAglxuICAgKlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwg44Ot44Kw44Os44OZ44Or44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBmb3JtYXQg5pu45byP5LuY44GN5paH5a2X5YiXXG4gICAqIEBwYXJhbSBhcmdzIOWPr+WkiemVt+W8leaVsFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcmludChsb2dMZXZlbDogTG9nTGV2ZWwsIGZvcm1hdDogc3RyaW5nLCBhcmdzPzogYW55W10pOiB2b2lkIHtcbiAgICAvLyDjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYRcbiAgICBpZiAobG9nTGV2ZWwgPCBDdWJpc21GcmFtZXdvcmsuZ2V0TG9nZ2luZ0xldmVsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsb2dQcmludDogTGl2ZTJEQ3ViaXNtQ29yZS5jc21Mb2dGdW5jdGlvbiA9XG4gICAgICBDdWJpc21GcmFtZXdvcmsuY29yZUxvZ0Z1bmN0aW9uO1xuXG4gICAgaWYgKCFsb2dQcmludCkgcmV0dXJuO1xuXG4gICAgY29uc3QgYnVmZmVyOiBzdHJpbmcgPSBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtLCBrKSA9PiB7XG4gICAgICByZXR1cm4gYXJnc1trXTtcbiAgICB9KTtcbiAgICBsb2dQcmludChidWZmZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODvOOCv+OBi+OCieaMh+WumuOBl+OBn+mVt+OBleOBoOOBkeODgOODs+ODl+WHuuWKm+OBmeOCi+OAglxuICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXG4gICAqXG4gICAqIEBwYXJhbSBsb2dMZXZlbCDjg63jgrDjg6zjg5njg6vjga7oqK3lrppcbiAgICogQHBhcmFtIGRhdGEg44OA44Oz44OX44GZ44KL44OH44O844K/XG4gICAqIEBwYXJhbSBsZW5ndGgg44OA44Oz44OX44GZ44KL6ZW344GVXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGR1bXBCeXRlcyhcbiAgICBsb2dMZXZlbDogTG9nTGV2ZWwsXG4gICAgZGF0YTogVWludDhBcnJheSxcbiAgICBsZW5ndGg6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSAlIDE2ID09IDAgJiYgaSA+IDApIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcbiAgICAgIGVsc2UgaWYgKGkgJSA4ID09IDAgJiYgaSA+IDApIHRoaXMucHJpbnQobG9nTGV2ZWwsICcgICcpO1xuICAgICAgdGhpcy5wcmludChsb2dMZXZlbCwgJ3swfSAnLCBbZGF0YVtpXSAmIDB4ZmZdKTtcbiAgICB9XG5cbiAgICB0aGlzLnByaW50KGxvZ0xldmVsLCAnXFxuJyk7XG4gIH1cblxuICAvKipcbiAgICogcHJpdmF0ZSDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21kZWJ1Zyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtRGVidWcgPSAkLkN1YmlzbURlYnVnO1xuICBleHBvcnQgdHlwZSBDdWJpc21EZWJ1ZyA9ICQuQ3ViaXNtRGVidWc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBzdHJ0b2QgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgY3NtTWFwLCBpdGVyYXRvciBhcyBjc21NYXBfaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IsIGl0ZXJhdG9yIGFzIGNzbVZlY3Rvcl9pdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0luZm8gfSBmcm9tICcuL2N1YmlzbWRlYnVnJztcblxuLy8gU3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKeOBp+WIneacn+WMluOBmeOCi1xuY29uc3QgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSCA9ICdFcnJvcjogdHlwZSBtaXNtYXRjaCc7XG5jb25zdCBDU01fSlNPTl9FUlJPUl9JTkRFWF9PRl9CT1VORFMgPSAnRXJyb3I6IGluZGV4IG91dCBvZiBib3VuZHMnO1xuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jgqjjg6zjg6Hjg7Pjg4jjga7opoHntKDjga7ln7rlupXjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZhbHVlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX5Z6L44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShzdHJpbmcpXG4gICAqL1xuICBwdWJsaWMgZ2V0UmF3U3RyaW5nKGRlZmF1bHRWYWx1ZT86IHN0cmluZywgaW5kZW50Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoZGVmYXVsdFZhbHVlLCBpbmRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAqL1xuICBwdWJsaWMgdG9JbnQoZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgKi9cbiAgcHVibGljIHRvRmxvYXQoZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICovXG4gIHB1YmxpYyB0b0Jvb2xlYW4oZGVmYXVsdFZhbHVlID0gZmFsc2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOOCuuOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLphY3liJfjgafov5TjgZkoVmFsdWVbXSlcbiAgICovXG4gIHB1YmxpYyBnZXRBcnJheShkZWZhdWx0VmFsdWU6IFZhbHVlW10gPSBudWxsKTogVmFsdWVbXSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLjgrPjg7Pjg4bjg4rjgafov5TjgZkoYXJyYXkpXG4gICAqL1xuICBwdWJsaWMgZ2V0VmVjdG9yKGRlZmF1bHRWYWx1ZSA9IG5ldyBjc21WZWN0b3I8VmFsdWU+KCkpOiBjc21WZWN0b3I8VmFsdWU+IHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuODnuODg+ODl+OBp+i/lOOBmShjc21NYXA8Y3NtU3RyaW5nLCBWYWx1ZT4pXG4gICAqL1xuICBwdWJsaWMgZ2V0TWFwKGRlZmF1bHRWYWx1ZT86IGNzbU1hcDxzdHJpbmcsIFZhbHVlPik6IGNzbU1hcDxzdHJpbmcsIFZhbHVlPiB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW3N0cmluZyB8IGNzbVN0cmluZ11cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5U3RyaW5nKHM6IHN0cmluZyB8IGNzbVN0cmluZyk6IFZhbHVlIHtcbiAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuODg+ODl+OBruOCreODvOS4gOimp+OCkuOCs+ODs+ODhuODiuOBp+i/lOOBmVxuICAgKlxuICAgKiBAcmV0dXJuIOODnuODg+ODl+OBruOCreODvOOBruS4gOimp1xuICAgKi9cbiAgcHVibGljIGdldEtleXMoKTogY3NtVmVjdG9yPHN0cmluZz4ge1xuICAgIHJldHVybiBWYWx1ZS5zX2R1bW15S2V5cztcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOOCqOODqeODvOWApOOBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0Vycm9yKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjG51bGzjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOecn+WBveWApOOBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0Jvb2woKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5pWw5YCk5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzRmxvYXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0FycmF5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOODnuODg+ODl+Wei+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc01hcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgKi9cbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjgavjgqjjg6njg7zlgKTjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRFcnJvck5vdEZvckNsaWVudENhbGwoZXJyb3JTdHI6IHN0cmluZyk6IFZhbHVlIHtcbiAgICByZXR1cm4gSnNvbkVycm9yLmVycm9yVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW55So44Oh44K944OD44OJXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXRpY0luaXRpYWxpemVOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWQge1xuICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IG5ldyBKc29uQm9vbGVhbih0cnVlKTtcbiAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKGZhbHNlKTtcbiAgICBWYWx1ZS5lcnJvclZhbHVlID0gbmV3IEpzb25FcnJvcignRVJST1InLCB0cnVlKTtcbiAgICBWYWx1ZS5udWxsVmFsdWUgPSBuZXcgSnNvbk51bGx2YWx1ZSgpO1xuICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oq44Oq44O844K555So44Oh44K944OD44OJXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2VOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWQge1xuICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IG51bGw7XG4gICAgSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZSA9IG51bGw7XG4gICAgVmFsdWUuZXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgVmFsdWUubnVsbFZhbHVlID0gbnVsbDtcbiAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3N0cmluZ0J1ZmZlcjogc3RyaW5nOyAvLyDmloflrZfliJfjg5Djg4Pjg5XjgqFcblxuICBwcml2YXRlIHN0YXRpYyBzX2R1bW15S2V5czogY3NtVmVjdG9yPHN0cmluZz47IC8vIOODgOODn+ODvOOCreODvFxuXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3JWYWx1ZTogVmFsdWU7IC8vIOS4gOaZgueahOOBqui/lOOCiuWApOOBqOOBl+OBpui/lOOBmeOCqOODqeODvOOAgiBDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2XjgZnjgovjgb7jgafjga9kZWxldGXjgZfjgarjgYRcbiAgcHVibGljIHN0YXRpYyBudWxsVmFsdWU6IFZhbHVlOyAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZlOVUxM44CCICAgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXG59XG5cbi8qKlxuICogQXNjaWnmloflrZfjga7jgb/lr77lv5zjgZfjgZ/mnIDlsI/pmZDjga7ou73ph49KU09O44OR44O844K144CCXG4gKiDku5Xmp5jjga9KU09O44Gu44K144OW44K744OD44OI44Go44Gq44KL44CCXG4gKiDoqK3lrprjg5XjgqHjgqTjg6sobW9kZWwzLmpzb24p44Gq44Gp44Gu44Ot44O844OJ55SoXG4gKlxuICogW+acquWvvuW/nOmgheebrl1cbiAqIOODu+aXpeacrOiqnuOBquOBqeOBrumdnkFTQ0lJ5paH5a2XXG4gKiDjg7tl44Gr44KI44KL5oyH5pWw6KGo54++XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Kc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcj86IEFycmF5QnVmZmVyLCBsZW5ndGg/OiBudW1iZXIpIHtcbiAgICB0aGlzLl9lcnJvciA9IG51bGw7XG4gICAgdGhpcy5fbGluZUNvdW50ID0gMDtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcblxuICAgIGlmIChidWZmZXIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnBhcnNlQnl0ZXMoYnVmZmVyLCBsZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5DjgqTjg4jjg4fjg7zjgr/jgYvjgonnm7TmjqXjg63jg7zjg4njgZfjgabjg5Hjg7zjgrnjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciDjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44K144Kk44K6XG4gICAqIEByZXR1cm4gQ3ViaXNtSnNvbuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCueOAguWkseaVl+OBl+OBn+OCiU5VTExcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIGNvbnN0IGpzb24gPSBuZXcgQ3ViaXNtSnNvbigpO1xuICAgIGNvbnN0IHN1Y2NlZWRlZDogYm9vbGVhbiA9IGpzb24ucGFyc2VCeXRlcyhidWZmZXIsIHNpemUpO1xuXG4gICAgaWYgKCFzdWNjZWVkZWQpIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Kq44OW44K444Kn44Kv44OI44Gu6Kej5pS+5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBDdWJpc21Kc29u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtSnNvbikge1xuICAgIGluc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu44Or44O844OI6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0Um9vdCgpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gIH1cblxuICAvKipcbiAgICogIFVuaWNvZGXjga7jg5DjgqTjg4rjg6rjgpJTdHJpbmfjgavlpInmj5tcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciDlpInmj5vjgZnjgovjg5DjgqTjg4rjg6rjg4fjg7zjgr9cbiAgICogQHJldHVybiDlpInmj5vlvozjga7mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBhcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHN0ciArPSAnJScgKyB0aGlzLnBhZCh1aW50OEFycmF5W2ldLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuXG4gICAgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqjjg7PjgrPjg7zjg4njgIHjg5Hjg4fjgqPjg7PjgrBcbiAgICovXG4gIHByaXZhdGUgcGFkKG46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT07jga7jg5Hjg7zjgrnjgpLlrp/ooYzjgZnjgotcbiAgICogQHBhcmFtIGJ1ZmZlciAgICDjg5Hjg7zjgrnlr77osaHjga7jg4fjg7zjgr/jg5DjgqTjg4hcbiAgICogQHBhcmFtIHNpemUgICAgICDjg4fjg7zjgr/jg5DjgqTjg4jjga7jgrXjgqTjgrpcbiAgICogcmV0dXJuIHRydWUgOiDmiJDlip9cbiAgICogcmV0dXJuIGZhbHNlOiDlpLHmlZdcbiAgICovXG4gIHB1YmxpYyBwYXJzZUJ5dGVzKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVuZFBvczogbnVtYmVyW10gPSBuZXcgQXJyYXkoMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgemFjeWIl1xuICAgIGNvbnN0IGRlY29kZUJ1ZmZlcjogc3RyaW5nID0gdGhpcy5hcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcik7XG4gICAgdGhpcy5fcm9vdCA9IHRoaXMucGFyc2VWYWx1ZShkZWNvZGVCdWZmZXIsIHNpemUsIDAsIGVuZFBvcyk7XG5cbiAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgIGxldCBzdHJidWYgPSAnXFwwJztcbiAgICAgIHN0cmJ1ZiA9ICdKc29uIHBhcnNlIGVycm9yIDogQGxpbmUgJyArICh0aGlzLl9saW5lQ291bnQgKyAxKSArICdcXG4nO1xuICAgICAgdGhpcy5fcm9vdCA9IG5ldyBKc29uU3RyaW5nKHN0cmJ1Zik7XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oJ3swfScsIHRoaXMuX3Jvb3QuZ2V0UmF3U3RyaW5nKCkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcm9vdCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25FcnJvcihuZXcgY3NtU3RyaW5nKHRoaXMuX2Vycm9yKSwgZmFsc2UpOyAvLyByb29044Gv6Kej5pS+44GV44KM44KL44Gu44Gn44Ko44Op44O844Kq44OW44K444Kn44Kv44OI44KS5Yil6YCU5L2c5oiQ44GZ44KLXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueaZguOBruOCqOODqeODvOWApOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFBhcnNlRXJyb3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OI6KaB57Sg44Gu5qyh44Gu6KaB57Sg44GM44OV44Kh44Kk44Or44Gu57WC56uv44Gg44Gj44Gf44KJdHJ1ZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGNoZWNrRW5kT2ZGaWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yb290LmdldEFycmF5KClbMV0uZXF1YWxzKCdFT0YnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Ko44Os44Oh44Oz44OI44GL44KJVmFsdWUoZmxvYXQsU3RyaW5nLFZhbHVlKixBcnJheSxudWxsLHRydWUsZmFsc2Up44KS44OR44O844K544GZ44KLXG4gICAqIOOCqOODrOODoeODs+ODiOOBruabuOW8j+OBq+W/nOOBmOOBpuWGhemDqOOBp1BhcnNlU3RyaW5nKCksIFBhcnNlT2JqZWN0KCksIFBhcnNlQXJyYXkoKeOCkuWRvOOBtlxuICAgKlxuICAgKiBAcGFyYW0gICBidWZmZXIgICAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gICBiZWdpbiAgICAgICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cbiAgICogQHBhcmFtICAgb3V0RW5kUG9zICAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxuICAgKi9cbiAgcHJvdGVjdGVkIHBhcnNlVmFsdWUoXG4gICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICkge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgbzogVmFsdWUgPSBudWxsO1xuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgZjogbnVtYmVyO1xuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYzogc3RyaW5nID0gYnVmZmVyW2ldO1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgIGNhc2UgJzQnOlxuICAgICAgICBjYXNlICc1JzpcbiAgICAgICAgY2FzZSAnNic6XG4gICAgICAgIGNhc2UgJzcnOlxuICAgICAgICBjYXNlICc4JzpcbiAgICAgICAgY2FzZSAnOSc6IHtcbiAgICAgICAgICBjb25zdCBhZnRlclN0cmluZzogc3RyaW5nW10gPSBuZXcgQXJyYXkoMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgVxuICAgICAgICAgIGYgPSBzdHJ0b2QoYnVmZmVyLnNsaWNlKGkpLCBhZnRlclN0cmluZyk7XG4gICAgICAgICAgb3V0RW5kUG9zWzBdID0gYnVmZmVyLmluZGV4T2YoYWZ0ZXJTdHJpbmdbMF0pO1xuICAgICAgICAgIHJldHVybiBuZXcgSnNvbkZsb2F0KGYpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICByZXR1cm4gbmV3IEpzb25TdHJpbmcoXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKVxuICAgICAgICAgICk7IC8vIFxcXCLjga7mrKHjga7mloflrZfjgYvjgolcbiAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgbyA9IHRoaXMucGFyc2VBcnJheShidWZmZXIsIGxlbmd0aCwgaSArIDEsIG91dEVuZFBvcyk7XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgIG8gPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnbic6IC8vIG51bGzku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBuZXcgSnNvbk51bGx2YWx1ZSgpOyAvLyDop6PmlL7jgafjgY3jgovjgojjgYbjgavjgZnjgotcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBudWxsJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJ3QnOiAvLyB0cnVl5Lul5aSW44Gr44Gq44GEXG4gICAgICAgICAgaWYgKGkgKyAzIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4udHJ1ZVZhbHVlO1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHRydWUnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnZic6IC8vIGZhbHNl5Lul5aSW44Gr44Gq44GEXG4gICAgICAgICAgaWYgKGkgKyA0IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZTtcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA1O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJywnOiAvLyBBcnJheSBzZXBhcmF0b3JcbiAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSAnXSc6IC8vIOS4jeato+OBqu+9neOBoOOBjOOCueOCreODg+ODl+OBmeOCi+OAgumFjeWIl+OBruacgOW+jOOBq+S4jeimgeOBqiAsIOOBjOOBguOCi+OBqOaAneOCj+OCjOOCi1xuICAgICAgICAgIG91dEVuZFBvc1swXSA9IGk7IC8vIOWQjOOBmOaWh+Wtl+OCkuWGjeWHpueQhlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiB2YWx1ZSc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgc3RyaW5nICAtPiAg44OR44O844K55a++6LGh44Gu5paH5a2X5YiXXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgLT4gIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gICBiZWdpbiAgIC0+ICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cbiAgICogQHBhcmFtICBvdXRFbmRQb3MgICAtPiAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgZfjgZ/mlodG5a2X5YiX6KaB57SgXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VTdHJpbmcoXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBpID0gYmVnaW47XG4gICAgbGV0IGM6IHN0cmluZywgYzI6IHN0cmluZztcbiAgICBjb25zdCByZXQ6IGNzbVN0cmluZyA9IG5ldyBjc21TdHJpbmcoJycpO1xuICAgIGxldCBidWZTdGFydDogbnVtYmVyID0gYmVnaW47IC8vIHNidWbjgavnmbvpjLLjgZXjgozjgabjgYTjgarjgYTmloflrZfjga7plovlp4vkvY3nva5cblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGMgPSBzdHJpbmdbaV07XG5cbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlICdcIic6IHtcbiAgICAgICAgICAvLyDntYLnq6/jga7igJ3jgIHjgqjjgrnjgrHjg7zjg5fmloflrZfjga/liKXjgavlh6bnkIbjgZXjgozjgovjga7jgafjgZPjgZPjgavmnaXjgarjgYRcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTsgLy8g4oCd44Gu5qyh44Gu5paH5a2XXG4gICAgICAgICAgcmV0LmFwcGVuZChzdHJpbmcuc2xpY2UoYnVmU3RhcnQpLCBpIC0gYnVmU3RhcnQpOyAvLyDliY3jga7mloflrZfjgb7jgafjgpLnmbvpjLLjgZnjgotcbiAgICAgICAgICByZXR1cm4gcmV0LnM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnLy8nOiB7XG4gICAgICAgICAgLy8g44Ko44K544Kx44O844OX44Gu5aC05ZCIXG4gICAgICAgICAgaSsrOyAvLyDvvJLmloflrZfjgpLjgrvjg4Pjg4jjgafmibHjgYZcblxuICAgICAgICAgIGlmIChpIC0gMSA+IGJ1ZlN0YXJ0KSB7XG4gICAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZTdGFydCA9IGkgKyAxOyAvLyDjgqjjgrnjgrHjg7zjg5fvvIjvvJLmloflrZcp44Gu5qyh44Gu5paH5a2X44GL44KJXG5cbiAgICAgICAgICBpZiAoaSA8IGxlbmd0aCkge1xuICAgICAgICAgICAgYzIgPSBzdHJpbmdbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYzIpIHtcbiAgICAgICAgICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxcXCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXCInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnLyc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnLycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxmJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcbicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFx0Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy91bmljb3JkIGVzY2FwZSBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2VzY2FwZSBlcnJvcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy9pbGxlZ2FsIGVuZCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogSlNPTuOBruOCquODluOCuOOCp+OCr+ODiOOCqOODrOODoeODs+ODiOOCkuODkeODvOOCueOBl+OBplZhbHVl44Kq44OW44K444Kn44Kv44OI44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gb3V0RW5kUG9zIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VPYmplY3QoXG4gICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICk6IFZhbHVlIHtcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJldDogSnNvbk1hcCA9IG5ldyBKc29uTWFwKCk7XG5cbiAgICAvLyBLZXk6IFZhbHVlXG4gICAgbGV0IGtleSA9ICcnO1xuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgYyA9ICcnO1xuICAgIGNvbnN0IGxvY2FsUmV0RW5kUG9zMjogbnVtYmVyW10gPSBBcnJheSgxKTtcbiAgICBsZXQgb2sgPSBmYWxzZTtcblxuICAgIC8vICwg44GM57aa44GP6ZmQ44KK44Or44O844OXXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRk9SX0xPT1A6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgbG9jYWxSZXRFbmRQb3MyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSA9IGxvY2FsUmV0RW5kUG9zMlswXTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QOyAvLy0tIGxvb3DjgYvjgonlh7rjgotcbiAgICAgICAgICBjYXNlICd9JzogLy8g6ZaJ44GY44Kr44OD44KzXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOepulxuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJzonIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5fjgZnjgovmloflrZdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFvaykge1xuICAgICAgICB0aGlzLl9lcnJvciA9ICdrZXkgbm90IGZvdW5kJztcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIG9rID0gZmFsc2U7XG5cbiAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICBGT1JfTE9PUDI6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMjtcbiAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICd9JyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgIC8vIGNhc2UgJyAnOiBjYXNlICdcXHQnIDogY2FzZSAnXFxyJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghb2spIHtcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBcIic6JyBub3QgZm91bmRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIOWApOOCkuODgeOCp+ODg+OCr1xuICAgICAgY29uc3QgdmFsdWU6IFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgbGVuZ3RoLCBpLCBsb2NhbFJldEVuZFBvczIpO1xuICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuXG4gICAgICAvLyByZXQucHV0KGtleSwgdmFsdWUpO1xuICAgICAgcmV0LnB1dChrZXksIHZhbHVlKTtcblxuICAgICAgRk9SX0xPT1AzOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDM7XG4gICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOato+W4uOe1guS6hlxuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgcGVyc2VPYmplY3QnO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOasoeOBruOAjFwi44CN44G+44Gn44Gu5paH5a2X5YiX44KS44OR44O844K544GZ44KL44CCXG4gICAqIEBwYXJhbSBidWZmZXIgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gb3V0RW5kUG9zIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VBcnJheShcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogVmFsdWUge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgbGV0IHJldDogSnNvbkFycmF5ID0gbmV3IEpzb25BcnJheSgpO1xuXG4gICAgLy8ga2V5IDogdmFsdWVcbiAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XG4gICAgbGV0IGM6IHN0cmluZztcbiAgICBjb25zdCBsb2NhbFJldEVuZHBvczI6IG51bWJlcltdID0gbmV3IEFycmF5KDEpO1xuXG4gICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xuICAgICAgY29uc3QgdmFsdWU6IFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgbGVuZ3RoLCBpLCBsb2NhbFJldEVuZHBvczIpO1xuXG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpID0gbG9jYWxSZXRFbmRwb3MyWzBdO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0LmFkZCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZPUl9MT09QMzpcbiAgICAgIC8vIGJvb2xlYW4gYnJlYWtmbGFnID0gZmFsc2U7XG4gICAgICBGT1JfTE9PUDogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgLy8gYnJlYWtmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGJyZWFrOyAvLyDmrKHjga5LRVksIFZBbFVF44G4XG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDtcbiAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g57WC5LqGXG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICsrdGhpcy5fbGluZUNvdW50O1xuICAgICAgICAgIC8vY2FzZSAnICc6IGNhc2UgJ1xcdCc6IGNhc2UgJ1xccic6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldCA9IHZvaWQgMDtcbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiBwYXJzZU9iamVjdCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBfZXJyb3I6IHN0cmluZzsgLy8g44OR44O844K55pmC44Gu44Ko44Op44O8XG4gIF9saW5lQ291bnQ6IG51bWJlcjsgLy8g44Ko44Op44O85aCx5ZGK44Gr55So44GE44KL6KGM5pWw44Kr44Km44Oz44OIXG4gIF9yb290OiBWYWx1ZTsgLy8g44OR44O844K544GV44KM44Gf44Or44O844OI6KaB57SgXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkmZsb2F05YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uRmxvYXQgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHY6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgIHRoaXMuX3ZhbHVlID0gcGFyc2VGbG9hdChzdHJidWYpO1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmJ1ZjtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDAuMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICovXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgLy8gaW50XG4gICAgICBpZiAoTWF0aC5yb3VuZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gZmxvYXRcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT0gdGhpcy5fdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS55yf5YG95YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uQm9vbGVhbiBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICovXG4gIHB1YmxpYyB0b0Jvb2xlYW4oZGVmYXVsdFZhbHVlID0gZmFsc2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gdGhpcy5fYm9vbFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgKi9cbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICgnYm9vbGVhbicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX2Jvb2xWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZSwg6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodjogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9ib29sVmFsdWUgPSB2O1xuICB9XG5cbiAgc3RhdGljIHRydWVWYWx1ZTogSnNvbkJvb2xlYW47IC8vIHRydWVcbiAgc3RhdGljIGZhbHNlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyBmYWxzZVxuXG4gIHByaXZhdGUgX2Jvb2xWYWx1ZTogYm9vbGVhbjsgLy8gSlNPTuimgee0oOOBruWApFxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLmloflrZfliJfjgajjgZfjgabmibHjgYZcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25TdHJpbmcgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGFueSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIH1cblxuICAgIGlmIChzIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzLnM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXIgPT0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlLnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogSlNPTuODkeODvOOCueaZguOBruOCqOODqeODvOe1kOaenOOAguaWh+Wtl+WIl+Wei+OBruOCiOOBhuOBq+OBteOCi+OBvuOBhlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkVycm9yIGV4dGVuZHMgSnNvblN0cmluZyB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyB8IHN0cmluZywgaXNTdGF0aWM6IGJvb2xlYW4pIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICBzdXBlcihzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIocyk7XG4gICAgfVxuICAgIHRoaXMuX2lzU3RhdGljID0gaXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfaXNTdGF0aWM6IGJvb2xlYW47IC8vIOmdmeeahOOBqlZhbHVl44GL44Gp44GG44GLXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkk5VTEzlgKTjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25OdWxsdmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjE5VTEzlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gr44Ko44Op44O85YCk44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiBKc29uRXJyb3IubnVsbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSAnTnVsbFZhbHVlJztcbiAgfVxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLphY3liJfjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25BcnJheSBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYXJyYXkgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0FycmF5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX2FycmF5LmdldFNpemUoKSA8PSBpbmRleCkge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9JTkRFWF9PRl9CT1VORFNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdjogVmFsdWUgPSB0aGlzLl9hcnJheS5hdChpbmRleCk7XG5cbiAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICovXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHJpbmdCdWZmZXI6IHN0cmluZyA9IGluZGVudCArICdbXFxuJztcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9hcnJheS5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICcnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAnKSArICdcXG4nO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmluZ0J1ZmZlciArIGluZGVudCArICddXFxuJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6YWN5YiX6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAqIEBwYXJhbSB2IOi/veWKoOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGFkZCh2OiBWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShjc21WZWN0b3I8VmFsdWU+KVxuICAgKi9cbiAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOBruaVsOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXJyYXk6IGNzbVZlY3RvcjxWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS44Oe44OD44OX44Go44GX44Gm5oyB44GkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uTWFwIGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9tYXAgPSBuZXcgY3NtTWFwPHN0cmluZywgVmFsdWU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuXG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgaWYgKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIGNvbnN0IHJldDogVmFsdWUgPSB0aGlzLl9tYXAuZ2V0VmFsdWUocy5zKTtcbiAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZXI6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgICAgaXRlci5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpO1xuICAgICAgaXRlci5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKGl0ZXIucHRyKCkuZmlyc3QgPT0gcykge1xuICAgICAgICBpZiAoaXRlci5wdHIoKS5zZWNvbmQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXIucHRyKCkuc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2luZGV4XVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZykge1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IGluZGVudCArICd7XFxuJztcblxuICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICBjb25zdCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPVxuICAgICAgICBpbmRlbnQgKyAnICcgKyBrZXkgKyAnIDogJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgICAnKSArICcgXFxuJztcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz0gaW5kZW50ICsgJ31cXG4nO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpJNYXDlnovjgafov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcOOBq+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHB1dChrZXk6IHN0cmluZywgdjogVmFsdWUpOiB2b2lkIHtcbiAgICB0aGlzLl9tYXAuc2V0VmFsdWUoa2V5LCB2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXDjgYvjgonjgq3jg7zjga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMuX2tleXMpIHtcbiAgICAgIHRoaXMuX2tleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcblxuICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgICB0aGlzLl9rZXlzLnB1c2hCYWNrKGtleSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2tleXM7XG4gIH1cblxuICAvKipcbiAgICogTWFw44Gu6KaB57Sg5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9rZXlzLmdldFNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX21hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIHByaXZhdGUgX2tleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWpzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUpzb24gPSAkLkN1YmlzbUpzb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUpzb24gPSAkLkN1YmlzbUpzb247XG4gIGV4cG9ydCBjb25zdCBKc29uQXJyYXkgPSAkLkpzb25BcnJheTtcbiAgZXhwb3J0IHR5cGUgSnNvbkFycmF5ID0gJC5Kc29uQXJyYXk7XG4gIGV4cG9ydCBjb25zdCBKc29uQm9vbGVhbiA9ICQuSnNvbkJvb2xlYW47XG4gIGV4cG9ydCB0eXBlIEpzb25Cb29sZWFuID0gJC5Kc29uQm9vbGVhbjtcbiAgZXhwb3J0IGNvbnN0IEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xuICBleHBvcnQgdHlwZSBKc29uRXJyb3IgPSAkLkpzb25FcnJvcjtcbiAgZXhwb3J0IGNvbnN0IEpzb25GbG9hdCA9ICQuSnNvbkZsb2F0O1xuICBleHBvcnQgdHlwZSBKc29uRmxvYXQgPSAkLkpzb25GbG9hdDtcbiAgZXhwb3J0IGNvbnN0IEpzb25NYXAgPSAkLkpzb25NYXA7XG4gIGV4cG9ydCB0eXBlIEpzb25NYXAgPSAkLkpzb25NYXA7XG4gIGV4cG9ydCBjb25zdCBKc29uTnVsbHZhbHVlID0gJC5Kc29uTnVsbHZhbHVlO1xuICBleHBvcnQgdHlwZSBKc29uTnVsbHZhbHVlID0gJC5Kc29uTnVsbHZhbHVlO1xuICBleHBvcnQgY29uc3QgSnNvblN0cmluZyA9ICQuSnNvblN0cmluZztcbiAgZXhwb3J0IHR5cGUgSnNvblN0cmluZyA9ICQuSnNvblN0cmluZztcbiAgZXhwb3J0IGNvbnN0IFZhbHVlID0gJC5WYWx1ZTtcbiAgZXhwb3J0IHR5cGUgVmFsdWUgPSAkLlZhbHVlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbi8qKlxuICogU2FtcGxlIEFwcOOBp+S9v+eUqOOBmeOCi+WumuaVsFxuICovXG5cbi8vIENhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0IHBpeGVsIHZhbHVlcywgb3IgZHluYW1pYyBzY3JlZW4gc2l6ZSAoJ2F1dG8nKS5cbi8vZXhwb3J0IGNvbnN0IENhbnZhc1NpemU6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSB8ICdhdXRvJyA9ICdhdXRvJztcbmV4cG9ydCBjb25zdCBDYW52YXNTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gfCAnYXV0bycgPSB7d2lkdGg6IDgwMCxoZWlnaHQ6IDgwMH07LypWaXJ0aXVhbCBSZWFjdGlvbiDjgq3jg6Pjg7Pjg5DjgrnjgrXjgqTjgrrjga7lm7rlrpoqL1xuXG4vLyDnlLvpnaJcbmV4cG9ydCBjb25zdCBWaWV3U2NhbGUgPSAxLjA7XG5leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTGVmdCA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxSaWdodCA9IDEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbEJvdHRvbSA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxUb3AgPSAxLjA7XG5cbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heExlZnQgPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4UmlnaHQgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhCb3R0b20gPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4VG9wID0gMi4wO1xuXG4vLyDnm7jlr77jg5HjgrlcbmV4cG9ydCBjb25zdCBSZXNvdXJjZXNQYXRoID0gJy4uL1Jlc291cmNlcy8nO1xuXG4vLyDjg6Ljg4fjg6vjga7lvozjgo3jgavjgYLjgovog4zmma/jga7nlLvlg4/jg5XjgqHjgqTjg6tcbi8vZXhwb3J0IGNvbnN0IEJhY2tJbWFnZU5hbWUgPSAnYmFja19jbGFzc19ub3JtYWwucG5nJztcbmV4cG9ydCBjb25zdCBCYWNrSW1hZ2VOYW1lID0gJ2xpdmluZzAxLnBuZyc7XG5cbi8vIOatr+i7iiAvKlZpcnRpdWFsIFJlYWN0aW9uIENvbW1lbnQgT3V0IENvZGUqL1xuLy9leHBvcnQgY29uc3QgR2VhckltYWdlTmFtZSA9ICdpY29uX2dlYXIucG5nJztcblxuLy8g57WC5LqG44Oc44K/44OzXG5leHBvcnQgY29uc3QgUG93ZXJJbWFnZU5hbWUgPSAnQ2xvc2VOb3JtYWwucG5nJztcblxuLy8g44Oi44OH44Or5a6a576pLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyDjg6Ljg4fjg6vjgpLphY3nva7jgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jga7phY3liJdcbi8vIOODh+OCo+ODrOOCr+ODiOODquWQjeOBqG1vZGVsMy5qc29u44Gu5ZCN5YmN44KS5LiA6Ie044GV44Gb44Gm44GK44GP44GT44GoXG5leHBvcnQgY29uc3QgTW9kZWxEaXI6IHN0cmluZ1tdID0gWydIYXJ1JywnbnVydSddO1xuZXhwb3J0IGNvbnN0IE1vZGVsRGlyU2l6ZTogbnVtYmVyID0gTW9kZWxEaXIubGVuZ3RoO1xuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBJZGxlID0gJ0lkbGUnOyAvLyDjgqLjgqTjg4njg6rjg7PjgrBcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lQm9keSA9ICdCb2R5JztcblxuLy8g44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm5a6a5pWwXG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb25lID0gMDtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUlkbGUgPSAxO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9ybWFsID0gMjtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUZvcmNlID0gMztcblxuLy8g44OH44OQ44OD44Kw55So44Ot44Kw44Gu6KGo56S644Kq44OX44K344On44OzXG5leHBvcnQgY29uc3QgRGVidWdMb2dFbmFibGUgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IERlYnVnVG91Y2hMb2dFbmFibGUgPSBmYWxzZTtcblxuLy8gRnJhbWV3b3Jr44GL44KJ5Ye65Yqb44GZ44KL44Ot44Kw44Gu44Os44OZ44Or6Kit5a6aXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nZ2luZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2U7XG5cbi8vIOODh+ODleOCqeODq+ODiOOBruODrOODs+ODgOODvOOCv+ODvOOCsuODg+ODiOOCteOCpOOCulxuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gMTkwMDtcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRIZWlnaHQgPSAxMDAwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrLCBPcHRpb24gfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IExBcHBUZXh0dXJlTWFuYWdlciB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBWaWV3IH0gZnJvbSAnLi9sYXBwdmlldyc7XG5cbmV4cG9ydCBsZXQgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IG51bGw7XG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBEZWxlZ2F0ZSA9IG51bGw7XG5leHBvcnQgbGV0IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xuZXhwb3J0IGxldCBmcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XG5cbi8qKlxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544CCXG4gKiBDdWJpc20gU0RL44Gu566h55CG44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwRGVsZWdhdGUge1xuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6L+U44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwRGVsZWdhdGUge1xuICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcERlbGVnYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUFDjgavlv4XopoHjgarnianjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IGJvb2xlYW4ge1xuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS9nOaIkFxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGlmIChMQXBwRGVmaW5lLkNhbnZhc1NpemUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IExBcHBEZWZpbmUuQ2FudmFzU2l6ZS53aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBMQXBwRGVmaW5lLkNhbnZhc1NpemUuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8vIGds44Kz44Oz44OG44Kt44K544OI44KS5Yid5pyf5YyWXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuXG4gICAgaWYgKCFnbCkge1xuICAgICAgYWxlcnQoJ0Nhbm5vdCBpbml0aWFsaXplIFdlYkdMLiBUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydC4nKTtcbiAgICAgIGdsID0gbnVsbDtcblxuICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPVxuICAgICAgICAnVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIDxjb2RlPiZsdDtjYW52YXMmZ3Q7PC9jb2RlPiBlbGVtZW50Lic7XG5cbiAgICAgIC8vIGds5Yid5pyf5YyW5aSx5pWXXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544KSIERPTSDjgavov73liqBcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICBpZiAoIWZyYW1lQnVmZmVyKSB7XG4gICAgICBmcmFtZUJ1ZmZlciA9IGdsLmdldFBhcmFtZXRlcihnbC5GUkFNRUJVRkZFUl9CSU5ESU5HKTtcbiAgICB9XG5cbiAgICAvLyDpgI/pgY7oqK3lrppcbiAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgY29uc3Qgc3VwcG9ydFRvdWNoOiBib29sZWFuID0gJ29udG91Y2hlbmQnIGluIGNhbnZhcztcblxuICAgIGlmIChzdXBwb3J0VG91Y2gpIHtcbiAgICAgIC8vIOOCv+ODg+ODgemWoumAo+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOeZu+mMslxuICAgICAgY2FudmFzLm9udG91Y2hzdGFydCA9IG9uVG91Y2hCZWdhbjtcbiAgICAgIGNhbnZhcy5vbnRvdWNobW92ZSA9IG9uVG91Y2hNb3ZlZDtcbiAgICAgIGNhbnZhcy5vbnRvdWNoZW5kID0gb25Ub3VjaEVuZGVkO1xuICAgICAgY2FudmFzLm9udG91Y2hjYW5jZWwgPSBvblRvdWNoQ2FuY2VsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDjg57jgqbjgrnplqLpgKPjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDnmbvpjLJcbiAgICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IG9uQ2xpY2tCZWdhbjtcbiAgICAgIGNhbnZhcy5vbm1vdXNlbW92ZSA9IG9uTW91c2VNb3ZlZDtcbiAgICAgIGNhbnZhcy5vbm1vdXNldXAgPSBvbkNsaWNrRW5kZWQ7XG4gICAgfVxuXG4gICAgLy8gQXBwVmlld+OBruWIneacn+WMllxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xuXG4gICAgLy8gQ3ViaXNtIFNES+OBruWIneacn+WMllxuICAgIHRoaXMuaW5pdGlhbGl6ZUN1YmlzbSgpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIGNhbnZhcyBhbmQgcmUtaW5pdGlhbGl6ZSB2aWV3LlxuICAgKi9cbiAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xuICAgIHRoaXMuX3Jlc2l6ZUNhbnZhcygpO1xuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIucmVsZWFzZSgpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbnVsbDtcblxuICAgIHRoaXMuX3ZpZXcucmVsZWFzZSgpO1xuICAgIHRoaXMuX3ZpZXcgPSBudWxsO1xuXG4gICAgLy8g44Oq44K944O844K544KS6Kej5pS+XG4gICAgTEFwcExpdmUyRE1hbmFnZXIucmVsZWFzZUluc3RhbmNlKCk7XG5cbiAgICAvLyBDdWJpc20gU0RL44Gu6Kej5pS+XG4gICAgQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlrp/ooYzlh6bnkIbjgIJcbiAgICovXG4gIHB1YmxpYyBydW4oKTogdm9pZCB7XG4gICAgLy8g44Oh44Kk44Oz44Or44O844OXXG4gICAgY29uc3QgbG9vcCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIC8vIOOCpOODs+OCueOCv+ODs+OCueOBruacieeEoeOBrueiuuiqjVxuICAgICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIOaZgumWk+abtOaWsFxuICAgICAgTEFwcFBhbC51cGRhdGVUaW1lKCk7XG5cbiAgICAgIC8vIOeUu+mdouOBruWIneacn+WMllxuICAgICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAxLjApO1xuXG4gICAgICAvLyDmt7Hluqbjg4bjgrnjg4jjgpLmnInlirnljJZcbiAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcblxuICAgICAgLy8g6L+R44GP44Gr44GC44KL54mp5L2T44Gv44CB6YGg44GP44Gr44GC44KL54mp5L2T44KS6KaG44GE6Zqg44GZXG4gICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcblxuICAgICAgLy8g44Kr44Op44O844OQ44OD44OV44Kh44KE5rex5bqm44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG4gICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cbiAgICAgIGdsLmNsZWFyRGVwdGgoMS4wKTtcblxuICAgICAgLy8g6YCP6YGO6Kit5a6aXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICAgIC8vIOaPj+eUu+abtOaWsFxuICAgICAgdGhpcy5fdmlldy5yZW5kZXIoKTtcblxuICAgICAgLy8g44Or44O844OX44Gu44Gf44KB44Gr5YaN5biw5ZG844Gz5Ye644GXXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgfTtcbiAgICBsb29wKCk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844KS55m76Yyy44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlU2hhZGVyKCk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgLy8g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44O844Gu44Kz44Oz44OR44Kk44OrXG4gICAgY29uc3QgdmVydGV4U2hhZGVySWQgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG5cbiAgICBpZiAodmVydGV4U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgdmVydGV4U2hhZGVyJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXI6IHN0cmluZyA9XG4gICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICAgICAnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247JyArXG4gICAgICAnYXR0cmlidXRlIHZlYzIgdXY7JyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZ1djsnICtcbiAgICAgICd2b2lkIG1haW4odm9pZCknICtcbiAgICAgICd7JyArXG4gICAgICAnICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAxLjApOycgK1xuICAgICAgJyAgIHZ1diA9IHV2OycgK1xuICAgICAgJ30nO1xuXG4gICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlcklkLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVySWQpO1xuXG4gICAgLy8g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44Kz44Oz44OR44Kk44OrXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuXG4gICAgaWYgKGZyYWdtZW50U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgZnJhZ21lbnRTaGFkZXInKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyOiBzdHJpbmcgPVxuICAgICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZTsnICtcbiAgICAgICd2b2lkIG1haW4odm9pZCknICtcbiAgICAgICd7JyArXG4gICAgICAnICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHRleHR1cmUsIHZ1dik7JyArXG4gICAgICAnfSc7XG5cbiAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXJJZCwgZnJhZ21lbnRTaGFkZXIpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICAvLyDjg5fjg63jgrDjg6njg6Djgqrjg5bjgrjjgqfjgq/jg4jjga7kvZzmiJBcbiAgICBjb25zdCBwcm9ncmFtSWQgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgdmVydGV4U2hhZGVySWQpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtSWQsIGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcbiAgICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICAvLyDjg6rjg7Pjgq9cbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtSWQpO1xuXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtSWQpO1xuXG4gICAgcmV0dXJuIHByb2dyYW1JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWaWV35oOF5aCx44KS5Y+W5b6X44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgZ2V0VmlldygpOiBMQXBwVmlldyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXc7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGV4dHVyZU1hbmFnZXIoKTogTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZU1hbmFnZXI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jYXB0dXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuX21vdXNlWCA9IDAuMDtcbiAgICB0aGlzLl9tb3VzZVkgPSAwLjA7XG4gICAgdGhpcy5faXNFbmQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbiA9IG5ldyBPcHRpb24oKTtcbiAgICB0aGlzLl92aWV3ID0gbmV3IExBcHBWaWV3KCk7XG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIgPSBuZXcgTEFwcFRleHR1cmVNYW5hZ2VyKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIFNES+OBruWIneacn+WMllxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVDdWJpc20oKTogdm9pZCB7XG4gICAgLy8gc2V0dXAgY3ViaXNtXG4gICAgdGhpcy5fY3ViaXNtT3B0aW9uLmxvZ0Z1bmN0aW9uID0gTEFwcFBhbC5wcmludE1lc3NhZ2U7XG4gICAgdGhpcy5fY3ViaXNtT3B0aW9uLmxvZ2dpbmdMZXZlbCA9IExBcHBEZWZpbmUuQ3ViaXNtTG9nZ2luZ0xldmVsO1xuICAgIEN1YmlzbUZyYW1ld29yay5zdGFydFVwKHRoaXMuX2N1YmlzbU9wdGlvbik7XG5cbiAgICAvLyBpbml0aWFsaXplIGN1YmlzbVxuICAgIEN1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBsb2FkIG1vZGVsXG4gICAgTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgIExBcHBQYWwudXBkYXRlVGltZSgpO1xuXG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplU3ByaXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIHRoZSBjYW52YXMgdG8gZmlsbCB0aGUgc2NyZWVuLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVzaXplQ2FudmFzKCk6IHZvaWQge1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBfY3ViaXNtT3B0aW9uOiBPcHRpb247IC8vIEN1YmlzbSBTREsgT3B0aW9uXG4gIF92aWV3OiBMQXBwVmlldzsgLy8gVmlld+aDheWgsVxuICBfY2FwdHVyZWQ6IGJvb2xlYW47IC8vIOOCr+ODquODg+OCr+OBl+OBpuOBhOOCi+OBi1xuICBfbW91c2VYOiBudW1iZXI7IC8vIOODnuOCpuOCuVjluqfmqJlcbiAgX21vdXNlWTogbnVtYmVyOyAvLyDjg57jgqbjgrlZ5bqn5qiZXG4gIF9pc0VuZDogYm9vbGVhbjsgLy8gQVBQ57WC5LqG44GX44Gm44GE44KL44GLXG4gIF90ZXh0dXJlTWFuYWdlcjogTEFwcFRleHR1cmVNYW5hZ2VyOyAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg43jg7zjgrjjg6Pjg7xcblxuICAvKipcbiAgKiBWaXJ0aXVhbCBSZWFjdGlvbiBBZGRpdGlvbmFsIENvZGVcbiAgKiDjgqTjg5njg7Pjg4jjgpLlj5fkv6HjgZfjgZ/jgajjgY3jgavlkbzjgbDjgozjgotcbiAgKiovXG4gIHB1YmxpYyBzdGF0aWMgb25FdmVudExpc3RlbmVkKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGxpdmUyRE1hbmFnZXI6IExBcHBMaXZlMkRNYW5hZ2VyID0gTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBpZihkYXRhID09IFwiY2hhbmdlXCIpe1xuICAgICAgbGl2ZTJETWFuYWdlci5uZXh0U2NlbmUoKTtcbiAgICB9ZWxzZXtcbiAgICAgIGxpdmUyRE1hbmFnZXIub25MaXN0ZW5lZChOdW1iZXIoZGF0YSkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIOOCr+ODquODg+OCr+OBl+OBn+OBqOOBjeOBq+WRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvbkNsaWNrQmVnYW4oZTogTW91c2VFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gdHJ1ZTtcblxuICBjb25zdCBwb3NYOiBudW1iZXIgPSBlLnBhZ2VYO1xuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLnBhZ2VZO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOODnuOCpuOCueODneOCpOODs+OCv+OBjOWLleOBhOOBn+OCieWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvbk1vdXNlTW92ZWQoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzTW92ZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44Kv44Oq44OD44Kv44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uQ2xpY2tFbmRlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBwb3NYOiBudW1iZXIgPSBlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCv+ODg+ODgeOBl+OBn+OBqOOBjeOBq+WRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoQmVnYW4oZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNCZWdhbihwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgrnjg6/jgqTjg5fjgZnjgovjgajlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaE1vdmVkKGU6IFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgr/jg4Pjg4HjgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaEVuZGVkKGU6IFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG5cbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBjb25zdCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44K/44OD44OB44GM44Kt44Oj44Oz44K744Or44GV44KM44KL44Go5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hDYW5jZWwoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnQGZyYW1ld29yay9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICdAZnJhbWV3b3JrL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBjYW52YXMgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwTW9kZWwgfSBmcm9tICcuL2xhcHBtb2RlbCc7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcblxuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwTGl2ZTJETWFuYWdlciA9IG51bGw7XG5cbi8qKlxuICog44K144Oz44OX44Or44Ki44OX44Oq44Kx44O844K344On44Oz44Gr44GK44GE44GmQ3ViaXNtTW9kZWzjgpLnrqHnkIbjgZnjgovjgq/jg6njgrlcbiAqIOODouODh+ODq+eUn+aIkOOBqOegtOajhOOAgeOCv+ODg+ODl+OCpOODmeODs+ODiOOBruWHpueQhuOAgeODouODh+ODq+WIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcExpdmUyRE1hbmFnZXIge1xuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6L+U44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwTGl2ZTJETWFuYWdlciB7XG4gICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IG5ldyBMQXBwTGl2ZTJETWFuYWdlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjgafkv53mjIHjgZfjgabjgYTjgovjg6Ljg4fjg6vjgpLov5TjgZnjgIJcbiAgICpcbiAgICogQHBhcmFtIG5vIOODouODh+ODq+ODquOCueODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBmeOAguOCpOODs+ODh+ODg+OCr+OCueWApOOBjOevhOWbsuWkluOBruWgtOWQiOOBr05VTEzjgpLov5TjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbChubzogbnVtYmVyKTogTEFwcE1vZGVsIHtcbiAgICBpZiAobm8gPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWxzLmF0KG5vKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjgafkv53mjIHjgZfjgabjgYTjgovjgZnjgbnjgabjga7jg6Ljg4fjg6vjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlQWxsTW9kZWwoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX21vZGVscy5hdChpKS5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb2RlbHMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVscy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouOCkuODieODqeODg+OCsOOBl+OBn+aZguOBruWHpueQhlxuICAgKlxuICAgKiBAcGFyYW0geCDnlLvpnaLjga5Y5bqn5qiZXG4gICAqIEBwYXJhbSB5IOeUu+mdouOBrlnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvbkRyYWcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgY29uc3QgbW9kZWw6IExBcHBNb2RlbCA9IHRoaXMuZ2V0TW9kZWwoaSk7XG5cbiAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICBtb2RlbC5zZXREcmFnZ2luZyh4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i44KS44K/44OD44OX44GX44Gf5pmC44Gu5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcbiAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uVGFwKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICBgW0FQUF10YXAgcG9pbnQ6IHt4OiAke3gudG9GaXhlZCgyKX0geTogJHt5LnRvRml4ZWQoMil9fWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbHMuYXQoaSkuaGl0VGVzdChMQXBwRGVmaW5lLkhpdEFyZWFOYW1lSGVhZCwgeCwgeSkpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgIGBbQVBQXWhpdCBhcmVhOiBbJHtMQXBwRGVmaW5lLkhpdEFyZWFOYW1lSGVhZH1dYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLnNldFJhbmRvbUV4cHJlc3Npb24oKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fbW9kZWxzLmF0KGkpLmhpdFRlc3QoTEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHksIHgsIHkpKSB7XG4gICAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgICAgICBgW0FQUF1oaXQgYXJlYTogWyR7TEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHl9XWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vZGVsc1xuICAgICAgICAgIC5hdChpKVxuICAgICAgICAgIC5zdGFydFJhbmRvbU1vdGlvbihcbiAgICAgICAgICAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBUYXBCb2R5LFxuICAgICAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCxcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkTW90aW9uXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i44KS5pu05paw44GZ44KL44Go44GN44Gu5Yem55CGXG4gICAqIOODouODh+ODq+OBruabtOaWsOWHpueQhuWPiuOBs+aPj+eUu+WHpueQhuOCkuihjOOBhlxuICAgKi9cbiAgcHVibGljIG9uVXBkYXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgY29uc3QgbW9kZWxDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxzLmdldFNpemUoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWxDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwcm9qZWN0aW9uOiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgY29uc3QgbW9kZWw6IExBcHBNb2RlbCA9IHRoaXMuZ2V0TW9kZWwoaSk7XG5cbiAgICAgIGlmIChtb2RlbC5nZXRNb2RlbCgpKSB7XG4gICAgICAgIGlmIChtb2RlbC5nZXRNb2RlbCgpLmdldENhbnZhc1dpZHRoKCkgPiAxLjAgJiYgd2lkdGggPCBoZWlnaHQpIHtcbiAgICAgICAgICAvLyDmqKrjgavplbfjgYTjg6Ljg4fjg6vjgpLnuKbplbfjgqbjgqPjg7Pjg4njgqbjgavooajnpLrjgZnjgovpmpvjg6Ljg4fjg6vjga7mqKrjgrXjgqTjgrrjgadzY2FsZeOCkueul+WHuuOBmeOCi1xuICAgICAgICAgIG1vZGVsLmdldE1vZGVsTWF0cml4KCkuc2V0V2lkdGgoMi4wKTtcbiAgICAgICAgICBwcm9qZWN0aW9uLnNjYWxlKDEuMCwgd2lkdGggLyBoZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2plY3Rpb24uc2NhbGUoaGVpZ2h0IC8gd2lkdGgsIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlv4XopoHjgYzjgYLjgozjgbDjgZPjgZPjgafkuZfnrpdcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdNYXRyaXggIT0gbnVsbCkge1xuICAgICAgICAgIHByb2plY3Rpb24ubXVsdGlwbHlCeU1hdHJpeCh0aGlzLl92aWV3TWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtb2RlbC51cGRhdGUoKTtcbiAgICAgIG1vZGVsLmRyYXcocHJvamVjdGlvbik7IC8vIOWPgueFp+a4oeOBl+OBquOBruOBp3Byb2plY3Rpb27jga/lpInos6rjgZnjgovjgIJcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu44K344O844Oz44Gr5YiH44KK44GL44GI44KLXG4gICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIG5leHRTY2VuZSgpOiB2b2lkIHtcbiAgICBjb25zdCBubzogbnVtYmVyID0gKHRoaXMuX3NjZW5lSW5kZXggKyAxKSAlIExBcHBEZWZpbmUuTW9kZWxEaXJTaXplO1xuICAgIHRoaXMuY2hhbmdlU2NlbmUobm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+ODvOODs+OCkuWIh+OCiuabv+OBiOOCi1xuICAgKiDjgrXjg7Pjg5fjg6vjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pjgafjga/jg6Ljg4fjg6vjgrvjg4Pjg4jjga7liIfjgormm7/jgYjjgpLooYzjgYbjgIJcbiAgICovXG4gIHB1YmxpYyBjaGFuZ2VTY2VuZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc2NlbmVJbmRleCA9IGluZGV4O1xuICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1tb2RlbCBpbmRleDogJHt0aGlzLl9zY2VuZUluZGV4fWApO1xuICAgIH1cblxuICAgIC8vIE1vZGVsRGlyW13jgavkv53mjIHjgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jgYvjgolcbiAgICAvLyBtb2RlbDMuanNvbuOBruODkeOCueOCkuaxuuWumuOBmeOCi+OAglxuICAgIC8vIOODh+OCo+ODrOOCr+ODiOODquWQjeOBqG1vZGVsMy5qc29u44Gu5ZCN5YmN44KS5LiA6Ie044GV44Gb44Gm44GK44GP44GT44Go44CCXG4gICAgY29uc3QgbW9kZWw6IHN0cmluZyA9IExBcHBEZWZpbmUuTW9kZWxEaXJbaW5kZXhdO1xuICAgIGNvbnN0IG1vZGVsUGF0aDogc3RyaW5nID0gTEFwcERlZmluZS5SZXNvdXJjZXNQYXRoICsgbW9kZWwgKyAnLyc7XG4gICAgbGV0IG1vZGVsSnNvbk5hbWU6IHN0cmluZyA9IExBcHBEZWZpbmUuTW9kZWxEaXJbaW5kZXhdO1xuICAgIG1vZGVsSnNvbk5hbWUgKz0gJy5tb2RlbDMuanNvbic7XG5cbiAgICB0aGlzLnJlbGVhc2VBbGxNb2RlbCgpO1xuICAgIHRoaXMuX21vZGVscy5wdXNoQmFjayhuZXcgTEFwcE1vZGVsKCkpO1xuICAgIHRoaXMuX21vZGVscy5hdCgwKS5sb2FkQXNzZXRzKG1vZGVsUGF0aCwgbW9kZWxKc29uTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgc2V0Vmlld01hdHJpeChtOiBDdWJpc21NYXRyaXg0NCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgdGhpcy5fdmlld01hdHJpeC5nZXRBcnJheSgpW2ldID0gbS5nZXRBcnJheSgpW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl9tb2RlbHMgPSBuZXcgY3NtVmVjdG9yPExBcHBNb2RlbD4oKTtcbiAgICB0aGlzLl9zY2VuZUluZGV4ID0gMDtcbiAgICB0aGlzLmNoYW5nZVNjZW5lKHRoaXMuX3NjZW5lSW5kZXgpO1xuICB9XG5cbiAgX3ZpZXdNYXRyaXg6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg6Ljg4fjg6vmj4/nlLvjgavnlKjjgYTjgot2aWV36KGM5YiXXG4gIF9tb2RlbHM6IGNzbVZlY3RvcjxMQXBwTW9kZWw+OyAvLyDjg6Ljg4fjg6vjgqTjg7Pjgrnjgr/jg7Pjgrnjga7jgrPjg7Pjg4bjg4pcbiAgX3NjZW5lSW5kZXg6IG51bWJlcjsgLy8g6KGo56S644GZ44KL44K344O844Oz44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gIC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOBruOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICBfZmluaXNoZWRNb3Rpb24gPSAoc2VsZjogQUN1YmlzbU1vdGlvbik6IHZvaWQgPT4ge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdNb3Rpb24gRmluaXNoZWQ6Jyk7XG4gICAgY29uc29sZS5sb2coc2VsZik7XG4gIH07XG5cbiAgLyoqXG4gICogVmlydGl1YWwgUmVhY3Rpb24gQWRkaXRpb25hbCBDb2RlXG4gICogZ3Vp44GL44KJ44Gu5ZG95Luk44Gr5b+c44GY44Gm5Yem55CGXG4gICoqL1xuICBwdWJsaWMgb25MaXN0ZW5lZChubzogbnVtYmVyKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX21vZGVscy5hdChpKS5zZXROdW1FeHByZXNzaW9uKG5vKTtcbiAgICB9XG4gIH1cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG5pbXBvcnQgeyBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQgfSBmcm9tICdAZnJhbWV3b3JrL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21tb2RlbHNldHRpbmdqc29uJztcbmltcG9ydCB7XG4gIEJyZWF0aFBhcmFtZXRlckRhdGEsXG4gIEN1YmlzbUJyZWF0aFxufSBmcm9tICdAZnJhbWV3b3JrL2VmZmVjdC9jdWJpc21icmVhdGgnO1xuaW1wb3J0IHsgQ3ViaXNtRXllQmxpbmsgfSBmcm9tICdAZnJhbWV3b3JrL2VmZmVjdC9jdWJpc21leWVibGluayc7XG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnQGZyYW1ld29yay9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnQGZyYW1ld29yay9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBDdWJpc21Vc2VyTW9kZWwgfSBmcm9tICdAZnJhbWV3b3JrL21vZGVsL2N1YmlzbXVzZXJtb2RlbCc7XG5pbXBvcnQge1xuICBBQ3ViaXNtTW90aW9uLFxuICBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG59IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uIH0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7XG4gIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUsXG4gIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWVcbn0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtUmVjdCB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21yZWN0Zic7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJ0BmcmFtZXdvcmsvdXRpbHMvY3ViaXNtZGVidWcnO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBjYW52YXMsIGZyYW1lQnVmZmVyLCBnbCwgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBUZXh0dXJlSW5mbyB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBXYXZGaWxlSGFuZGxlciB9IGZyb20gJy4vbGFwcHdhdmZpbGVoYW5kbGVyJztcblxuZW51bSBMb2FkU3RlcCB7XG4gIExvYWRBc3NldHMsXG4gIExvYWRNb2RlbCxcbiAgV2FpdExvYWRNb2RlbCxcbiAgTG9hZEV4cHJlc3Npb24sXG4gIFdhaXRMb2FkRXhwcmVzc2lvbixcbiAgTG9hZFBoeXNpY3MsXG4gIFdhaXRMb2FkUGh5c2ljcyxcbiAgTG9hZFBvc2UsXG4gIFdhaXRMb2FkUG9zZSxcbiAgU2V0dXBFeWVCbGluayxcbiAgU2V0dXBCcmVhdGgsXG4gIExvYWRVc2VyRGF0YSxcbiAgV2FpdExvYWRVc2VyRGF0YSxcbiAgU2V0dXBFeWVCbGlua0lkcyxcbiAgU2V0dXBMaXBTeW5jSWRzLFxuICBTZXR1cExheW91dCxcbiAgTG9hZE1vdGlvbixcbiAgV2FpdExvYWRNb3Rpb24sXG4gIENvbXBsZXRlSW5pdGlhbGl6ZSxcbiAgQ29tcGxldGVTZXR1cE1vZGVsLFxuICBMb2FkVGV4dHVyZSxcbiAgV2FpdExvYWRUZXh0dXJlLFxuICBDb21wbGV0ZVNldHVwXG59XG5cbi8qKlxuICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44Or44Gu5a6f6KOF44Kv44Op44K5PGJyPlxuICog44Oi44OH44Or55Sf5oiQ44CB5qmf6IO944Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44CB5pu05paw5Yem55CG44Go44Os44Oz44OA44Oq44Oz44Kw44Gu5ZG844Gz5Ye644GX44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwTW9kZWwgZXh0ZW5kcyBDdWJpc21Vc2VyTW9kZWwge1xuICAvKipcbiAgICogbW9kZWwzLmpzb27jgYznva7jgYvjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjgajjg5XjgqHjgqTjg6vjg5HjgrnjgYvjgonjg6Ljg4fjg6vjgpLnlJ/miJDjgZnjgotcbiAgICogQHBhcmFtIGRpclxuICAgKiBAcGFyYW0gZmlsZU5hbWVcbiAgICovXG4gIHB1YmxpYyBsb2FkQXNzZXRzKGRpcjogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWxIb21lRGlyID0gZGlyO1xuXG4gICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7ZmlsZU5hbWV9YClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgIGNvbnN0IHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcgPSBuZXcgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbihcbiAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44K544OG44O844OI44KS5pu05pawXG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZE1vZGVsO1xuXG4gICAgICAgIC8vIOe1kOaenOOCkuS/neWtmFxuICAgICAgICB0aGlzLnNldHVwTW9kZWwoc2V0dGluZyk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBtb2RlbDMuanNvbuOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi+OAglxuICAgKiBtb2RlbDMuanNvbuOBruiomOi/sOOBq+W+k+OBo+OBpuODouODh+ODq+eUn+aIkOOAgeODouODvOOCt+ODp+ODs+OAgeeJqeeQhua8lOeul+OBquOBqeOBruOCs+ODs+ODneODvOODjeODs+ODiOeUn+aIkOOCkuihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gc2V0dGluZyBJQ3ViaXNtTW9kZWxTZXR0aW5n44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwcml2YXRlIHNldHVwTW9kZWwoc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyk6IHZvaWQge1xuICAgIHRoaXMuX3VwZGF0aW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fbW9kZWxTZXR0aW5nID0gc2V0dGluZztcblxuICAgIC8vIEN1YmlzbU1vZGVsXG4gICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb2RlbEZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgIGNvbnN0IG1vZGVsRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpO1xuXG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHttb2RlbEZpbGVOYW1lfWApXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRNb2RlbChhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkRXhwcmVzc2lvbjtcblxuICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgbG9hZEN1YmlzbUV4cHJlc3Npb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRNb2RlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vZGVsIGRhdGEgZG9lcyBub3QgZXhpc3QuJyk7XG4gICAgfVxuXG4gICAgLy8gRXhwcmVzc2lvblxuICAgIGNvbnN0IGxvYWRDdWJpc21FeHByZXNzaW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKSA+IDApIHtcbiAgICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9uTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uTmFtZShpKTtcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9uRmlsZU5hbWUgPVxuICAgICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25GaWxlTmFtZShpKTtcblxuICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke2V4cHJlc3Npb25GaWxlTmFtZX1gKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25OYW1lXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUoXG4gICAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5nZXRWYWx1ZShleHByZXNzaW9uTmFtZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLnNldFZhbHVlKGV4cHJlc3Npb25OYW1lLCBudWxsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLnNldFZhbHVlKGV4cHJlc3Npb25OYW1lLCBtb3Rpb24pO1xuXG4gICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCsrO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9uQ291bnQgPj0gY291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQaHlzaWNzO1xuXG4gICAgICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkRXhwcmVzc2lvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBoeXNpY3M7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgbG9hZEN1YmlzbVBoeXNpY3MoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGh5c2ljc1xuICAgIGNvbnN0IGxvYWRDdWJpc21QaHlzaWNzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgICBjb25zdCBwaHlzaWNzRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UGh5c2ljc0ZpbGVOYW1lKCk7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7cGh5c2ljc0ZpbGVOYW1lfWApXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRQaHlzaWNzKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcblxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIGxvYWRDdWJpc21Qb3NlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRQaHlzaWNzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcblxuICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICBsb2FkQ3ViaXNtUG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQb3NlXG4gICAgY29uc3QgbG9hZEN1YmlzbVBvc2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICAgIGNvbnN0IHBvc2VGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQb3NlRmlsZU5hbWUoKTtcblxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtwb3NlRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBvc2UoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbms7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRQb3NlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCkgPiAwKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rID0gQ3ViaXNtRXllQmxpbmsuY3JlYXRlKHRoaXMuX21vZGVsU2V0dGluZyk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBCcmVhdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cEJyZWF0aCgpO1xuICAgIH07XG5cbiAgICAvLyBCcmVhdGhcbiAgICBjb25zdCBzZXR1cEJyZWF0aCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuX2JyZWF0aCA9IEN1YmlzbUJyZWF0aC5jcmVhdGUoKTtcblxuICAgICAgY29uc3QgYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+ID0gbmV3IGNzbVZlY3RvcigpO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWCwgMC4wLCAxNS4wLCA2LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVZLCAwLjAsIDguMCwgMy41MzQ1LCAwLjUpXG4gICAgICApO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWiwgMC4wLCAxMC4wLCA1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCwgMC4wLCA0LjAsIDE1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YShcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CcmVhdGhcbiAgICAgICAgICApLFxuICAgICAgICAgIDAuNSxcbiAgICAgICAgICAwLjUsXG4gICAgICAgICAgMy4yMzQ1LFxuICAgICAgICAgIDFcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5fYnJlYXRoLnNldFBhcmFtZXRlcnMoYnJlYXRoUGFyYW1ldGVycyk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRVc2VyRGF0YTtcblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIGxvYWRVc2VyRGF0YSgpO1xuICAgIH07XG5cbiAgICAvLyBVc2VyRGF0YVxuICAgIGNvbnN0IGxvYWRVc2VyRGF0YSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VXNlckRhdGFGaWxlKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgdXNlckRhdGFGaWxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFVzZXJEYXRhRmlsZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke3VzZXJEYXRhRmlsZX1gKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkVXNlckRhdGEoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rSWRzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFVzZXJEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rSWRzO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtJZHNcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rSWRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgZXllQmxpbmtJZENvdW50OiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV5ZUJsaW5rSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rSWRzLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMaXBTeW5jSWRzO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMaXBTeW5jSWRzKCk7XG4gICAgfTtcblxuICAgIC8vIExpcFN5bmNJZHNcbiAgICBjb25zdCBzZXR1cExpcFN5bmNJZHMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsaXBTeW5jSWRDb3VudCA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXBTeW5jSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2xpcFN5bmNJZHMucHVzaEJhY2sodGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJJZChpKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwTGF5b3V0O1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMYXlvdXQoKTtcbiAgICB9O1xuXG4gICAgLy8gTGF5b3V0XG4gICAgY29uc3Qgc2V0dXBMYXlvdXQgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgY3NtTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldExheW91dE1hcChsYXlvdXQpO1xuICAgICAgdGhpcy5fbW9kZWxNYXRyaXguc2V0dXBGcm9tTGF5b3V0KGxheW91dCk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb3Rpb247XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBsb2FkQ3ViaXNtTW90aW9uKCk7XG4gICAgfTtcblxuICAgIC8vIE1vdGlvblxuICAgIGNvbnN0IGxvYWRDdWJpc21Nb3Rpb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkTW90aW9uO1xuICAgICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTtcbiAgICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcbiAgICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcbiAgICAgIGNvbnN0IGdyb3VwOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICBjb25zdCBtb3Rpb25Hcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBDb3VudCgpO1xuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7nt4/mlbDjgpLmsYLjgoHjgotcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIGdyb3VwW2ldID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkdyb3VwTmFtZShpKTtcbiAgICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgKz0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44O844K344On44Oz44Gu6Kqt44G/6L6844G/XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvbkdyb3VwQ291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLnByZUxvYWRNb3Rpb25Hcm91cChncm91cFtpXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBjOOBquOBhOWgtOWQiFxuICAgICAgaWYgKG1vdGlvbkdyb3VwQ291bnQgPT0gMCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgIC8vIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zdGFydFVwKGdsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+ODpuODi+ODg+ODiOOBq+ODhuOCr+OCueODgeODo+OCkuODreODvOODieOBmeOCi1xuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cFRleHR1cmVzKCk6IHZvaWQge1xuICAgIC8vIGlQaG9uZeOBp+OBruOCouODq+ODleOCoeWTgeizquWQkeS4iuOBruOBn+OCgVR5cGVzY3JpcHTjgafjga9wcmVtdWx0aXBsaWVkQWxwaGHjgpLmjqHnlKhcbiAgICBjb25zdCB1c2VQcmVtdWx0aXBseSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgPT0gTG9hZFN0ZXAuTG9hZFRleHR1cmUpIHtcbiAgICAgIC8vIOODhuOCr+OCueODgeODo+iqreOBv+i+vOOBv+eUqFxuICAgICAgY29uc3QgdGV4dHVyZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUNvdW50KCk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBtb2RlbFRleHR1cmVOdW1iZXIgPSAwO1xuICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXIgPCB0ZXh0dXJlQ291bnQ7XG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlcisrXG4gICAgICApIHtcbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj5ZCN44GM56m65paH5a2X44Gg44Gj44Gf5aC05ZCI44Gv44Ot44O844OJ44O744OQ44Kk44Oz44OJ5Yem55CG44KS44K544Kt44OD44OXXG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKG1vZGVsVGV4dHVyZU51bWJlcikgPT0gJycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0VGV4dHVyZUZpbGVOYW1lIG51bGwnKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlYkdM44Gu44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXG4gICAgICAgIGxldCB0ZXh0dXJlUGF0aCA9XG4gICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldFRleHR1cmVGaWxlTmFtZShtb2RlbFRleHR1cmVOdW1iZXIpO1xuICAgICAgICB0ZXh0dXJlUGF0aCA9IHRoaXMuX21vZGVsSG9tZURpciArIHRleHR1cmVQYXRoO1xuXG4gICAgICAgIC8vIOODreODvOODieWujOS6huaZguOBq+WRvOOBs+WHuuOBmeOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgICAgICBjb25zdCBvbkxvYWQgPSAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKTogdm9pZCA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLmJpbmRUZXh0dXJlKG1vZGVsVGV4dHVyZU51bWJlciwgdGV4dHVyZUluZm8uaWQpO1xuXG4gICAgICAgICAgdGhpcy5fdGV4dHVyZUNvdW50Kys7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdGV4dHVyZUNvdW50ID49IHRleHR1cmVDb3VudCkge1xuICAgICAgICAgICAgLy8g44Ot44O844OJ5a6M5LqGXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkNvbXBsZXRlU2V0dXA7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIOiqreOBv+i+vOOBv1xuICAgICAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKVxuICAgICAgICAgIC5nZXRUZXh0dXJlTWFuYWdlcigpXG4gICAgICAgICAgLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSh0ZXh0dXJlUGF0aCwgdXNlUHJlbXVsdGlwbHksIG9uTG9hZCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zZXRJc1ByZW11bHRpcGxpZWRBbHBoYSh1c2VQcmVtdWx0aXBseSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRUZXh0dXJlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njgpLlho3mp4vnr4njgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxvYWRSZW5kZXJlcigpOiB2b2lkIHtcbiAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgIT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyID0gTEFwcFBhbC5nZXREZWx0YVRpbWUoKTtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB0aGlzLl9kcmFnWCA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFgoKTtcbiAgICB0aGlzLl9kcmFnWSA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFkoKTtcblxuICAgIC8vIOODouODvOOCt+ODp+ODs+OBq+OCiOOCi+ODkeODqeODoeODvOOCv+abtOaWsOOBruacieeEoVxuICAgIGxldCBtb3Rpb25VcGRhdGVkID0gZmFsc2U7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5fbW9kZWwubG9hZFBhcmFtZXRlcnMoKTsgLy8g5YmN5Zue44K744O844OW44GV44KM44Gf54q25oWL44KS44Ot44O844OJXG4gICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgYzjgarjgYTloLTlkIjjgIHlvoXmqZ/jg6Ljg7zjgrfjg6fjg7Pjga7kuK3jgYvjgonjg6njg7Pjg4Djg6Djgaflho3nlJ/jgZnjgotcbiAgICAgIHRoaXMuc3RhcnRSYW5kb21Nb3Rpb24oXG4gICAgICAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBJZGxlLFxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5SWRsZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW90aW9uVXBkYXRlZCA9IHRoaXMuX21vdGlvbk1hbmFnZXIudXBkYXRlTW90aW9uKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgZGVsdGFUaW1lU2Vjb25kc1xuICAgICAgKTsgLy8g44Oi44O844K344On44Oz44KS5pu05pawXG4gICAgfVxuICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7IC8vIOeKtuaFi+OCkuS/neWtmFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIOOBvuOBsOOBn+OBjVxuICAgIGlmICghbW90aW9uVXBkYXRlZCkge1xuICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rICE9IG51bGwpIHtcbiAgICAgICAgLy8g44Oh44Kk44Oz44Oi44O844K344On44Oz44Gu5pu05paw44GM44Gq44GE44Go44GNXG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpOyAvLyDnm67jg5Hjg4FcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIudXBkYXRlTW90aW9uKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTsgLy8g6KGo5oOF44Gn44OR44Op44Oh44O844K/5pu05paw77yI55u45a++5aSJ5YyW77yJXG4gICAgfVxuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL5aSJ5YyWXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL6aGU44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1BbmdsZVgsIHRoaXMuX2RyYWdYICogMzApOyAvLyAtMzDjgYvjgokzMOOBruWApOOCkuWKoOOBiOOCi1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtQW5nbGVZLCB0aGlzLl9kcmFnWSAqIDMwKTtcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICB0aGlzLl9pZFBhcmFtQW5nbGVaLFxuICAgICAgdGhpcy5fZHJhZ1ggKiB0aGlzLl9kcmFnWSAqIC0zMFxuICAgICk7XG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovkvZPjga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCxcbiAgICAgIHRoaXMuX2RyYWdYICogMTBcbiAgICApOyAvLyAtMTDjgYvjgokxMOOBruWApOOCkuWKoOOBiOOCi1xuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL55uu44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWCwgdGhpcy5fZHJhZ1gpOyAvLyAtMeOBi+OCiTHjga7lgKTjgpLliqDjgYjjgotcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUV5ZUJhbGxZLCB0aGlzLl9kcmFnWSk7XG5cbiAgICAvLyDlkbzlkLjjgarjgalcbiAgICBpZiAodGhpcy5fYnJlYXRoICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2JyZWF0aC51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB9XG5cbiAgICAvLyDniannkIbmvJTnrpfjga7oqK3lrppcbiAgICBpZiAodGhpcy5fcGh5c2ljcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9waHlzaWNzLmV2YWx1YXRlKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB9XG5cbiAgICAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jga7oqK3lrppcbiAgICBpZiAodGhpcy5fbGlwc3luYykge1xuICAgICAgbGV0IHZhbHVlID0gMC4wOyAvLyDjg6rjgqLjg6vjgr/jgqTjg6Djgafjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLooYzjgYbloLTlkIjjgIHjgrfjgrnjg4bjg6DjgYvjgonpn7Pph4/jgpLlj5blvpfjgZfjgabjgIEwfjHjga7nr4Tlm7LjgaflgKTjgpLlhaXlipvjgZfjgb7jgZnjgIJcblxuICAgICAgdGhpcy5fd2F2RmlsZUhhbmRsZXIudXBkYXRlKGRlbHRhVGltZVNlY29uZHMpO1xuICAgICAgdmFsdWUgPSB0aGlzLl93YXZGaWxlSGFuZGxlci5nZXRSbXMoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXBTeW5jSWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jSWRzLmF0KGkpLCB2YWx1ZSwgMC44KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg53jg7zjgrrjga7oqK3lrppcbiAgICBpZiAodGhpcy5fcG9zZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3NlLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkumWi+Wni+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBubyDjgrDjg6vjg7zjg5flhoXjga7nlarlj7dcbiAgICogQHBhcmFtIHByaW9yaXR5IOWEquWFiOW6plxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEByZXR1cm4g6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLaXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44GvWy0xXVxuICAgKi9cbiAgcHVibGljIHN0YXJ0TW90aW9uKFxuICAgIGdyb3VwOiBzdHJpbmcsXG4gICAgbm86IG51bWJlcixcbiAgICBwcmlvcml0eTogbnVtYmVyLFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICBpZiAocHJpb3JpdHkgPT0gTEFwcERlZmluZS5Qcmlvcml0eUZvcmNlKSB7XG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnNldFJlc2VydmVQcmlvcml0eShwcmlvcml0eSk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5fbW90aW9uTWFuYWdlci5yZXNlcnZlTW90aW9uKHByaW9yaXR5KSkge1xuICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcIltBUFBdY2FuJ3Qgc3RhcnQgbW90aW9uLlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1vdGlvbkZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZpbGVOYW1lKGdyb3VwLCBubyk7XG5cbiAgICAvLyBleCkgaWRsZV8wXG4gICAgY29uc3QgbmFtZSA9IGAke2dyb3VwfV8ke25vfWA7XG4gICAgbGV0IG1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSBhcyBDdWJpc21Nb3Rpb247XG4gICAgbGV0IGF1dG9EZWxldGUgPSBmYWxzZTtcblxuICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7bW90aW9uRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIG1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlclxuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IGZhZGVUaW1lOiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKFxuICAgICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgICBub1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZUluVGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgbm8pO1xuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlT3V0VGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG4gICAgICAgICAgYXV0b0RlbGV0ZSA9IHRydWU7IC8vIOe1guS6huaZguOBq+ODoeODouODquOBi+OCieWJiumZpFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW90aW9uLnNldEZpbmlzaGVkTW90aW9uSGFuZGxlcihvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG4gICAgfVxuXG4gICAgLy92b2ljZVxuICAgIGNvbnN0IHZvaWNlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvblNvdW5kRmlsZU5hbWUoZ3JvdXAsIG5vKTtcbiAgICBpZiAodm9pY2UubG9jYWxlQ29tcGFyZSgnJykgIT0gMCkge1xuICAgICAgbGV0IHBhdGggPSB2b2ljZTtcbiAgICAgIHBhdGggPSB0aGlzLl9tb2RlbEhvbWVEaXIgKyBwYXRoO1xuICAgICAgdGhpcy5fd2F2RmlsZUhhbmRsZXIuc3RhcnQocGF0aCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdc3RhcnQgbW90aW9uOiBbJHtncm91cH1fJHtub31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICAgIG1vdGlvbixcbiAgICAgIGF1dG9EZWxldGUsXG4gICAgICBwcmlvcml0eVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Op44Oz44OA44Og44Gr6YG444Gw44KM44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KL44CCXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIHByaW9yaXR5IOWEquWFiOW6plxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEByZXR1cm4g6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLaXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44GvWy0xXVxuICAgKi9cbiAgcHVibGljIHN0YXJ0UmFuZG9tTW90aW9uKFxuICAgIGdyb3VwOiBzdHJpbmcsXG4gICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cCkgPT0gMCkge1xuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgbm86IG51bWJlciA9IE1hdGguZmxvb3IoXG4gICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKVxuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE1vdGlvbihncm91cCwgbm8sIHByaW9yaXR5LCBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf6KGo5oOF44Oi44O844K344On44Oz44KS44K744OD44OI44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBleHByZXNzaW9uSWQg6KGo5oOF44Oi44O844K344On44Oz44GuSURcbiAgICovXG4gIHB1YmxpYyBzZXRFeHByZXNzaW9uKGV4cHJlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbklkKTtcblxuICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb246IFske2V4cHJlc3Npb25JZH1dYCk7XG4gICAgfVxuXG4gICAgaWYgKG1vdGlvbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5zdGFydE1vdGlvblByaW9yaXR5KFxuICAgICAgICBtb3Rpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdZXhwcmVzc2lvblske2V4cHJlc3Npb25JZH1dIGlzIG51bGxgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBWaXJ0aXVhbCBSZWFjdGlvbiBBZGRpdGlvbmFsIENvZGVcbiAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/ooajmg4Xjg6Ljg7zjgrfjg6fjg7PjgpLjgrvjg4Pjg4jjgZnjgotcbiAgKiovXG4gIHB1YmxpYyBzZXROdW1FeHByZXNzaW9uKGV4cHJlc3Npb25OdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9leHByZXNzaW9ucy5nZXRTaXplKCkgPD0gZXhwcmVzc2lvbk51bWJlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSB0aGlzLl9leHByZXNzaW9ucy5fa2V5VmFsdWVzW2V4cHJlc3Npb25OdW1iZXJdLmZpcnN0O1xuICAgIHRoaXMuc2V0RXhwcmVzc2lvbihuYW1lKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICog44Op44Oz44OA44Og44Gr6YG444Gw44KM44Gf6KGo5oOF44Oi44O844K344On44Oz44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0UmFuZG9tRXhwcmVzc2lvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBubzogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmIChpID09IG5vKSB7XG4gICAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IHRoaXMuX2V4cHJlc3Npb25zLl9rZXlWYWx1ZXNbaV0uZmlyc3Q7XG4gICAgICAgIHRoaXMuc2V0RXhwcmVzc2lvbihuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7nmbrngavjgpLlj5fjgZHlj5bjgotcbiAgICovXG4gIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xuICAgIEN1YmlzbUxvZ0luZm8oJ3swfSBpcyBmaXJlZCBvbiBMQXBwTW9kZWwhIScsIGV2ZW50VmFsdWUucyk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44OG44K544OIXG4gICAqIOaMh+Wumu+8qe+8pOOBrumggueCueODquOCueODiOOBi+OCieefqeW9ouOCkuioiOeul+OBl+OAgeW6p+aomeOCkuOBjOefqeW9ouevhOWbsuWGheOBi+WIpOWumuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gaGl0QXJlbmFOYW1lICDlvZPjgZ/jgorliKTlrprjgpLjg4bjgrnjg4jjgZnjgovlr77osaHjga5JRFxuICAgKiBAcGFyYW0geCAgICAgICAgICAgICDliKTlrprjgpLooYzjgYZY5bqn5qiZXG4gICAqIEBwYXJhbSB5ICAgICAgICAgICAgIOWIpOWumuOCkuihjOOBhlnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBoaXRUZXN0KGhpdEFyZW5hTmFtZTogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIC8vIOmAj+aYjuaZguOBr+W9k+OBn+OCiuWIpOWumueEoeOBl+OAglxuICAgIGlmICh0aGlzLl9vcGFjaXR5IDwgMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYXNDb3VudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFOYW1lKGkpID09IGhpdEFyZW5hTmFtZSkge1xuICAgICAgICBjb25zdCBkcmF3SWQ6IEN1YmlzbUlkSGFuZGxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFJZChpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIaXQoZHJhd0lkLCB4LCB5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44KS44Kw44Or44O844OX5ZCN44GL44KJ5LiA5ous44Gn44Ot44O844OJ44GZ44KL44CCXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OBruWQjeWJjeOBr+WGhemDqOOBp01vZGVsU2V0dGluZ+OBi+OCieWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44OH44O844K/44Gu44Kw44Or44O844OX5ZCNXG4gICAqL1xuICBwdWJsaWMgcHJlTG9hZE1vdGlvbkdyb3VwKGdyb3VwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cCk7IGkrKykge1xuICAgICAgY29uc3QgbW90aW9uRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXAsIGkpO1xuXG4gICAgICAvLyBleCkgaWRsZV8wXG4gICAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7aX1gO1xuICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICBgW0FQUF1sb2FkIG1vdGlvbjogJHttb3Rpb25GaWxlTmFtZX0gPT4gWyR7bmFtZX1dYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHttb3Rpb25GaWxlTmFtZX1gKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgY29uc3QgdG1wTW90aW9uOiBDdWJpc21Nb3Rpb24gPSB0aGlzLmxvYWRNb3Rpb24oXG4gICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGxldCBmYWRlVGltZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoZ3JvdXAsIGkpO1xuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgIHRtcE1vdGlvbi5zZXRGYWRlSW5UaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmYWRlVGltZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwLCBpKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICB0bXBNb3Rpb24uc2V0RmFkZU91dFRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0bXBNb3Rpb24uc2V0RWZmZWN0SWRzKHRoaXMuX2V5ZUJsaW5rSWRzLCB0aGlzLl9saXBTeW5jSWRzKTtcblxuICAgICAgICAgIGlmICh0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKHRoaXMuX21vdGlvbnMuZ2V0VmFsdWUobmFtZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX21vdGlvbnMuc2V0VmFsdWUobmFtZSwgdG1wTW90aW9uKTtcblxuICAgICAgICAgIHRoaXMuX21vdGlvbkNvdW50Kys7XG4gICAgICAgICAgaWYgKHRoaXMuX21vdGlvbkNvdW50ID49IHRoaXMuX2FsbE1vdGlvbkNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgICAgICAvLyDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7PjgpLlgZzmraLjgZnjgotcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgICAgICAgICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gICAgICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuc3RhcnRVcChnbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44GZ44G544Gm44Gu44Oi44O844K344On44Oz44OH44O844K/44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZU1vdGlvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5fbW90aW9ucy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFqOOBpuOBruihqOaDheODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VFeHByZXNzaW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLl9leHByZXNzaW9ucy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WHpueQhuOAguODouODh+ODq+OCkuaPj+eUu+OBmeOCi+epuumWk+OBrlZpZXctUHJvamVjdGlvbuihjOWIl+OCkua4oeOBmeOAglxuICAgKi9cbiAgcHVibGljIGRvRHJhdygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544K144Kk44K644KS5rih44GZXG4gICAgY29uc3Qgdmlld3BvcnQ6IG51bWJlcltdID0gWzAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodF07XG5cbiAgICB0aGlzLmdldFJlbmRlcmVyKCkuc2V0UmVuZGVyU3RhdGUoZnJhbWVCdWZmZXIsIHZpZXdwb3J0KTtcbiAgICB0aGlzLmdldFJlbmRlcmVyKCkuZHJhd01vZGVsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5Yem55CG44CC44Oi44OH44Or44KS5o+P55S744GZ44KL56m66ZaT44GuVmlldy1Qcm9qZWN0aW9u6KGM5YiX44KS5rih44GZ44CCXG4gICAqL1xuICBwdWJsaWMgZHJhdyhtYXRyaXg6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDlkIToqq3jgb/ovrzjgb/ntYLkuoblvoxcbiAgICBpZiAodGhpcy5fc3RhdGUgPT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkge1xuICAgICAgbWF0cml4Lm11bHRpcGx5QnlNYXRyaXgodGhpcy5fbW9kZWxNYXRyaXgpO1xuXG4gICAgICB0aGlzLmdldFJlbmRlcmVyKCkuc2V0TXZwTWF0cml4KG1hdHJpeCk7XG5cbiAgICAgIHRoaXMuZG9EcmF3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9tb2RlbFNldHRpbmcgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsSG9tZURpciA9IG51bGw7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuXG4gICAgdGhpcy5fZXllQmxpbmtJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX2xpcFN5bmNJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuXG4gICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPigpO1xuICAgIHRoaXMuX2V4cHJlc3Npb25zID0gbmV3IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+KCk7XG5cbiAgICB0aGlzLl9oaXRBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xuICAgIHRoaXMuX3VzZXJBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xuXG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWFxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWVxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWiA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWlxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUV5ZUJhbGxYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFhcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1FeWVCYWxsWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxZXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVhcbiAgICApO1xuXG4gICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkQXNzZXRzO1xuICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCA9IDA7XG4gICAgdGhpcy5fdGV4dHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLl9tb3Rpb25Db3VudCA9IDA7XG4gICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xuICB9XG5cbiAgX21vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZzsgLy8g44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw5oOF5aCxXG4gIF9tb2RlbEhvbWVEaXI6IHN0cmluZzsgLy8g44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw44GM572u44GL44KM44Gf44OH44Kj44Os44Kv44OI44OqXG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICBfZXllQmxpbmtJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+eerOOBjeapn+iDveeUqOODkeODqeODoeODvOOCv0lEXG4gIF9saXBTeW5jSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/jg6rjg4Pjg5fjgrfjg7Pjgq/mqZ/og73nlKjjg5Hjg6njg6Hjg7zjgr9JRFxuXG4gIF9tb3Rpb25zOiBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPjsgLy8g6Kqt44G/6L6844G+44KM44Gm44GE44KL44Oi44O844K344On44Oz44Gu44Oq44K544OIXG4gIF9leHByZXNzaW9uczogY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj47IC8vIOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ihqOaDheOBruODquOCueODiFxuXG4gIF9oaXRBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XG4gIF91c2VyQXJlYTogY3NtVmVjdG9yPGNzbVJlY3Q+O1xuXG4gIF9pZFBhcmFtQW5nbGVYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQW5nbGVYXG4gIF9pZFBhcmFtQW5nbGVZOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQW5nbGVZXG4gIF9pZFBhcmFtQW5nbGVaOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQW5nbGVaXG4gIF9pZFBhcmFtRXllQmFsbFg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1FeWVCYWxsWFxuICBfaWRQYXJhbUV5ZUJhbGxZOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtRXllQkFsbFlcbiAgX2lkUGFyYW1Cb2R5QW5nbGVYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQm9keUFuZ2xlWFxuXG4gIF9zdGF0ZTogbnVtYmVyOyAvLyDnj77lnKjjga7jgrnjg4bjg7zjgr/jgrnnrqHnkIbnlKhcbiAgX2V4cHJlc3Npb25Db3VudDogbnVtYmVyOyAvLyDooajmg4Xjg4fjg7zjgr/jgqvjgqbjg7Pjg4hcbiAgX3RleHR1cmVDb3VudDogbnVtYmVyOyAvLyDjg4bjgq/jgrnjg4Hjg6Pjgqvjgqbjg7Pjg4hcbiAgX21vdGlvbkNvdW50OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCq+OCpuODs+ODiFxuICBfYWxsTW90aW9uQ291bnQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz57eP5pWwXG4gIF93YXZGaWxlSGFuZGxlcjogTEFwcFdhdkZpbGVIYW5kbGVyOyAvL3dhduODleOCoeOCpOODq+ODj+ODs+ODieODqVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Dkvp3lrZjmqZ/og73jgpLmir3osaHljJbjgZnjgosgQ3ViaXNtIFBsYXRmb3JtIEFic3RyYWN0aW9uIExheWVyLlxuICpcbiAqIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OChOaZguWIu+WPluW+l+etieOBruODl+ODqeODg+ODiOODleOCqeODvOODoOOBq+S+neWtmOOBmeOCi+mWouaVsOOCkuOBvuOBqOOCgeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFBhbCB7XG4gIC8qKlxuICAgKiDjg5XjgqHjgqTjg6vjgpLjg5DjgqTjg4jjg4fjg7zjgr/jgajjgZfjgaboqq3jgb/jgZPjgoBcbiAgICpcbiAgICogQHBhcmFtIGZpbGVQYXRoIOiqreOBv+i+vOOBv+WvvuixoeODleOCoeOCpOODq+OBruODkeOCuVxuICAgKiBAcmV0dXJuXG4gICAqIHtcbiAgICogICAgICBidWZmZXIsICAg6Kqt44G/6L6844KT44Gg44OQ44Kk44OI44OH44O844K/XG4gICAqICAgICAgc2l6ZSAgICAgICAg44OV44Kh44Kk44Or44K144Kk44K6XG4gICAqIH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbG9hZEZpbGVBc0J5dGVzKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICBmZXRjaChmaWxlUGF0aClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiBjYWxsYmFjayhhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODq+OCv+aZgumWk++8iOWJjeWbnuODleODrOODvOODoOOBqOOBruW3ruWIhu+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODq+OCv+aZgumWk1ttc11cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0RGVsdGFUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc19kZWx0YVRpbWU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZVRpbWUoKTogdm9pZCB7XG4gICAgdGhpcy5zX2N1cnJlbnRGcmFtZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5zX2RlbHRhVGltZSA9ICh0aGlzLnNfY3VycmVudEZyYW1lIC0gdGhpcy5zX2xhc3RGcmFtZSkgLyAxMDAwO1xuICAgIHRoaXMuc19sYXN0RnJhbWUgPSB0aGlzLnNfY3VycmVudEZyYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODoeODg+OCu+ODvOOCuOOCkuWHuuWKm+OBmeOCi1xuICAgKiBAcGFyYW0gbWVzc2FnZSDmloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJpbnRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG5cbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xuXG4gIHN0YXRpYyBzX2N1cnJlbnRGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19kZWx0YVRpbWUgPSAwLjA7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjYW52YXMsIGdsIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuXG4vKipcbiAqIOOCueODl+ODqeOCpOODiOOCkuWun+ijheOBmeOCi+OCr+ODqeOCuVxuICpcbiAqIOODhuOCr+OCueODgeODo++8qe+8pOOAgVJlY3Tjga7nrqHnkIZcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBTcHJpdGUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSB4ICAgICAgICAgICAgeOW6p+aomVxuICAgKiBAcGFyYW0geSAgICAgICAgICAgIHnluqfmqJlcbiAgICogQHBhcmFtIHdpZHRoICAgICAgICDmqKrluYVcbiAgICogQHBhcmFtIGhlaWdodCAgICAgICDpq5jjgZVcbiAgICogQHBhcmFtIHRleHR1cmVJZCAgICDjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICB0ZXh0dXJlSWQ6IFdlYkdMVGV4dHVyZVxuICApIHtcbiAgICB0aGlzLl9yZWN0ID0gbmV3IFJlY3QoKTtcbiAgICB0aGlzLl9yZWN0LmxlZnQgPSB4IC0gd2lkdGggKiAwLjU7XG4gICAgdGhpcy5fcmVjdC5yaWdodCA9IHggKyB3aWR0aCAqIDAuNTtcbiAgICB0aGlzLl9yZWN0LnVwID0geSArIGhlaWdodCAqIDAuNTtcbiAgICB0aGlzLl9yZWN0LmRvd24gPSB5IC0gaGVpZ2h0ICogMC41O1xuICAgIHRoaXMuX3RleHR1cmUgPSB0ZXh0dXJlSWQ7XG4gICAgdGhpcy5fdmVydGV4QnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLl91dkJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5faW5kZXhCdWZmZXIgPSBudWxsO1xuXG4gICAgdGhpcy5fcG9zaXRpb25Mb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fdXZMb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fdGV4dHVyZUxvY2F0aW9uID0gbnVsbDtcblxuICAgIHRoaXMuX3Bvc2l0aW9uQXJyYXkgPSBudWxsO1xuICAgIHRoaXMuX3V2QXJyYXkgPSBudWxsO1xuICAgIHRoaXMuX2luZGV4QXJyYXkgPSBudWxsO1xuXG4gICAgdGhpcy5fZmlyc3REcmF3ID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlY3QgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl90ZXh0dXJlKTtcbiAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl91dkJ1ZmZlcik7XG4gICAgdGhpcy5fdXZCdWZmZXIgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX3ZlcnRleEJ1ZmZlcik7XG4gICAgdGhpcy5fdmVydGV4QnVmZmVyID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9pbmRleEJ1ZmZlcik7XG4gICAgdGhpcy5faW5kZXhCdWZmZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFRleHR1cmUoKTogV2ViR0xUZXh0dXJlIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmj4/nlLvjgZnjgovjgIJcbiAgICogQHBhcmFtIHByb2dyYW1JZCDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcbiAgICogQHBhcmFtIGNhbnZhcyDmj4/nlLvjgZnjgovjgq3jg6Pjg7Pjg5Hjgrnmg4XloLFcbiAgICovXG4gIHB1YmxpYyByZW5kZXIocHJvZ3JhbUlkOiBXZWJHTFByb2dyYW0pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGV4dHVyZSA9PSBudWxsKSB7XG4gICAgICAvLyDjg63jg7zjg4njgYzlrozkuobjgZfjgabjgYTjgarjgYRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDliJ3lm57mj4/nlLvmmYJcbiAgICBpZiAodGhpcy5fZmlyc3REcmF3KSB7XG4gICAgICAvLyDkvZXnlarnm67jga5hdHRyaWJ1dGXlpInmlbDjgYvlj5blvpdcbiAgICAgIHRoaXMuX3Bvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtSWQsICdwb3NpdGlvbicpO1xuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fcG9zaXRpb25Mb2NhdGlvbik7XG5cbiAgICAgIHRoaXMuX3V2TG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtSWQsICd1dicpO1xuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fdXZMb2NhdGlvbik7XG5cbiAgICAgIC8vIOS9leeVquebruOBrnVuaWZvcm3lpInmlbDjgYvlj5blvpdcbiAgICAgIHRoaXMuX3RleHR1cmVMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtSWQsICd0ZXh0dXJlJyk7XG5cbiAgICAgIC8vIHVuaWZvcm3lsZ7mgKfjga7nmbvpjLJcbiAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl90ZXh0dXJlTG9jYXRpb24sIDApO1xuXG4gICAgICAvLyB1duODkOODg+ODleOCoeOAgeW6p+aomeWIneacn+WMllxuICAgICAge1xuICAgICAgICB0aGlzLl91dkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMS4wLCAxLjBcbiAgICAgICAgXSk7XG5cbiAgICAgICAgLy8gdXbjg5Djg4Pjg5XjgqHjgpLkvZzmiJBcbiAgICAgICAgdGhpcy5fdXZCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgLy8g6aCC54K544OQ44OD44OV44Kh44CB5bqn5qiZ5Yid5pyf5YyWXG4gICAgICB7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIOmggueCueODh+ODvOOCv1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgKHRoaXMuX3JlY3QucmlnaHQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LnVwIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmxlZnQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LnVwIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmxlZnQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmRvd24gLSBtYXhIZWlnaHQgKiAwLjUpIC8gKG1heEhlaWdodCAqIDAuNSksXG4gICAgICAgICAgKHRoaXMuX3JlY3QucmlnaHQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmRvd24gLSBtYXhIZWlnaHQgKiAwLjUpIC8gKG1heEhlaWdodCAqIDAuNSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgLy8g6aCC54K544OQ44OD44OV44Kh44KS5L2c5oiQXG4gICAgICAgIHRoaXMuX3ZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuXG4gICAgICAvLyDpoILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjgIHliJ3mnJ/ljJZcbiAgICAgIHtcbiAgICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544OH44O844K/XG4gICAgICAgIHRoaXMuX2luZGV4QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDIsIDMsIDIsIDBdKTtcblxuICAgICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjgpLkvZzmiJBcbiAgICAgICAgdGhpcy5faW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZmlyc3REcmF3ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVVbluqfmqJnnmbvpjLJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdXZCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl91dkFycmF5LCBnbC5TVEFUSUNfRFJBVyk7XG5cbiAgICAvLyBhdHRyaWJ1dGXlsZ7mgKfjgpLnmbvpjLJcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuX3V2TG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAvLyDpoILngrnluqfmqJnjgpLnmbvpjLJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmVydGV4QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fcG9zaXRpb25BcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xuXG4gICAgLy8gYXR0cmlidXRl5bGe5oCn44KS55m76YyyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl9wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgLy8g6aCC54K544Kk44Oz44OH44OD44Kv44K544KS5L2c5oiQXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faW5kZXhCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2luZGV4QXJyYXksIGdsLkRZTkFNSUNfRFJBVyk7XG5cbiAgICAvLyDjg6Ljg4fjg6vjga7mj4/nlLtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcbiAgICBnbC5kcmF3RWxlbWVudHMoXG4gICAgICBnbC5UUklBTkdMRVMsXG4gICAgICB0aGlzLl9pbmRleEFycmF5Lmxlbmd0aCxcbiAgICAgIGdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgMFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6aXG4gICAqIEBwYXJhbSBwb2ludFggeOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIHnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBpc0hpdChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyDnlLvpnaLjgrXjgqTjgrrjgpLlj5blvpfjgZnjgovjgIJcbiAgICBjb25zdCB7IGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgLy8gWeW6p+aomeOBr+WkieaPm+OBmeOCi+W/heimgeOBguOCilxuICAgIGNvbnN0IHkgPSBoZWlnaHQgLSBwb2ludFk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgcG9pbnRYID49IHRoaXMuX3JlY3QubGVmdCAmJlxuICAgICAgcG9pbnRYIDw9IHRoaXMuX3JlY3QucmlnaHQgJiZcbiAgICAgIHkgPD0gdGhpcy5fcmVjdC51cCAmJlxuICAgICAgeSA+PSB0aGlzLl9yZWN0LmRvd25cbiAgICApO1xuICB9XG5cbiAgX3RleHR1cmU6IFdlYkdMVGV4dHVyZTsgLy8g44OG44Kv44K544OB44OjXG4gIF92ZXJ0ZXhCdWZmZXI6IFdlYkdMQnVmZmVyOyAvLyDpoILngrnjg5Djg4Pjg5XjgqFcbiAgX3V2QnVmZmVyOiBXZWJHTEJ1ZmZlcjsgLy8gdXbpoILngrnjg5Djg4Pjg5XjgqFcbiAgX2luZGV4QnVmZmVyOiBXZWJHTEJ1ZmZlcjsgLy8g6aCC54K544Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44KhXG4gIF9yZWN0OiBSZWN0OyAvLyDnn6nlvaJcblxuICBfcG9zaXRpb25Mb2NhdGlvbjogbnVtYmVyO1xuICBfdXZMb2NhdGlvbjogbnVtYmVyO1xuICBfdGV4dHVyZUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcblxuICBfcG9zaXRpb25BcnJheTogRmxvYXQzMkFycmF5O1xuICBfdXZBcnJheTogRmxvYXQzMkFycmF5O1xuICBfaW5kZXhBcnJheTogVWludDE2QXJyYXk7XG5cbiAgX2ZpcnN0RHJhdzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlY3Qge1xuICBwdWJsaWMgbGVmdDogbnVtYmVyOyAvLyDlt6bovrpcbiAgcHVibGljIHJpZ2h0OiBudW1iZXI7IC8vIOWPs+i+ulxuICBwdWJsaWMgdXA6IG51bWJlcjsgLy8g5LiK6L66XG4gIHB1YmxpYyBkb3duOiBudW1iZXI7IC8vIOS4i+i+ulxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuXG5pbXBvcnQgeyBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6PnrqHnkIbjgq/jg6njgrlcbiAqIOeUu+WDj+iqreOBv+i+vOOBv+OAgeeuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtVmVjdG9yPFRleHR1cmVJbmZvPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFRleHR1cmVJbmZvPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fdGV4dHVyZXMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBnbC5kZWxldGVUZXh0dXJlKGl0ZS5wdHIoKS5pZCk7XG4gICAgfVxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/oqq3jgb/ovrzjgb9cbiAgICpcbiAgICogQHBhcmFtIGZpbGVOYW1lIOiqreOBv+i+vOOCgOeUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKiBAcGFyYW0gdXNlUHJlbXVsdGlwbHkgUHJlbXVsdOWHpueQhuOCkuacieWKueOBq+OBmeOCi+OBi1xuICAgKiBAcmV0dXJuIOeUu+WDj+aDheWgseOAgeiqreOBv+i+vOOBv+WkseaVl+aZguOBr251bGzjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICB1c2VQcmVtdWx0aXBseTogYm9vbGVhbixcbiAgICBjYWxsYmFjazogKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbykgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICAvLyBzZWFyY2ggbG9hZGVkIHRleHR1cmUgYWxyZWFkeVxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBpdGUucHRyKCkuZmlsZU5hbWUgPT0gZmlsZU5hbWUgJiZcbiAgICAgICAgaXRlLnB0cigpLnVzZVByZW11bHRwbHkgPT0gdXNlUHJlbXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICAvLyAy5Zue55uu5Lul6ZmN44Gv44Kt44Oj44OD44K344Ol44GM5L2/55So44GV44KM44KLKOW+heOBoeaZgumWk+OBquOBlylcbiAgICAgICAgLy8gV2ViS2l044Gn44Gv5ZCM44GYSW1hZ2Xjga5vbmxvYWTjgpLlho3luqblkbzjgbbjgavjga/lho3jgqTjg7Pjgrnjgr/jg7PjgrnjgYzlv4XopoFcbiAgICAgICAgLy8g6Kmz57Sw77yaaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUwMjQxODFcbiAgICAgICAgaXRlLnB0cigpLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IGNhbGxiYWNrKGl0ZS5wdHIoKSk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg4fjg7zjgr/jga7jgqrjg7Pjg63jg7zjg4njgpLjg4jjg6rjgqzjg7zjgavjgZnjgotcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgLy8gUHJlbXVsdOWHpueQhuOCkuihjOOCj+OBm+OCi1xuICAgICAgaWYgKHVzZVByZW11bHRpcGx5KSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWcpO1xuXG4gICAgICAvLyDjg5/jg4Pjg5fjg57jg4Pjg5fjgpLnlJ/miJBcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLjg5DjgqTjg7Pjg4lcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICBjb25zdCB0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8gPSBuZXcgVGV4dHVyZUluZm8oKTtcbiAgICAgIGlmICh0ZXh0dXJlSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHRleHR1cmVJbmZvLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRleHR1cmVJbmZvLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICB0ZXh0dXJlSW5mby5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICB0ZXh0dXJlSW5mby5pZCA9IHRleDtcbiAgICAgICAgdGV4dHVyZUluZm8uaW1nID0gaW1nO1xuICAgICAgICB0ZXh0dXJlSW5mby51c2VQcmVtdWx0cGx5ID0gdXNlUHJlbXVsdGlwbHk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2hCYWNrKHRleHR1cmVJbmZvKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodGV4dHVyZUluZm8pO1xuICAgIH07XG4gICAgaW1nLnNyYyA9IGZpbGVOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDphY3liJfjgavlrZjlnKjjgZnjgovnlLvlg4/lhajjgabjgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX3RleHR1cmVzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+ODhuOCr+OCueODgeODo+OBrueUu+WDj+OCkuino+aUvuOBmeOCi+OAglxuICAgKiBAcGFyYW0gdGV4dHVyZSDop6PmlL7jgZnjgovjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuYXQoaSkuaWQgIT0gdGV4dHVyZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/lkI3liY3jga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIGZpbGVOYW1lIOino+aUvuOBmeOCi+eUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aChmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmZpbGVOYW1lID09IGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdGV4dHVyZXM6IGNzbVZlY3RvcjxUZXh0dXJlSW5mbz47XG59XG5cbi8qKlxuICog55S75YOP5oOF5aCx5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlSW5mbyB7XG4gIGltZzogSFRNTEltYWdlRWxlbWVudDsgLy8g55S75YOPXG4gIGlkOiBXZWJHTFRleHR1cmUgPSBudWxsOyAvLyDjg4bjgq/jgrnjg4Hjg6NcbiAgd2lkdGggPSAwOyAvLyDmqKrluYVcbiAgaGVpZ2h0ID0gMDsgLy8g6auY44GVXG4gIHVzZVByZW11bHRwbHk6IGJvb2xlYW47IC8vIFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgZmlsZU5hbWU6IHN0cmluZzsgLy8g44OV44Kh44Kk44Or5ZCNXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBDdWJpc21WaWV3TWF0cml4IH0gZnJvbSAnQGZyYW1ld29yay9tYXRoL2N1YmlzbXZpZXdtYXRyaXgnO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBjYW52YXMsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwTGl2ZTJETWFuYWdlciB9IGZyb20gJy4vbGFwcGxpdmUyZG1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBMQXBwU3ByaXRlIH0gZnJvbSAnLi9sYXBwc3ByaXRlJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgVG91Y2hNYW5hZ2VyIH0gZnJvbSAnLi90b3VjaG1hbmFnZXInO1xuXG4vKipcbiAqIOaPj+eUu+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFZpZXcge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9wcm9ncmFtSWQgPSBudWxsO1xuICAgIHRoaXMuX2JhY2sgPSBudWxsO1xuICAgIHRoaXMuX2dlYXIgPSBudWxsO1xuXG4gICAgLy8g44K/44OD44OB6Zai5L+C44Gu44Kk44OZ44Oz44OI566h55CGXG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyID0gbmV3IFRvdWNoTWFuYWdlcigpO1xuXG4gICAgLy8g44OH44OQ44Kk44K55bqn5qiZ44GL44KJ44K544Kv44Oq44O844Oz5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44Gf44KB44GuXG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4gPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcblxuICAgIC8vIOeUu+mdouOBruihqOekuuOBruaLoeWkp+e4ruWwj+OChOenu+WLleOBruWkieaPm+OCkuihjOOBhuihjOWIl1xuICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBuZXcgQ3ViaXNtVmlld01hdHJpeCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMluOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjYW52YXM7XG5cbiAgICBjb25zdCByYXRpbzogbnVtYmVyID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgY29uc3QgbGVmdDogbnVtYmVyID0gLXJhdGlvO1xuICAgIGNvbnN0IHJpZ2h0OiBudW1iZXIgPSByYXRpbztcbiAgICBjb25zdCBib3R0b206IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxMZWZ0O1xuICAgIGNvbnN0IHRvcDogbnVtYmVyID0gTEFwcERlZmluZS5WaWV3TG9naWNhbFJpZ2h0O1xuXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRTY3JlZW5SZWN0KGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCk7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+eUu+mdouOBruevhOWbsuOAgiBY44Gu5bem56uv44CBWOOBruWPs+err+OAgVnjga7kuIvnq6/jgIFZ44Gu5LiK56uvXG4gICAgdGhpcy5fdmlld01hdHJpeC5zY2FsZShMQXBwRGVmaW5lLlZpZXdTY2FsZSwgTEFwcERlZmluZS5WaWV3U2NhbGUpO1xuXG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4ubG9hZElkZW50aXR5KCk7XG4gICAgaWYgKHdpZHRoID4gaGVpZ2h0KSB7XG4gICAgICBjb25zdCBzY3JlZW5XOiBudW1iZXIgPSBNYXRoLmFicyhyaWdodCAtIGxlZnQpO1xuICAgICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4uc2NhbGVSZWxhdGl2ZShzY3JlZW5XIC8gd2lkdGgsIC1zY3JlZW5XIC8gd2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzY3JlZW5IOiBudW1iZXIgPSBNYXRoLmFicyh0b3AgLSBib3R0b20pO1xuICAgICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4uc2NhbGVSZWxhdGl2ZShzY3JlZW5IIC8gaGVpZ2h0LCAtc2NyZWVuSCAvIGhlaWdodCk7XG4gICAgfVxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zbGF0ZVJlbGF0aXZlKC13aWR0aCAqIDAuNSwgLWhlaWdodCAqIDAuNSk7XG5cbiAgICAvLyDooajnpLrnr4Tlm7Ljga7oqK3lrppcbiAgICB0aGlzLl92aWV3TWF0cml4LnNldE1heFNjYWxlKExBcHBEZWZpbmUuVmlld01heFNjYWxlKTsgLy8g6ZmQ55WM5ouh5by1546HXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNaW5TY2FsZShMQXBwRGVmaW5lLlZpZXdNaW5TY2FsZSk7IC8vIOmZkOeVjOe4ruWwj+eOh1xuXG4gICAgLy8g6KGo56S644Gn44GN44KL5pyA5aSn56+E5ZuyXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY3JlZW5SZWN0KFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heExlZnQsXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4UmlnaHQsXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4Qm90dG9tLFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFRvcFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbnVsbDtcbiAgICB0aGlzLl90b3VjaE1hbmFnZXIgPSBudWxsO1xuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbnVsbDtcblxuICAgIHRoaXMuX2dlYXIucmVsZWFzZSgpO1xuICAgIHRoaXMuX2dlYXIgPSBudWxsO1xuXG4gICAgdGhpcy5fYmFjay5yZWxlYXNlKCk7XG4gICAgdGhpcy5fYmFjayA9IG51bGw7XG5cbiAgICBnbC5kZWxldGVQcm9ncmFtKHRoaXMuX3Byb2dyYW1JZCk7XG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmj4/nlLvjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XG4gICAgZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuXG4gICAgaWYgKHRoaXMuX2JhY2spIHtcbiAgICAgIHRoaXMuX2JhY2sucmVuZGVyKHRoaXMuX3Byb2dyYW1JZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9nZWFyKSB7XG4gICAgICB0aGlzLl9nZWFyLnJlbmRlcih0aGlzLl9wcm9ncmFtSWQpO1xuICAgIH1cblxuICAgIGdsLmZsdXNoKCk7XG5cbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICBsaXZlMkRNYW5hZ2VyLnNldFZpZXdNYXRyaXgodGhpcy5fdmlld01hdHJpeCk7XG5cbiAgICBsaXZlMkRNYW5hZ2VyLm9uVXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu5Yid5pyf5YyW44KS6KGM44GG44CCXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZVNwcml0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gY2FudmFzLmhlaWdodDtcblxuICAgIGNvbnN0IHRleHR1cmVNYW5hZ2VyID0gTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuZ2V0VGV4dHVyZU1hbmFnZXIoKTtcbiAgICBjb25zdCByZXNvdXJjZXNQYXRoID0gTEFwcERlZmluZS5SZXNvdXJjZXNQYXRoO1xuXG4gICAgbGV0IGltYWdlTmFtZSA9ICcnO1xuXG4gICAgLy8g6IOM5pmv55S75YOP5Yid5pyf5YyWXG4gICAgaW1hZ2VOYW1lID0gTEFwcERlZmluZS5CYWNrSW1hZ2VOYW1lO1xuXG4gICAgLy8g6Z2e5ZCM5pyf44Gq44Gu44Gn44Kz44O844Or44OQ44OD44Kv6Zai5pWw44KS5L2c5oiQXG4gICAgY29uc3QgaW5pdEJhY2tHcm91bmRUZXh0dXJlID0gKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbyk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgeDogbnVtYmVyID0gd2lkdGggKiAwLjU7XG4gICAgICBjb25zdCB5OiBudW1iZXIgPSBoZWlnaHQgKiAwLjU7XG5cbiAgICAgIGNvbnN0IGZ3aWR0aCA9IHRleHR1cmVJbmZvLndpZHRoICogMi4wO1xuICAgICAgY29uc3QgZmhlaWdodCA9IGhlaWdodCAqIDAuOTU7XG4gICAgICB0aGlzLl9iYWNrID0gbmV3IExBcHBTcHJpdGUoeCwgeSwgZndpZHRoLCBmaGVpZ2h0LCB0ZXh0dXJlSW5mby5pZCk7XG4gICAgfTtcblxuICAgIHRleHR1cmVNYW5hZ2VyLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZShcbiAgICAgIHJlc291cmNlc1BhdGggKyBpbWFnZU5hbWUsXG4gICAgICBmYWxzZSxcbiAgICAgIGluaXRCYWNrR3JvdW5kVGV4dHVyZVxuICAgICk7XG5cbiAgICBjb25zb2xlLmxvZyhyZXNvdXJjZXNQYXRoKyBpbWFnZU5hbWUrXCLjgafjgZlcIik7XG5cbiAgICAvLyDmra/ou4rnlLvlg4/liJ3mnJ/ljJYgIC8qVmlydGl1YWwgUmVhY3Rpb24gQ29tbWVudCBPdXQgQ29kZSovXG4gICAgLyppbWFnZU5hbWUgPSBMQXBwRGVmaW5lLkdlYXJJbWFnZU5hbWU7XG4gICAgY29uc3QgaW5pdEdlYXJUZXh0dXJlID0gKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbyk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgeCA9IHdpZHRoIC0gdGV4dHVyZUluZm8ud2lkdGggKiAwLjU7XG4gICAgICBjb25zdCB5ID0gaGVpZ2h0IC0gdGV4dHVyZUluZm8uaGVpZ2h0ICogMC41O1xuICAgICAgY29uc3QgZndpZHRoID0gdGV4dHVyZUluZm8ud2lkdGg7XG4gICAgICBjb25zdCBmaGVpZ2h0ID0gdGV4dHVyZUluZm8uaGVpZ2h0O1xuICAgICAgdGhpcy5fZ2VhciA9IG5ldyBMQXBwU3ByaXRlKHgsIHksIGZ3aWR0aCwgZmhlaWdodCwgdGV4dHVyZUluZm8uaWQpO1xuICAgIH07XG5cbiAgICB0ZXh0dXJlTWFuYWdlci5jcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgICByZXNvdXJjZXNQYXRoICsgaW1hZ2VOYW1lLFxuICAgICAgZmFsc2UsXG4gICAgICBpbml0R2VhclRleHR1cmVcbiAgICApOyovXG5cbiAgICAvLyDjgrfjgqfjg7zjg4Djg7zjgpLkvZzmiJBcbiAgICBpZiAodGhpcy5fcHJvZ3JhbUlkID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Byb2dyYW1JZCA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmNyZWF0ZVNoYWRlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4HjgZXjgozjgZ/mmYLjgavlkbzjgbDjgozjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXG4gICAqIEBwYXJhbSBwb2ludFkg44K544Kv44Oq44O844OzWeW6p+aomVxuICAgKi9cbiAgXG4gIHB1YmxpYyBvblRvdWNoZXNCZWdhbihwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90b3VjaE1hbmFnZXIudG91Y2hlc0JlZ2FuKHBvaW50WCwgcG9pbnRZKTtcbiAgfVxuICBcblxuICAvKipcbiAgICog44K/44OD44OB44GX44Gm44GE44KL44Go44GN44Gr44Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNNb3ZlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3WDogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WCh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpKTtcbiAgICBjb25zdCB2aWV3WTogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WSh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WSgpKTtcblxuICAgIHRoaXMuX3RvdWNoTWFuYWdlci50b3VjaGVzTW92ZWQocG9pbnRYLCBwb2ludFkpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKHZpZXdYLCB2aWV3WSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNFbmRlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjgr/jg4Pjg4HntYLkuoZcbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuXG4gICAge1xuICAgICAgLy8g44K344Oz44Kw44Or44K/44OD44OXXG4gICAgICBjb25zdCB4OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKFxuICAgICAgICB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpXG4gICAgICApOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICAgIGNvbnN0IHk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoXG4gICAgICAgIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKClcbiAgICAgICk7IC8vIOirlueQhuW6p+aomeWkieWMluOBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuXG4gICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z1RvdWNoTG9nRW5hYmxlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXXRvdWNoZXNFbmRlZCB4OiAke3h9IHk6ICR7eX1gKTtcbiAgICAgIH1cbiAgICAgIGxpdmUyRE1hbmFnZXIub25UYXAoeCwgeSk7XG5cbiAgICAgIC8vIOatr+i7iuOBq+OCv+ODg+ODl+OBl+OBn+OBiyAgIC8qVmlydGl1YWwgUmVhY3Rpb24gQ29tbWVudCBPdXQgQ29kZSovXG4gICAgICAvKmlmICh0aGlzLl9nZWFyLmlzSGl0KHBvaW50WCwgcG9pbnRZKSkge1xuICAgICAgICBsaXZlMkRNYW5hZ2VyLm5leHRTY2VuZSgpO1xuICAgICAgfSovXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFjluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VYIOODh+ODkOOCpOOCuVjluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblg6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVgoZGV2aWNlWCk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVgoc2NyZWVuWCk7IC8vIOaLoeWkp+OAgee4ruWwj+OAgeenu+WLleW+jOOBruWApOOAglxuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VZIOODh+ODkOOCpOOCuVnluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVkoc2NyZWVuWSk7XG4gIH1cblxuICAvKipcbiAgICogWOW6p+aomeOCklNjcmVlbuW6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKiBAcGFyYW0gZGV2aWNlWCDjg4fjg5DjgqTjgrlY5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJTY3JlZW7luqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRldmljZVkg44OH44OQ44Kk44K5WeW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVNjcmVlblkoZGV2aWNlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShkZXZpY2VZKTtcbiAgfVxuXG4gIF90b3VjaE1hbmFnZXI6IFRvdWNoTWFuYWdlcjsgLy8g44K/44OD44OB44Oe44ON44O844K444Oj44O8XG4gIF9kZXZpY2VUb1NjcmVlbjogQ3ViaXNtTWF0cml4NDQ7IC8vIOODh+ODkOOCpOOCueOBi+OCieOCueOCr+ODquODvOODs+OBuOOBruihjOWIl1xuICBfdmlld01hdHJpeDogQ3ViaXNtVmlld01hdHJpeDsgLy8gdmlld01hdHJpeFxuICBfcHJvZ3JhbUlkOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgElEXG4gIF9iYWNrOiBMQXBwU3ByaXRlOyAvLyDog4zmma/nlLvlg49cbiAgX2dlYXI6IExBcHBTcHJpdGU7IC8vIOOCruOCoueUu+WDj1xuICBfY2hhbmdlTW9kZWw6IGJvb2xlYW47IC8vIOODouODh+ODq+WIh+OCiuabv+OBiOODleODqeOCsFxuICBfaXNDbGljazogYm9vbGVhbjsgLy8g44Kv44Oq44OD44Kv5LitXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcblxuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwV2F2RmlsZUhhbmRsZXIgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKSB7XG4gICAgbGV0IGdvYWxPZmZzZXQ6IG51bWJlcjtcbiAgICBsZXQgcm1zOiBudW1iZXI7XG5cbiAgICAvLyDjg4fjg7zjgr/jg63jg7zjg4nliY0v44OV44Kh44Kk44Or5pyr5bC+44Gr6YGU44GX44Gf5aC05ZCI44Gv5pu05paw44GX44Gq44GEXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcGNtRGF0YSA9PSBudWxsIHx8XG4gICAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPj0gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgKSB7XG4gICAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOe1jOmBjuaZgumWk+W+jOOBrueKtuaFi+OCkuS/neaMgVxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGdvYWxPZmZzZXQgPSBNYXRoLmZsb29yKFxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICogdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsaW5nUmF0ZVxuICAgICk7XG4gICAgaWYgKGdvYWxPZmZzZXQgPiB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWwpIHtcbiAgICAgIGdvYWxPZmZzZXQgPSB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWw7XG4gICAgfVxuXG4gICAgLy8gUk1T6KiI5risXG4gICAgcm1zID0gMC4wO1xuICAgIGZvciAoXG4gICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgY2hhbm5lbENvdW50KytcbiAgICApIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzYW1wbGVDb3VudCA9IHRoaXMuX3NhbXBsZU9mZnNldDtcbiAgICAgICAgc2FtcGxlQ291bnQgPCBnb2FsT2Zmc2V0O1xuICAgICAgICBzYW1wbGVDb3VudCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGNtID0gdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XTtcbiAgICAgICAgcm1zICs9IHBjbSAqIHBjbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm1zID0gTWF0aC5zcXJ0KFxuICAgICAgcm1zIC9cbiAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzICpcbiAgICAgICAgICAoZ29hbE9mZnNldCAtIHRoaXMuX3NhbXBsZU9mZnNldCkpXG4gICAgKTtcblxuICAgIHRoaXMuX2xhc3RSbXMgPSBybXM7XG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gZ29hbE9mZnNldDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydChmaWxlUGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8g44K144Oz44OX44Or5L2N5Y+C54Wn5L2N572u44KS5Yid5pyf5YyWXG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gMDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG5cbiAgICAvLyBSTVPlgKTjgpLjg6rjgrvjg4Pjg4hcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuXG4gICAgaWYgKCF0aGlzLmxvYWRXYXZGaWxlKGZpbGVQYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRSbXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFJtcztcbiAgfVxuXG4gIHB1YmxpYyBsb2FkV2F2RmlsZShmaWxlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IHJldCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX3BjbURhdGEgIT0gbnVsbCkge1xuICAgICAgdGhpcy5yZWxlYXNlUGNtRGF0YSgpO1xuICAgIH1cblxuICAgIC8vIOODleOCoeOCpOODq+ODreODvOODiVxuICAgIGNvbnN0IGFzeW5jRmlsZUxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gZmV0Y2goZmlsZVBhdGgpLnRoZW4ocmVzcG9uY2UgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uY2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhc3luY1dhdkZpbGVNYW5hZ2VyID0gKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlID0gYXdhaXQgYXN5bmNGaWxlTG9hZCgpO1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZURhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlKTtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUuYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPSAwO1xuXG4gICAgICAvLyDjg5XjgqHjgqTjg6vjg63jg7zjg4njgavlpLHmlZfjgZfjgabjgYTjgovjgYvjgIHlhYjpoK3jga7jgrfjgrDjg43jg4Hjg6NcIlJJRkZcIuOCkuWFpeOCjOOCi+OCteOCpOOCuuOCguOBquOBhOWgtOWQiOOBr+WkseaVl1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSA9PSBudWxsIHx8XG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplIDwgNFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8g44OV44Kh44Kk44Or5ZCNXG4gICAgICB0aGlzLl93YXZGaWxlSW5mby5fZmlsZU5hbWUgPSBmaWxlUGF0aDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g44K344Kw44ON44OB44OjIFwiUklGRlwiXG4gICAgICAgIGlmICghdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnUklGRicpKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBTaWduZXR1cmUgXCJSSUZGXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OV44Kh44Kk44Or44K144Kk44K6LTjvvIjoqq3jgb/po5vjgbDjgZfvvIlcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJXQVZFXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdXQVZFJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcIldBVkVcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJmbXQgXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdmbXQgJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcImZtdFwiLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZtdOODgeODo+ODs+OCr+OCteOCpOOCulxuICAgICAgICBjb25zdCBmbXRDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOODleOCqeODvOODnuODg+ODiElE44GvMe+8iOODquODi+OColBDTe+8ieS7peWkluWPl+OBkeS7mOOBkeOBquOBhFxuICAgICAgICBpZiAodGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpICE9IDEpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgaXMgbm90IGxpbmVhciBQQ00uJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OB44Oj44Oz44ON44Or5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzID1cbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOOCteODs+ODl+ODquODs+OCsOODrOODvOODiFxuICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxpbmdSYXRlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjg4fjg7zjgr/pgJ/luqZbYnl0ZS9zZWNd77yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44OW44Ot44OD44Kv44K144Kk44K677yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g6YeP5a2Q5YyW44OT44OD44OI5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyBmbXTjg4Hjg6Pjg7Pjgq/jga7mi6HlvLXpg6jliIbjga7oqq3jgb/po5vjgbDjgZdcbiAgICAgICAgaWYgKGZtdENodW5rU2l6ZSA+IDE2KSB7XG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCArPSBmbXRDaHVua1NpemUgLSAxNjtcbiAgICAgICAgfVxuICAgICAgICAvLyBcImRhdGFcIuODgeODo+ODs+OCr+OBjOWHuuePvuOBmeOCi+OBvuOBp+iqreOBv+mjm+OBsOOBl1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ2RhdGEnKSAmJlxuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPCB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ICs9XG4gICAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCkgKyA0O1xuICAgICAgICB9XG4gICAgICAgIC8vIOODleOCoeOCpOODq+WGheOBq1wiZGF0YVwi44OB44Oj44Oz44Kv44GM5Ye654++44GX44Gq44GL44Gj44GfXG4gICAgICAgIGlmICh0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ID49IHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBcImRhdGFcIiBDaHVuay4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrXjg7Pjg5fjg6vmlbBcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGRhdGFDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsID1cbiAgICAgICAgICAgIChkYXRhQ2h1bmtTaXplICogOCkgL1xuICAgICAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlICpcbiAgICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOmgmOWfn+eiuuS/nVxuICAgICAgICB0aGlzLl9wY21EYXRhID0gbmV3IEFycmF5KHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzKTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9wY21EYXRhW2NoYW5uZWxDb3VudF0gPSBuZXcgRmxvYXQzMkFycmF5KFxuICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDms6LlvaLjg4fjg7zjgr/lj5blvpdcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgc2FtcGxlQ291bnQgPSAwO1xuICAgICAgICAgIHNhbXBsZUNvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsO1xuICAgICAgICAgIHNhbXBsZUNvdW50KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBjaGFubmVsQ291bnQgPSAwO1xuICAgICAgICAgICAgY2hhbm5lbENvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHM7XG4gICAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XSA9IHRoaXMuZ2V0UGNtU2FtcGxlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGNtU2FtcGxlKCk6IG51bWJlciB7XG4gICAgbGV0IHBjbTMyO1xuXG4gICAgLy8gMzLjg5Pjg4Pjg4jluYXjgavmi6HlvLXjgZfjgabjgYvjgoktMe+9njHjga7nr4Tlm7LjgavkuLjjgoHjgotcbiAgICBzd2l0Y2ggKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlKSB7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHBjbTMyID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQ4KCkgLSAxMjg7XG4gICAgICAgIHBjbTMyIDw8PSAyNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE2OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKSA8PCAxNjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MjRMaXR0bGVFbmRpYW4oKSA8PCA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIOWvvuW/nOOBl+OBpuOBhOOBquOBhOODk+ODg+ODiOW5hVxuICAgICAgICBwY20zMiA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBwY20zMiAvIDIxNDc0ODM2NDc7IC8vTnVtYmVyLk1BWF9WQUxVRTtcbiAgfVxuXG4gIHB1YmxpYyByZWxlYXNlUGNtRGF0YSgpOiB2b2lkIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fcGNtRGF0YTtcbiAgICB0aGlzLl9wY21EYXRhID0gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BjbURhdGEgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IDAuMDtcbiAgICB0aGlzLl93YXZGaWxlSW5mbyA9IG5ldyBXYXZGaWxlSW5mbygpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIgPSBuZXcgQnl0ZVJlYWRlcigpO1xuICB9XG5cbiAgX3BjbURhdGE6IEFycmF5PEZsb2F0MzJBcnJheT47XG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjtcbiAgX2xhc3RSbXM6IG51bWJlcjtcbiAgX3NhbXBsZU9mZnNldDogbnVtYmVyO1xuICBfd2F2RmlsZUluZm86IFdhdkZpbGVJbmZvO1xuICBfYnl0ZVJlYWRlcjogQnl0ZVJlYWRlcjtcbiAgX2xvYWRGaWxldG9CeXRlcyA9IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUgPSBhcnJheUJ1ZmZlcjtcbiAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlRGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gbGVuZ3RoO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgV2F2RmlsZUluZm8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9maWxlTmFtZSA9ICcnO1xuICAgIHRoaXMuX251bWJlck9mQ2hhbm5lbHMgPSAwO1xuICAgIHRoaXMuX2JpdHNQZXJTYW1wbGUgPSAwO1xuICAgIHRoaXMuX3NhbXBsaW5nUmF0ZSA9IDA7XG4gICAgdGhpcy5fc2FtcGxlc1BlckNoYW5uZWwgPSAwO1xuICB9XG5cbiAgX2ZpbGVOYW1lOiBzdHJpbmc7IC8vLzwg44OV44Kh44Kk44Or5ZCNXG4gIF9udW1iZXJPZkNoYW5uZWxzOiBudW1iZXI7IC8vLzwg44OB44Oj44Oz44ON44Or5pWwXG4gIF9iaXRzUGVyU2FtcGxlOiBudW1iZXI7IC8vLzwg44K144Oz44OX44Or44GC44Gf44KK44OT44OD44OI5pWwXG4gIF9zYW1wbGluZ1JhdGU6IG51bWJlcjsgLy8vPCDjgrXjg7Pjg5fjg6rjg7PjgrDjg6zjg7zjg4hcbiAgX3NhbXBsZXNQZXJDaGFubmVsOiBudW1iZXI7IC8vLzwgMeODgeODo+ODs+ODjeODq+OBguOBn+OCiue3j+OCteODs+ODl+ODq+aVsFxufVxuXG5leHBvcnQgY2xhc3MgQnl0ZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZpbGVCeXRlID0gbnVsbDtcbiAgICB0aGlzLl9maWxlRGF0YVZpZXcgPSBudWxsO1xuICAgIHRoaXMuX2ZpbGVTaXplID0gMDtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgOOODk+ODg+ODiOiqreOBv+i+vOOBv1xuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDgg6Kqt44G/5Y+W44Gj44GfOOODk+ODg+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldDgoKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPSB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCsrO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDE244OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MTYg6Kqt44G/5Y+W44Gj44GfMTbjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQxNkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAyO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDI044OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMjTjg5Pjg4Pjg4jlgKTvvIjkuIvkvY0yNOODk+ODg+ODiOOBq+ioreWumu+8iVxuICAgKi9cbiAgcHVibGljIGdldDI0TGl0dGxlRW5kaWFuKCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID1cbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDIpIDw8IDE2KSB8XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAzO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDMy44OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMzLjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQzMkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAzKSA8PCAyNCkgfFxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMikgPDwgMTYpIHxcbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDEpIDw8IDgpIHxcbiAgICAgIHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ICs9IDQ7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44K344Kw44ON44OB44Oj44Gu5Y+W5b6X44Go5Y+C54Wn5paH5a2X5YiX44Go44Gu5LiA6Ie044OB44Kn44OD44KvXG4gICAqIEBwYXJhbVtpbl0gcmVmZXJlbmNlIOaknOafu+WvvuixoeOBruOCt+OCsOODjeODgeODo+aWh+Wtl+WIl1xuICAgKiBAcmV0dmFsICB0cnVlICAgIOS4gOiHtOOBl+OBpuOBhOOCi1xuICAgKiBAcmV0dmFsICBmYWxzZSAgIOS4gOiHtOOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldENoZWNrU2lnbmF0dXJlKHJlZmVyZW5jZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZ2V0U2lnbmF0dXJlOiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgY29uc3QgcmVmZXJlbmNlU3RyaW5nOiBVaW50OEFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlZmVyZW5jZSk7XG4gICAgaWYgKHJlZmVyZW5jZS5sZW5ndGggIT0gNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBzaWduYXR1cmVPZmZzZXQgPSAwOyBzaWduYXR1cmVPZmZzZXQgPCA0OyBzaWduYXR1cmVPZmZzZXQrKykge1xuICAgICAgZ2V0U2lnbmF0dXJlW3NpZ25hdHVyZU9mZnNldF0gPSB0aGlzLmdldDgoKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGdldFNpZ25hdHVyZVswXSA9PSByZWZlcmVuY2VTdHJpbmdbMF0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsxXSA9PSByZWZlcmVuY2VTdHJpbmdbMV0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsyXSA9PSByZWZlcmVuY2VTdHJpbmdbMl0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVszXSA9PSByZWZlcmVuY2VTdHJpbmdbM11cbiAgICApO1xuICB9XG5cbiAgX2ZpbGVCeXRlOiBBcnJheUJ1ZmZlcjsgLy8vPCDjg63jg7zjg4njgZfjgZ/jg5XjgqHjgqTjg6vjga7jg5DjgqTjg4jliJdcbiAgX2ZpbGVEYXRhVmlldzogRGF0YVZpZXc7XG4gIF9maWxlU2l6ZTogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+OCteOCpOOCulxuICBfcmVhZE9mZnNldDogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+WPgueFp+S9jee9rlxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuXG4vKipcbiAqIOODluODqeOCpuOCtuODreODvOODieW+jOOBruWHpueQhlxuICovXG53aW5kb3cub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAvLyBjcmVhdGUgdGhlIGFwcGxpY2F0aW9uIGluc3RhbmNlXG4gIGlmIChMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5pbml0aWFsaXplKCkgPT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5ydW4oKTtcbn07XG5cbi8qKlxuICog57WC5LqG5pmC44Gu5Yem55CGXG4gKi9cbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9ICgpOiB2b2lkID0+IExBcHBEZWxlZ2F0ZS5yZWxlYXNlSW5zdGFuY2UoKTtcblxuLyoqXG4gKiBQcm9jZXNzIHdoZW4gY2hhbmdpbmcgc2NyZWVuIHNpemUuXG4gKi9cbndpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcbiAgaWYgKExBcHBEZWZpbmUuQ2FudmFzU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkub25SZXNpemUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBWaXJ0aXVhbCBSZWFjdGlvbiBBZGRpdGlvbmFsIENvZGVcbiAqIGd1aeOBi+OCieOBruWRveS7pOOBq+W/nOOBmOOBpuWHpueQhlxuICoqL1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKGV2ZW50OiBhbnkpIHtcblx0aWYoZXZlbnQub3JpZ2luID09IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwXCIpe1xuICAgIExBcHBEZWxlZ2F0ZS5vbkV2ZW50TGlzdGVuZWQoZXZlbnQuZGF0YSk7XG5cdH1cbn0sZmFsc2UpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRvdWNoTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N0YXJ0WCA9IDAuMDtcbiAgICB0aGlzLl9zdGFydFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFggPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgxID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WDIgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gMC4wO1xuICAgIHRoaXMuX2RlbHRhWCA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVkgPSAwLjA7XG4gICAgdGhpcy5fc2NhbGUgPSAxLjA7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSBmYWxzZTtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVsdGFZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhWTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRYO1xuICB9XG5cbiAgcHVibGljIGdldFN0YXJ0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldFgxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WDIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgyO1xuICB9XG5cbiAgcHVibGljIGdldFkyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZMjtcbiAgfVxuXG4gIHB1YmxpYyBpc1NpbmdsZVRvdWNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl90b3VjaFNpbmdsZTtcbiAgfVxuXG4gIHB1YmxpYyBpc0ZsaWNrQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9mbGlwQXZhaWxhYmxlO1xuICB9XG5cbiAgcHVibGljIGRpc2FibGVGbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB6ZaL5aeL5pmC44Kk44OZ44Oz44OIXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIGRldmljZVkg44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKi9cbiAgcHVibGljIHRvdWNoZXNCZWdhbihkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9sYXN0WSA9IGRldmljZVk7XG4gICAgdGhpcy5fc3RhcnRYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9zdGFydFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OJ44Op44OD44Kw5pmC44Gu44Kk44OZ44Oz44OIXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIGRldmljZVkg44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKi9cbiAgcHVibGljIHRvdWNoZXNNb3ZlZChkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9sYXN0WSA9IGRldmljZVk7XG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAtMS4wO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjg6rjg4Pjgq/jga7ot53pm6LmuKzlrppcbiAgICogQHJldHVybiDjg5Xjg6rjg4Pjgq/ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXRGbGlja0Rpc3RhbmNlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgICB0aGlzLl9zdGFydFgsXG4gICAgICB0aGlzLl9zdGFydFksXG4gICAgICB0aGlzLl9sYXN0WCxcbiAgICAgIHRoaXMuX2xhc3RZXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDngrnvvJHjgYvjgonngrnvvJLjgbjjga7ot53pm6LjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIHgxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIHkxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICogQHBhcmFtIHgyIO+8kuOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIHkyIO+8kuOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyBjYWxjdWxhdGVEaXN0YW5jZShcbiAgICB4MTogbnVtYmVyLFxuICAgIHkxOiBudW1iZXIsXG4gICAgeDI6IG51bWJlcixcbiAgICB5MjogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgoeDEgLSB4MikgKiAoeDEgLSB4MikgKyAoeTEgLSB5MikgKiAoeTEgLSB5MikpO1xuICB9XG5cbiAgLyoqXG4gICAqIO+8kuOBpOebruOBruWApOOBi+OCieOAgeenu+WLlemHj+OCkuaxguOCgeOCi+OAglxuICAgKiDpgZXjgYbmlrnlkJHjga7loLTlkIjjga/np7vli5Xph4/vvJDjgILlkIzjgZjmlrnlkJHjga7loLTlkIjjga/jgIHntbblr77lgKTjgYzlsI/jgZXjgYTmlrnjga7lgKTjgpLlj4LnhafjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHYxIO+8keOBpOebruOBruenu+WLlemHj1xuICAgKiBAcGFyYW0gdjIg77yS44Gk55uu44Gu56e75YuV6YePXG4gICAqXG4gICAqIEByZXR1cm4g5bCP44GV44GE5pa544Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlTW92aW5nQW1vdW50KHYxOiBudW1iZXIsIHYyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2MSA+IDAuMCAhPSB2MiA+IDAuMCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG5cbiAgICBjb25zdCBzaWduOiBudW1iZXIgPSB2MSA+IDAuMCA/IDEuMCA6IC0xLjA7XG4gICAgY29uc3QgYWJzb2x1dGVWYWx1ZTEgPSBNYXRoLmFicyh2MSk7XG4gICAgY29uc3QgYWJzb2x1dGVWYWx1ZTIgPSBNYXRoLmFicyh2Mik7XG4gICAgcmV0dXJuIChcbiAgICAgIHNpZ24gKiAoYWJzb2x1dGVWYWx1ZTEgPCBhYnNvbHV0ZVZhbHVlMiA/IGFic29sdXRlVmFsdWUxIDogYWJzb2x1dGVWYWx1ZTIpXG4gICAgKTtcbiAgfVxuXG4gIF9zdGFydFk6IG51bWJlcjsgLy8g44K/44OD44OB44KS6ZaL5aeL44GX44Gf5pmC44GueOOBruWApFxuICBfc3RhcnRYOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnnjga7lgKRcbiAgX2xhc3RYOiBudW1iZXI7IC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODgeaZguOBrnjjga7lgKRcbiAgX2xhc3RZOiBudW1iZXI7IC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODgeaZguOBrnnjga7lgKRcbiAgX2xhc3RYMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueeOBruWApFxuICBfbGFzdFgyOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS6jOOBpOebruOBrnjjga7lgKRcbiAgX2xhc3RZMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5544Gu5YCkXG4gIF9sYXN0VG91Y2hEaXN0YW5jZTogbnVtYmVyOyAvLyAy5pys5Lul5LiK44Gn44K/44OD44OB44GX44Gf44Go44GN44Gu5oyH44Gu6Led6ZuiXG4gIF9kZWx0YVg6IG51bWJlcjsgLy8g5YmN5Zue44Gu5YCk44GL44KJ5LuK5Zue44Gu5YCk44G444GueOOBruenu+WLlei3nembouOAglxuICBfZGVsdGFZOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnnjga7np7vli5Xot53pm6LjgIJcbiAgX3NjYWxlOiBudW1iZXI7IC8vIOOBk+OBruODleODrOODvOODoOOBp+aOm+OBkeWQiOOCj+OBm+OCi+aLoeWkp+eOh+OAguaLoeWkp+aTjeS9nOS4reS7peWkluOBrzHjgIJcbiAgX3RvdWNoU2luZ2xlOiBib29sZWFuOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga90cnVlXG4gIF9mbGlwQXZhaWxhYmxlOiBib29sZWFuOyAvLyDjg5Xjg6rjg4Pjg5fjgYzmnInlirnjgYvjganjgYbjgYtcbn1cbiIsInZhciBnbG9iYWwgPVxuICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbClcblxudmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gZ2xvYmFsLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gZ2xvYmFsICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBnbG9iYWwgJiZcbiAgICAnQmxvYicgaW4gZ2xvYmFsICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBnbG9iYWwsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIGdsb2JhbFxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fiFdL2kudGVzdChuYW1lKSB8fCBuYW1lID09PSAnJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgLypcbiAgICAgIGZldGNoLW1vY2sgd3JhcHMgdGhlIFJlc3BvbnNlIG9iamVjdCBpbiBhbiBFUzYgUHJveHkgdG9cbiAgICAgIHByb3ZpZGUgdXNlZnVsIHRlc3QgaGFybmVzcyBmZWF0dXJlcyBzdWNoIGFzIGZsdXNoLiBIb3dldmVyLCBvblxuICAgICAgRVM1IGJyb3dzZXJzIHdpdGhvdXQgZmV0Y2ggb3IgUHJveHkgc3VwcG9ydCBwb2xseWZpbGxzIG11c3QgYmUgdXNlZDtcbiAgICAgIHRoZSBwcm94eS1wb2xseWZpbGwgaXMgdW5hYmxlIHRvIHByb3h5IGFuIGF0dHJpYnV0ZSB1bmxlc3MgaXQgZXhpc3RzXG4gICAgICBvbiB0aGUgb2JqZWN0IGJlZm9yZSB0aGUgUHJveHkgaXMgY3JlYXRlZC4gVGhpcyBjaGFuZ2UgZW5zdXJlc1xuICAgICAgUmVzcG9uc2UuYm9keVVzZWQgZXhpc3RzIG9uIHRoZSBpbnN0YW5jZSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlXG4gICAgICBzZW1hbnRpYyBvZiBzZXR0aW5nIFJlcXVlc3QuYm9keVVzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIGJlZm9yZVxuICAgICAgX2luaXRCb2R5IGlzIGNhbGxlZC5cbiAgICAqL1xuICAgIHRoaXMuYm9keVVzZWQgPSB0aGlzLmJvZHlVc2VkXG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHZhciBpc0NvbnN1bWVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKGlzQ29uc3VtZWQpIHtcbiAgICAgICAgICByZXR1cm4gaXNDb25zdW1lZFxuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodGhpcy5fYm9keUFycmF5QnVmZmVyKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnVmZmVyLnNsaWNlKFxuICAgICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCxcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQgKyB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXF1ZXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxuXG4gIGlmICh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIGlmIChvcHRpb25zLmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IG9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgIC8vIFNlYXJjaCBmb3IgYSAnXycgcGFyYW1ldGVyIGluIHRoZSBxdWVyeSBzdHJpbmdcbiAgICAgIHZhciByZVBhcmFtU2VhcmNoID0gLyhbPyZdKV89W14mXSovXG4gICAgICBpZiAocmVQYXJhbVNlYXJjaC50ZXN0KHRoaXMudXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGV4aXN0cyB0aGVuIHNldCB0aGUgdmFsdWUgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy51cmwucmVwbGFjZShyZVBhcmFtU2VhcmNoLCAnJDFfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBhZGQgYSBuZXcgJ18nIHBhcmFtZXRlciB0byB0aGUgZW5kIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB2YXIgcmVRdWVyeVN0cmluZyA9IC9cXD8vXG4gICAgICAgIHRoaXMudXJsICs9IChyZVF1ZXJ5U3RyaW5nLnRlc3QodGhpcy51cmwpID8gJyYnIDogJz8nKSArICdfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIC8vIEF2b2lkaW5nIHNwbGl0IHZpYSByZWdleCB0byB3b3JrIGFyb3VuZCBhIGNvbW1vbiBJRTExIGJ1ZyB3aXRoIHRoZSBjb3JlLWpzIDMuNi4wIHJlZ2V4IHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvZmV0Y2gvaXNzdWVzLzc0OFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNzUxXG4gIHByZVByb2Nlc3NlZEhlYWRlcnNcbiAgICAuc3BsaXQoJ1xccicpXG4gICAgLm1hcChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHJldHVybiBoZWFkZXIuaW5kZXhPZignXFxuJykgPT09IDAgPyBoZWFkZXIuc3Vic3RyKDEsIGhlYWRlci5sZW5ndGgpIDogaGVhZGVyXG4gICAgfSlcbiAgICAuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA9PT0gdW5kZWZpbmVkID8gJycgOiAnJyArIG9wdGlvbnMuc3RhdHVzVGV4dFxuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gZ2xvYmFsLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXhVcmwodXJsKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXJsID09PSAnJyAmJiBnbG9iYWwubG9jYXRpb24uaHJlZiA/IGdsb2JhbC5sb2NhdGlvbi5ocmVmIDogdXJsXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgZml4VXJsKHJlcXVlc3QudXJsKSwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpIHtcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3VwcG9ydC5hcnJheUJ1ZmZlciAmJlxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSAmJlxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKS5pbmRleE9mKCdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSAhPT0gLTFcbiAgICAgICkge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbml0ICYmIHR5cGVvZiBpbml0LmhlYWRlcnMgPT09ICdvYmplY3QnICYmICEoaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGluaXQuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIG5vcm1hbGl6ZVZhbHVlKGluaXQuaGVhZGVyc1tuYW1lXSkpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIWdsb2JhbC5mZXRjaCkge1xuICBnbG9iYWwuZmV0Y2ggPSBmZXRjaFxuICBnbG9iYWwuSGVhZGVycyA9IEhlYWRlcnNcbiAgZ2xvYmFsLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIGdsb2JhbC5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODUxOSk7XG4iXSwibmFtZXMiOlsiQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkIiwiT2JqZWN0IiwiZnJlZXplIiwiSGl0QXJlYVByZWZpeCIsIkhpdEFyZWFIZWFkIiwiSGl0QXJlYUJvZHkiLCJQYXJ0c0lkQ29yZSIsIlBhcnRzQXJtUHJlZml4IiwiUGFydHNBcm1MUHJlZml4IiwiUGFydHNBcm1SUHJlZml4IiwiUGFyYW1BbmdsZVgiLCJQYXJhbUFuZ2xlWSIsIlBhcmFtQW5nbGVaIiwiUGFyYW1FeWVMT3BlbiIsIlBhcmFtRXllTFNtaWxlIiwiUGFyYW1FeWVST3BlbiIsIlBhcmFtRXllUlNtaWxlIiwiUGFyYW1FeWVCYWxsWCIsIlBhcmFtRXllQmFsbFkiLCJQYXJhbUV5ZUJhbGxGb3JtIiwiUGFyYW1Ccm93TFkiLCJQYXJhbUJyb3dSWSIsIlBhcmFtQnJvd0xYIiwiUGFyYW1Ccm93UlgiLCJQYXJhbUJyb3dMQW5nbGUiLCJQYXJhbUJyb3dSQW5nbGUiLCJQYXJhbUJyb3dMRm9ybSIsIlBhcmFtQnJvd1JGb3JtIiwiUGFyYW1Nb3V0aEZvcm0iLCJQYXJhbU1vdXRoT3BlblkiLCJQYXJhbUNoZWVrIiwiUGFyYW1Cb2R5QW5nbGVYIiwiUGFyYW1Cb2R5QW5nbGVZIiwiUGFyYW1Cb2R5QW5nbGVaIiwiUGFyYW1CcmVhdGgiLCJQYXJhbUFybUxBIiwiUGFyYW1Bcm1SQSIsIlBhcmFtQXJtTEIiLCJQYXJhbUFybVJCIiwiUGFyYW1IYW5kTCIsIlBhcmFtSGFuZFIiLCJQYXJhbUhhaXJGcm9udCIsIlBhcmFtSGFpclNpZGUiLCJQYXJhbUhhaXJCYWNrIiwiUGFyYW1IYWlyRmx1ZmZ5IiwiUGFyYW1TaG91bGRlclkiLCJQYXJhbUJ1c3RYIiwiUGFyYW1CdXN0WSIsIlBhcmFtQmFzZVgiLCJQYXJhbUJhc2VZIiwiUGFyYW1OT05FIiwiTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIiwiJCIsIkNTTV9MT0dfTEVWRUxfVkVSQk9TRSIsIkNTTV9MT0dfTEVWRUxfREVCVUciLCJDU01fTE9HX0xFVkVMX0lORk8iLCJDU01fTE9HX0xFVkVMX1dBUk5JTkciLCJDU01fTE9HX0xFVkVMX0VSUk9SIiwiQ1NNX0xPR19MRVZFTF9PRkYiLCJDU01fTE9HX0xFVkVMIiwiRnJlcXVlc3ROb2RlIiwiRmlsZVJlZmVyZW5jZXMiLCJVc2VyRGF0YSIsIk5hbWUiLCJGaWxlUGF0aCIsIklkcyIsIlNvdW5kUGF0aCIsIkZhZGVJblRpbWUiLCJGYWRlT3V0VGltZSIsIkxpcFN5bmMiLCJFeWVCbGluayIsImJ1ZmZlciIsInNpemUiLCJfanNvbiIsIkN1YmlzbUpzb24iLCJjcmVhdGUiLCJfanNvblZhbHVlIiwiY3NtVmVjdG9yIiwicHVzaEJhY2siLCJnZXRSb290IiwiZ2V0VmFsdWVCeVN0cmluZyIsInJlbGVhc2UiLCJkZWxldGUiLCJ0aGlzIiwiR2V0SnNvbiIsImdldE1vZGVsRmlsZU5hbWUiLCJpc0V4aXN0TW9kZWxGaWxlIiwiYXQiLCJGcmVxdWVzdE5vZGVfTW9jIiwiZ2V0UmF3U3RyaW5nIiwiZ2V0VGV4dHVyZUNvdW50IiwiaXNFeGlzdFRleHR1cmVGaWxlcyIsIkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcyIsImdldFNpemUiLCJnZXRUZXh0dXJlRGlyZWN0b3J5IiwiZ2V0VGV4dHVyZUZpbGVOYW1lIiwiaW5kZXgiLCJnZXRWYWx1ZUJ5SW5kZXgiLCJnZXRIaXRBcmVhc0NvdW50IiwiaXNFeGlzdEhpdEFyZWFzIiwiRnJlcXVlc3ROb2RlX0hpdEFyZWFzIiwiZ2V0SGl0QXJlYUlkIiwiQ3ViaXNtRnJhbWV3b3JrIiwiZ2V0SWRNYW5hZ2VyIiwiZ2V0SWQiLCJnZXRIaXRBcmVhTmFtZSIsImdldFBoeXNpY3NGaWxlTmFtZSIsImlzRXhpc3RQaHlzaWNzRmlsZSIsIkZyZXF1ZXN0Tm9kZV9QaHlzaWNzIiwiZ2V0UG9zZUZpbGVOYW1lIiwiaXNFeGlzdFBvc2VGaWxlIiwiRnJlcXVlc3ROb2RlX1Bvc2UiLCJnZXRFeHByZXNzaW9uQ291bnQiLCJpc0V4aXN0RXhwcmVzc2lvbkZpbGUiLCJGcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMiLCJnZXRFeHByZXNzaW9uTmFtZSIsImdldEV4cHJlc3Npb25GaWxlTmFtZSIsImdldE1vdGlvbkdyb3VwQ291bnQiLCJpc0V4aXN0TW90aW9uR3JvdXBzIiwiRnJlcXVlc3ROb2RlX01vdGlvbnMiLCJnZXRLZXlzIiwiZ2V0TW90aW9uR3JvdXBOYW1lIiwiZ2V0TW90aW9uQ291bnQiLCJncm91cE5hbWUiLCJpc0V4aXN0TW90aW9uR3JvdXBOYW1lIiwiZ2V0TW90aW9uRmlsZU5hbWUiLCJnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lIiwiaXNFeGlzdE1vdGlvblNvdW5kRmlsZSIsImdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZSIsImlzRXhpc3RNb3Rpb25GYWRlSW4iLCJ0b0Zsb2F0IiwiZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZSIsImlzRXhpc3RNb3Rpb25GYWRlT3V0IiwiZ2V0VXNlckRhdGFGaWxlIiwiaXNFeGlzdFVzZXJEYXRhRmlsZSIsImdldExheW91dE1hcCIsIm91dExheW91dE1hcCIsIm1hcCIsImdldE1hcCIsInJldCIsIml0ZSIsImJlZ2luIiwibm90RXF1YWwiLCJlbmQiLCJwcmVJbmNyZW1lbnQiLCJzZXRWYWx1ZSIsInB0ciIsImZpcnN0Iiwic2Vjb25kIiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCIsImlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMiLCJudW0iLCJpIiwiRnJlcXVlc3ROb2RlX0dyb3VwcyIsInJlZkkiLCJpc051bGwiLCJpc0Vycm9yIiwiZ2V0VmVjdG9yIiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZCIsImdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCIsImlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycyIsImdldExpcFN5bmNQYXJhbWV0ZXJJZCIsIm5vZGUiLCJJQ3ViaXNtTW9kZWxTZXR0aW5nIiwiQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiIsIl9jdXJyZW50VGltZSIsIkN1YmlzbUJyZWF0aCIsImluc3RhbmNlIiwic2V0UGFyYW1ldGVycyIsImJyZWF0aFBhcmFtZXRlcnMiLCJfYnJlYXRoUGFyYW1ldGVycyIsImdldFBhcmFtZXRlcnMiLCJ1cGRhdGVQYXJhbWV0ZXJzIiwibW9kZWwiLCJkZWx0YVRpbWVTZWNvbmRzIiwidCIsImRhdGEiLCJhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQiLCJwYXJhbWV0ZXJJZCIsIm9mZnNldCIsInBlYWsiLCJNYXRoIiwic2luIiwiY3ljbGUiLCJ3ZWlnaHQiLCJCcmVhdGhQYXJhbWV0ZXJEYXRhIiwidW5kZWZpbmVkIiwiRXllU3RhdGUiLCJtb2RlbFNldHRpbmciLCJfYmxpbmtpbmdTdGF0ZSIsIkV5ZVN0YXRlX0ZpcnN0IiwiX25leHRCbGlua2luZ1RpbWUiLCJfc3RhdGVTdGFydFRpbWVTZWNvbmRzIiwiX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIiwiX2Nsb3NpbmdTZWNvbmRzIiwiX2Nsb3NlZFNlY29uZHMiLCJfb3BlbmluZ1NlY29uZHMiLCJfdXNlclRpbWVTZWNvbmRzIiwiX3BhcmFtZXRlcklkcyIsIkN1YmlzbUV5ZUJsaW5rIiwiZXllQmxpbmsiLCJzZXRCbGlua2luZ0ludGVydmFsIiwiYmxpbmtpbmdJbnRlcnZhbCIsInNldEJsaW5raW5nU2V0dGluZyIsImNsb3NpbmciLCJjbG9zZWQiLCJvcGVuaW5nIiwic2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVySWRzIiwiZ2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVyVmFsdWUiLCJFeWVTdGF0ZV9DbG9zaW5nIiwiRXllU3RhdGVfQ2xvc2VkIiwiRXllU3RhdGVfT3BlbmluZyIsIkV5ZVN0YXRlX0ludGVydmFsIiwiZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmciLCJDbG9zZUlmWmVybyIsInNldFBhcmFtZXRlclZhbHVlQnlJZCIsInIiLCJyYW5kb20iLCJGYWRlSW4iLCJMaW5rIiwiX2ZhZGVUaW1lU2Vjb25kcyIsIl9sYXN0TW9kZWwiLCJfcGFydEdyb3VwcyIsIl9wYXJ0R3JvdXBDb3VudHMiLCJwb3NlM2pzb24iLCJDdWJpc21Qb3NlIiwianNvbiIsInJvb3QiLCJwb3NlTGlzdEluZm8iLCJwb3NlQ291bnQiLCJwb3NlSW5kZXgiLCJpZExpc3RJbmZvIiwiaWRDb3VudCIsImdyb3VwQ291bnQiLCJncm91cEluZGV4IiwicGFydEluZm8iLCJwYXJ0RGF0YSIsIlBhcnREYXRhIiwicGFydElkIiwibGlua0xpc3RJbmZvIiwibGlua0NvdW50IiwibGlua0luZGV4IiwibGlua1BhcnQiLCJsaW5rSWQiLCJnZXRTdHJpbmciLCJsaW5rIiwiY2xvbmUiLCJwb3NlIiwicmVzZXQiLCJiZWdpbkluZGV4IiwicGFydEdyb3VwQ291bnQiLCJkb0ZhZGUiLCJjb3B5UGFydE9wYWNpdGllcyIsImoiLCJpbml0aWFsaXplIiwicGFydHNJbmRleCIsInBhcnRJbmRleCIsInBhcmFtSW5kZXgiLCJwYXJhbWV0ZXJJbmRleCIsInNldFBhcnRPcGFjaXR5QnlJbmRleCIsInNldFBhcmFtZXRlclZhbHVlQnlJbmRleCIsImsiLCJvcGFjaXR5IiwiZ2V0UGFydE9wYWNpdHlCeUluZGV4IiwibGlua1BhcnRJbmRleCIsInZpc2libGVQYXJ0SW5kZXgiLCJuZXdPcGFjaXR5IiwiZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4IiwiYTEiLCJ2IiwiYXNzaWdubWVudCIsImdldFBhcmFtZXRlckluZGV4IiwiZ2V0UGFydEluZGV4IiwiY2xvbmVQYXJ0RGF0YSIsImluY3JlbWVudCIsImlkIiwiX2lkIiwiY3NtU3RyaW5nIiwiaXNFcXVhbCIsImMiLCJzIiwiQ3ViaXNtSWQiLCJpc05vdEVxdWFsIiwiX2lkcyIsInNldCIsInJlZ2lzdGVySWRzIiwiaWRzIiwibGVuZ3RoIiwicmVnaXN0ZXJJZCIsInJlc3VsdCIsImZpbmRJZCIsImlzRXhpc3QiLCJDdWJpc21JZE1hbmFnZXIiLCJlbmRQdHIiLCJ0ZXN0QyIsInNsaWNlIiwidGVzdCIsInN1YnN0cmluZyIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiZCIsInBhcnNlRmxvYXQiLCJOYU4iLCJzX2lzU3RhcnRlZCIsInNfaXNJbml0aWFsaXplZCIsInNfb3B0aW9uIiwic19jdWJpc21JZE1hbmFnZXIiLCJDb25zdGFudCIsInZlcnRleE9mZnNldCIsInZlcnRleFN0ZXAiLCJhZGRyZXNzIiwic3RhcnRVcCIsIm9wdGlvbiIsIkN1YmlzbUxvZ0luZm8iLCJMaXZlMkRDdWJpc21Db3JlIiwiTG9nZ2luZyIsImNzbVNldExvZ0Z1bmN0aW9uIiwibG9nRnVuY3Rpb24iLCJ2ZXJzaW9uIiwiVmVyc2lvbiIsImNzbUdldFZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJ2ZXJzaW9uTnVtYmVyIiwiY2xlYW5VcCIsIkNTTV9BU1NFUlQiLCJDdWJpc21Mb2dXYXJuaW5nIiwiVmFsdWUiLCJzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCIsImRpc3Bvc2UiLCJzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCIsIkN1YmlzbVJlbmRlcmVyIiwic3RhdGljUmVsZWFzZSIsImlzU3RhcnRlZCIsImlzSW5pdGlhbGl6ZWQiLCJjb3JlTG9nRnVuY3Rpb24iLCJtZXNzYWdlIiwiY3NtR2V0TG9nRnVuY3Rpb24iLCJnZXRMb2dnaW5nTGV2ZWwiLCJsb2dnaW5nTGV2ZWwiLCJMb2dMZXZlbCIsIkxvZ0xldmVsX09mZiIsIk9wdGlvbiIsImNzbURlbGV0ZSIsInJhbmdlIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJ4IiwiY29zIiwiYWJzIiwic3FydCIsImNicnQiLCJjeCIsImlzTmVnYXRpdmVOdW1iZXIiLCJJbmZpbml0eSIsImV4cCIsImxvZyIsImdldEVhc2luZ1NpbmUiLCJQSSIsImxlZnQiLCJyaWdodCIsImRlZ3JlZXNUb1JhZGlhbiIsImRlZ3JlZXMiLCJyYWRpYW5Ub0RlZ3JlZXMiLCJyYWRpYW4iLCJkaXJlY3Rpb25Ub1JhZGlhbiIsImZyb20iLCJ0byIsImF0YW4yIiwieSIsImRpcmVjdGlvblRvRGVncmVlcyIsImRlZ3JlZSIsInJhZGlhblRvRGlyZWN0aW9uIiwidG90YWxBbmdsZSIsIkN1YmlzbVZlY3RvcjIiLCJxdWFkcmF0aWNFcXVhdGlvbiIsImEiLCJiIiwiQ3ViaXNtTWF0aCIsIkVwc2lsb24iLCJjYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyIiwiYmEiLCJjYSIsInAiLCJwMyIsInEiLCJxMiIsImRpc2NyaW1pbmFudCIsInRocmVzaG9sZCIsImNlbnRlciIsIm1wMyIsIm1wMzMiLCJjb3NwaGkiLCJwaGkiLCJhY29zIiwidDEiLCJyb290MiIsInJvb3QzIiwic2QiLCJyb290MSIsIl90ciIsIkZsb2F0MzJBcnJheSIsImxvYWRJZGVudGl0eSIsIm11bHRpcGx5IiwiZHN0Iiwic2V0TWF0cml4IiwidHIiLCJnZXRBcnJheSIsImdldFNjYWxlWCIsImdldFNjYWxlWSIsImdldFRyYW5zbGF0ZVgiLCJnZXRUcmFuc2xhdGVZIiwidHJhbnNmb3JtWCIsInNyYyIsInRyYW5zZm9ybVkiLCJpbnZlcnRUcmFuc2Zvcm1YIiwiaW52ZXJ0VHJhbnNmb3JtWSIsInRyYW5zbGF0ZVJlbGF0aXZlIiwidHIxIiwiQ3ViaXNtTWF0cml4NDQiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNjYWxlUmVsYXRpdmUiLCJzY2FsZSIsIm11bHRpcGx5QnlNYXRyaXgiLCJtIiwiY2xvbmVNYXRyaXgiLCJ3IiwiaCIsIl93aWR0aCIsIl9oZWlnaHQiLCJzZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNjYWxlWCIsInNjYWxlWSIsInNldFBvc2l0aW9uIiwic2V0Q2VudGVyUG9zaXRpb24iLCJjZW50ZXJYIiwiY2VudGVyWSIsInRvcCIsInNldFkiLCJib3R0b20iLCJzZXRYIiwic2V0dXBGcm9tTGF5b3V0IiwibGF5b3V0Iiwia2V5IiwiQ3ViaXNtTW9kZWxNYXRyaXgiLCJfZmFjZVRhcmdldFgiLCJfZmFjZVRhcmdldFkiLCJfZmFjZVgiLCJfZmFjZVkiLCJfZmFjZVZYIiwiX2ZhY2VWWSIsIl9sYXN0VGltZVNlY29uZHMiLCJ1cGRhdGUiLCJtYXhWIiwiZGVsdGFUaW1lV2VpZ2h0IiwibWF4QSIsInRpbWVUb01heFNwZWVkIiwiZHgiLCJkeSIsInZ5IiwiYXgiLCJheSIsImN1clYiLCJnZXRYIiwiZ2V0WSIsIkN1YmlzbVRhcmdldFBvaW50IiwiYWRkIiwidmVjdG9yMiIsInN1YnN0cmFjdCIsIm11bHRpcGx5QnlTY2FsZXIiLCJzY2FsYXIiLCJkaXZpc2lvbiIsImRpdmlzaW9uQnlTY2FsYXIiLCJnZXRMZW5ndGgiLCJnZXREaXN0YW5jZVdpdGgiLCJkb3QiLCJub3JtYWxpemUiLCJwb3ciLCJyaHMiLCJfc2NyZWVuTGVmdCIsIl9zY3JlZW5SaWdodCIsIl9zY3JlZW5Ub3AiLCJfc2NyZWVuQm90dG9tIiwiX21heExlZnQiLCJfbWF4UmlnaHQiLCJfbWF4VG9wIiwiX21heEJvdHRvbSIsIl9tYXhTY2FsZSIsIl9taW5TY2FsZSIsImFkanVzdFRyYW5zbGF0ZSIsImFkanVzdFNjYWxlIiwiY3kiLCJtYXhTY2FsZSIsImdldE1heFNjYWxlIiwibWluU2NhbGUiLCJnZXRNaW5TY2FsZSIsInRhcmdldFNjYWxlIiwidHIyIiwidHIzIiwic2V0U2NyZWVuUmVjdCIsInNldE1heFNjcmVlblJlY3QiLCJzZXRNYXhTY2FsZSIsInNldE1pblNjYWxlIiwiaXNNYXhTY2FsZSIsImlzTWluU2NhbGUiLCJnZXRTY3JlZW5MZWZ0IiwiZ2V0U2NyZWVuUmlnaHQiLCJnZXRTY3JlZW5Cb3R0b20iLCJnZXRTY3JlZW5Ub3AiLCJnZXRNYXhMZWZ0IiwiZ2V0TWF4UmlnaHQiLCJnZXRNYXhCb3R0b20iLCJnZXRNYXhUb3AiLCJDdWJpc21WaWV3TWF0cml4IiwibW9jIiwiX21vYyIsIl9tb2RlbENvdW50IiwibW9jQnl0ZXMiLCJjdWJpc21Nb2MiLCJNb2MiLCJmcm9tQXJyYXlCdWZmZXIiLCJDdWJpc21Nb2MiLCJfcmVsZWFzZSIsImNyZWF0ZU1vZGVsIiwiY3ViaXNtTW9kZWwiLCJNb2RlbCIsImZyb21Nb2MiLCJDdWJpc21Nb2RlbCIsImRlbGV0ZU1vZGVsIiwiX21vZGVsIiwiX3BhcmFtZXRlclZhbHVlcyIsIl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzIiwiX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMiLCJfcGFydE9wYWNpdGllcyIsIl9zYXZlZFBhcmFtZXRlcnMiLCJfZHJhd2FibGVJZHMiLCJfcGFydElkcyIsIl9ub3RFeGlzdFBhcnRJZCIsImNzbU1hcCIsIl9ub3RFeGlzdFBhcmFtZXRlcklkIiwiX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzIiwiX25vdEV4aXN0UGFydE9wYWNpdGllcyIsImRyYXdhYmxlcyIsInJlc2V0RHluYW1pY0ZsYWdzIiwiZ2V0Q2FudmFzV2lkdGgiLCJjYW52YXNpbmZvIiwiQ2FudmFzV2lkdGgiLCJQaXhlbHNQZXJVbml0IiwiZ2V0Q2FudmFzSGVpZ2h0IiwiQ2FudmFzSGVpZ2h0Iiwic2F2ZVBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJDb3VudCIsInBhcmFtZXRlcnMiLCJjb3VudCIsInNhdmVkUGFyYW1ldGVyQ291bnQiLCJnZXRNb2RlbCIsInBhcnRDb3VudCIsInBhcnRzIiwiZ2V0VmFsdWUiLCJhcHBlbmRLZXkiLCJnZXRQYXJ0Q291bnQiLCJzZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJhbWV0ZXJDb3VudCIsImdldFBhcmFtZXRlck1heGltdW1WYWx1ZSIsIm1heGltdW1WYWx1ZXMiLCJnZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWUiLCJtaW5pbXVtVmFsdWVzIiwiZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlIiwiZGVmYXVsdFZhbHVlcyIsImdldFBhcmFtZXRlclZhbHVlQnlJZCIsImFkZFBhcmFtZXRlclZhbHVlQnlJbmRleCIsIm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkIiwibXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJnZXREcmF3YWJsZUluZGV4IiwiZHJhd2FibGVJZCIsImRyYXdhYmxlQ291bnQiLCJkcmF3YWJsZUluZGV4IiwiZ2V0RHJhd2FibGVDb3VudCIsImdldERyYXdhYmxlSWQiLCJnZXREcmF3YWJsZVJlbmRlck9yZGVycyIsInJlbmRlck9yZGVycyIsImdldERyYXdhYmxlVGV4dHVyZUluZGljZXMiLCJ0ZXh0dXJlSW5kaWNlcyIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UiLCJkeW5hbWljRmxhZ3MiLCJVdGlscyIsImhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdCIsImdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudCIsImluZGV4Q291bnRzIiwiZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudCIsInZlcnRleENvdW50cyIsImdldERyYXdhYmxlVmVydGljZXMiLCJnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyIsImdldERyYXdhYmxlVmVydGV4SW5kaWNlcyIsImluZGljZXMiLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJnZXREcmF3YWJsZVZlcnRleFV2cyIsInZlcnRleFV2cyIsImdldERyYXdhYmxlT3BhY2l0eSIsIm9wYWNpdGllcyIsImdldERyYXdhYmxlQ3VsbGluZyIsImNvbnN0YW50RmxhZ3MiLCJoYXNJc0RvdWJsZVNpZGVkQml0IiwiZ2V0RHJhd2FibGVCbGVuZE1vZGUiLCJoYXNCbGVuZEFkZGl0aXZlQml0IiwiQ3ViaXNtQmxlbmRNb2RlIiwiQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlIiwiaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdCIsIkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZSIsIkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwiLCJnZXREcmF3YWJsZUludmVydGVkTWFza0JpdCIsImhhc0lzSW52ZXJ0ZWRNYXNrQml0IiwiZ2V0RHJhd2FibGVNYXNrcyIsIm1hc2tzIiwiZ2V0RHJhd2FibGVNYXNrQ291bnRzIiwibWFza0NvdW50cyIsImlzVXNpbmdNYXNraW5nIiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZSIsImhhc0lzVmlzaWJsZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlIiwiaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdPcGFjaXR5RGlkQ2hhbmdlIiwiaGFzT3BhY2l0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZSIsImhhc1JlbmRlck9yZGVyRGlkQ2hhbmdlQml0IiwibG9hZFBhcmFtZXRlcnMiLCJ2YWx1ZXMiLCJwcmVwYXJlQ2FwYWNpdHkiLCJwYXJ0SWRzIiwiZHJhd2FibGVJZHMiLCJDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSIsIl91c2VyRGF0YU5vZGVzIiwiX2FydE1lc2hVc2VyRGF0YU5vZGUiLCJDdWJpc21Nb2RlbFVzZXJEYXRhIiwicGFyc2VVc2VyRGF0YSIsIm1vZGVsVXNlckRhdGEiLCJnZXRBcnRNZXNoVXNlckRhdGFzIiwiQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24iLCJ0eXBlT2ZBcnRNZXNoIiwibm9kZUNvdW50IiwiZ2V0VXNlckRhdGFDb3VudCIsImFkZE5vZGUiLCJ0YXJnZXRJZCIsImdldFVzZXJEYXRhSWQiLCJ0YXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFUYXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFWYWx1ZSIsIk1ldGEiLCJ0b0ludCIsImdldFRvdGFsVXNlckRhdGFTaXplIiwibG9hZE1vdGlvbiIsIm5hbWUiLCJvbkZpbmlzaGVkTW90aW9uSGFuZGxlciIsIkN1YmlzbU1vdGlvbiIsIl9tb3Rpb25NYW5hZ2VyIiwiX2V4cHJlc3Npb25NYW5hZ2VyIiwiX2V5ZUJsaW5rIiwiX2JyZWF0aCIsIl9tb2RlbE1hdHJpeCIsIl9wb3NlIiwiX2RyYWdNYW5hZ2VyIiwiX3BoeXNpY3MiLCJfbW9kZWxVc2VyRGF0YSIsIl9pbml0aWFsaXplZCIsIl91cGRhdGluZyIsIl9vcGFjaXR5IiwiX2xpcHN5bmMiLCJfbGFzdExpcFN5bmNWYWx1ZSIsIl9kcmFnWCIsIl9kcmFnWSIsIl9hY2NlbGVyYXRpb25YIiwiX2FjY2VsZXJhdGlvblkiLCJfYWNjZWxlcmF0aW9uWiIsIl9kZWJ1Z01vZGUiLCJfcmVuZGVyZXIiLCJDdWJpc21Nb3Rpb25NYW5hZ2VyIiwic2V0RXZlbnRDYWxsYmFjayIsIkN1YmlzbVVzZXJNb2RlbCIsImN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrIiwic2V0SW5pdGlhbGl6ZWQiLCJpc1VwZGF0aW5nIiwic2V0VXBkYXRpbmciLCJzZXREcmFnZ2luZyIsInNldEFjY2VsZXJhdGlvbiIsInoiLCJnZXRNb2RlbE1hdHJpeCIsInNldE9wYWNpdHkiLCJnZXRPcGFjaXR5IiwibG9hZE1vZGVsIiwiQ3ViaXNtTG9nRXJyb3IiLCJsb2FkRXhwcmVzc2lvbiIsIkN1YmlzbUV4cHJlc3Npb25Nb3Rpb24iLCJsb2FkUG9zZSIsImxvYWRVc2VyRGF0YSIsImxvYWRQaHlzaWNzIiwiQ3ViaXNtUGh5c2ljcyIsImlzSGl0IiwicG9pbnRYIiwicG9pbnRZIiwiZHJhd0luZGV4IiwidmVydGljZXMiLCJ0eCIsInR5IiwiZ2V0UmVuZGVyZXIiLCJjcmVhdGVSZW5kZXJlciIsImRlbGV0ZVJlbmRlcmVyIiwiQ3ViaXNtUmVuZGVyZXJfV2ViR0wiLCJtb3Rpb25FdmVudEZpcmVkIiwiZXZlbnRWYWx1ZSIsImNhbGxlciIsImN1c3RvbURhdGEiLCJzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIiLCJfb25GaW5pc2hlZE1vdGlvbiIsImdldEZpbmlzaGVkTW90aW9uSGFuZGxlciIsIl9mYWRlSW5TZWNvbmRzIiwiX2ZhZGVPdXRTZWNvbmRzIiwiX3dlaWdodCIsIl9vZmZzZXRTZWNvbmRzIiwiX2ZpcmVkRXZlbnRWYWx1ZXMiLCJtb3Rpb24iLCJtb3Rpb25RdWV1ZUVudHJ5IiwidXNlclRpbWVTZWNvbmRzIiwiaXNBdmFpbGFibGUiLCJpc0ZpbmlzaGVkIiwic2V0SXNTdGFydGVkIiwic2V0U3RhcnRUaW1lIiwic2V0RmFkZUluU3RhcnRUaW1lIiwiZHVyYXRpb24iLCJnZXREdXJhdGlvbiIsImdldEVuZFRpbWUiLCJzZXRFbmRUaW1lIiwiZ2V0U3RhcnRUaW1lIiwiZmFkZVdlaWdodCIsImdldEZhZGVJblN0YXJ0VGltZSIsInNldFN0YXRlIiwiZG9VcGRhdGVQYXJhbWV0ZXJzIiwic2V0SXNGaW5pc2hlZCIsInNldEZhZGVJblRpbWUiLCJmYWRlSW5TZWNvbmRzIiwic2V0RmFkZU91dFRpbWUiLCJmYWRlT3V0U2Vjb25kcyIsImdldEZhZGVPdXRUaW1lIiwiZ2V0RmFkZUluVGltZSIsInNldFdlaWdodCIsImdldFdlaWdodCIsImdldExvb3BEdXJhdGlvbiIsInNldE9mZnNldFRpbWUiLCJvZmZzZXRTZWNvbmRzIiwiZ2V0RmlyZWRFdmVudCIsImJlZm9yZUNoZWNrVGltZVNlY29uZHMiLCJtb3Rpb25UaW1lU2Vjb25kcyIsIkFDdWJpc21Nb3Rpb24iLCJFeHByZXNzaW9uQmxlbmRUeXBlIiwiRXhwcmVzc2lvbktleVBhcmFtZXRlcnMiLCJFeHByZXNzaW9uS2V5QmxlbmQiLCJfcGFyYW1ldGVycyIsImV4cHJlc3Npb24iLCJibGVuZFR5cGUiLCJwYXJhbSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkIiwiRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfT3ZlcndyaXRlIiwiaXRlbSIsIkV4cHJlc3Npb25QYXJhbWV0ZXIiLCJwYXJhbWV0ZXIiLCJsZXJwUG9pbnRzIiwiQ3ViaXNtTW90aW9uUG9pbnQiLCJ0aW1lIiwibGluZWFyRXZhbHVhdGUiLCJwb2ludHMiLCJiZXppZXJFdmFsdWF0ZSIsInAwMSIsInAxMiIsInAyMyIsInAwMTIiLCJwMTIzIiwiYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb24iLCJ4MSIsIngyIiwiY3gxIiwiY3gyIiwic3RlcHBlZEV2YWx1YXRlIiwiaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZSIsImV2YWx1YXRlQ3VydmUiLCJtb3Rpb25EYXRhIiwiY3VydmUiLCJjdXJ2ZXMiLCJ0YXJnZXQiLCJ0b3RhbFNlZ21lbnRDb3VudCIsImJhc2VTZWdtZW50SW5kZXgiLCJzZWdtZW50Q291bnQiLCJwb2ludFBvc2l0aW9uIiwic2VnbWVudHMiLCJiYXNlUG9pbnRJbmRleCIsInNlZ21lbnRUeXBlIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUiLCJDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIiLCJzZWdtZW50IiwiZXZhbHVhdGUiLCJnZXQiLCJfc291cmNlRnJhbWVSYXRlIiwiX2xvb3BEdXJhdGlvblNlY29uZHMiLCJfaXNMb29wIiwiX2lzTG9vcEZhZGVJbiIsIl9sYXN0V2VpZ2h0IiwiX21vdGlvbkRhdGEiLCJfbW9kZWxDdXJ2ZUlkRXllQmxpbmsiLCJfbW9kZWxDdXJ2ZUlkTGlwU3luYyIsIl9leWVCbGlua1BhcmFtZXRlcklkcyIsIl9saXBTeW5jUGFyYW1ldGVySWRzIiwicGFyc2UiLCJmcHMiLCJ0aW1lT2Zmc2V0U2Vjb25kcyIsImxpcFN5bmNWYWx1ZSIsIk1BWF9WQUxVRSIsImV5ZUJsaW5rVmFsdWUiLCJNYXhUYXJnZXRTaXplIiwibGlwU3luY0ZsYWdzIiwiZXllQmxpbmtGbGFncyIsIkN1YmlzbUxvZ0RlYnVnIiwidG1wRmFkZUluIiwidG1wRmFkZU91dCIsImN1cnZlQ291bnQiLCJ0eXBlIiwiQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQiLCJDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciIsInNvdXJjZVZhbHVlIiwiZmFkZUluVGltZSIsImZhZGVPdXRUaW1lIiwiZmluIiwiZm91dCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5Iiwic2V0SXNMb29wIiwibG9vcCIsImlzTG9vcCIsInNldElzTG9vcEZhZGVJbiIsImxvb3BGYWRlSW4iLCJpc0xvb3BGYWRlSW4iLCJzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwic2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwiZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJzZXRFZmZlY3RJZHMiLCJleWVCbGlua1BhcmFtZXRlcklkcyIsImxpcFN5bmNQYXJhbWV0ZXJJZHMiLCJtb3Rpb25Kc29uIiwiQ3ViaXNtTW90aW9uRGF0YSIsIkN1YmlzbU1vdGlvbkpzb24iLCJnZXRNb3Rpb25EdXJhdGlvbiIsImlzTW90aW9uTG9vcCIsImdldE1vdGlvbkN1cnZlQ291bnQiLCJnZXRNb3Rpb25GcHMiLCJldmVudENvdW50IiwiZ2V0RXZlbnRDb3VudCIsImFyZUJlemllcnNSZXN0cnVjdGVkIiwiZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWciLCJFdmFsdWF0aW9uT3B0aW9uRmxhZyIsIkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkIiwiaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUiLCJnZXRNb3Rpb25GYWRlSW5UaW1lIiwiaXNFeGlzdE1vdGlvbkZhZGVPdXRUaW1lIiwiZ2V0TW90aW9uRmFkZU91dFRpbWUiLCJ1cGRhdGVTaXplIiwiQ3ViaXNtTW90aW9uQ3VydmUiLCJnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCIsIkN1YmlzbU1vdGlvblNlZ21lbnQiLCJnZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQiLCJldmVudHMiLCJDdWJpc21Nb3Rpb25FdmVudCIsInRvdGFsUG9pbnRDb3VudCIsImdldE1vdGlvbkN1cnZlVGFyZ2V0IiwiZ2V0TW90aW9uQ3VydmVJZCIsImlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUiLCJnZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUiLCJpc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZSIsImdldE1vdGlvbkN1cnZlRmFkZU91dFRpbWUiLCJzZWdtZW50UG9zaXRpb24iLCJnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudCIsImdldE1vdGlvbkN1cnZlU2VnbWVudCIsIkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhciIsIkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQiLCJDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCIsInVzZXJkYXRhY291bnQiLCJmaXJlVGltZSIsImdldEV2ZW50VGltZSIsImdldEV2ZW50VmFsdWUiLCJ1IiwiQ3VydmVzIiwiU2VnbWVudHMiLCJ0b0Jvb2xlYW4iLCJmbGFnVHlwZSIsImN1cnZlSW5kZXgiLCJzZWdtZW50SW5kZXgiLCJnZXRUb3RhbEV2ZW50VmFsdWVTaXplIiwidXNlckRhdGFJbmRleCIsIl9jdXJyZW50UHJpb3JpdHkiLCJfcmVzZXJ2ZVByaW9yaXR5IiwiZ2V0Q3VycmVudFByaW9yaXR5IiwiZ2V0UmVzZXJ2ZVByaW9yaXR5Iiwic2V0UmVzZXJ2ZVByaW9yaXR5IiwidmFsIiwic3RhcnRNb3Rpb25Qcmlvcml0eSIsImF1dG9EZWxldGUiLCJwcmlvcml0eSIsInN0YXJ0TW90aW9uIiwidXBkYXRlTW90aW9uIiwidXBkYXRlZCIsImRvVXBkYXRlTW90aW9uIiwicmVzZXJ2ZU1vdGlvbiIsIkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciIsIl9hdXRvRGVsZXRlIiwiX21vdGlvbiIsIl9hdmFpbGFibGUiLCJfZmluaXNoZWQiLCJfc3RhcnRlZCIsIl9zdGFydFRpbWVTZWNvbmRzIiwiX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMiLCJfZW5kVGltZVNlY29uZHMiLCJfc3RhdGVUaW1lU2Vjb25kcyIsIl9zdGF0ZVdlaWdodCIsIl9sYXN0RXZlbnRDaGVja1NlY29uZHMiLCJfbW90aW9uUXVldWVFbnRyeUhhbmRsZSIsIl9pc1RyaWdnZXJlZEZhZGVPdXQiLCJzZXRGYWRlT3V0Iiwic3RhcnRGYWRlT3V0IiwibmV3RW5kVGltZVNlY29uZHMiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZiIsInNldElzQXZhaWxhYmxlIiwidGltZVNlY29uZHMiLCJnZXRTdGF0ZVRpbWUiLCJnZXRTdGF0ZVdlaWdodCIsImdldExhc3RDaGVja0V2ZW50U2Vjb25kcyIsInNldExhc3RDaGVja0V2ZW50U2Vjb25kcyIsImNoZWNrU2Vjb25kcyIsImlzVHJpZ2dlcmVkRmFkZU91dCIsImdldEZhZGVPdXRTZWNvbmRzIiwiQ3ViaXNtTW90aW9uUXVldWVFbnRyeSIsIl9ldmVudENhbGxCYWNrIiwiX2V2ZW50Q3VzdG9tRGF0YSIsIl9tb3Rpb25zIiwiSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZSIsImVyYXNlIiwiaXNGaW5pc2hlZEJ5SGFuZGxlIiwibW90aW9uUXVldWVFbnRyeU51bWJlciIsInN0b3BBbGxNb3Rpb25zIiwiZ2V0Q3ViaXNtTW90aW9uUXVldWVFbnRyeSIsImNhbGxiYWNrIiwiZmlyZWRMaXN0IiwiUGh5c2ljc1R5cGVUYWdBbmdsZSIsIl9waHlzaWNzUmlnIiwiX29wdGlvbnMiLCJPcHRpb25zIiwiZ3Jhdml0eSIsIndpbmQiLCJwaHlzaWNzIiwicmFkQW5nbGUiLCJvdXRwdXRWYWx1ZSIsImN1cnJlbnRTZXR0aW5nIiwiY3VycmVudElucHV0IiwiY3VycmVudE91dHB1dCIsImN1cnJlbnRQYXJ0aWNsZXMiLCJwYXJhbWV0ZXJNYXhpbXVtVmFsdWUiLCJwYXJhbWV0ZXJNaW5pbXVtVmFsdWUiLCJwYXJhbWV0ZXJEZWZhdWx0VmFsdWUiLCJ0b3RhbFRyYW5zbGF0aW9uIiwic2V0dGluZ0luZGV4Iiwic3ViUmlnQ291bnQiLCJhbmdsZSIsInNldHRpbmdzIiwiaW5wdXRzIiwiYmFzZUlucHV0SW5kZXgiLCJvdXRwdXRzIiwiYmFzZU91dHB1dEluZGV4IiwicGFydGljbGVzIiwiYmFzZVBhcnRpY2xlSW5kZXgiLCJpbnB1dENvdW50Iiwic291cmNlUGFyYW1ldGVySW5kZXgiLCJzb3VyY2UiLCJnZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUiLCJub3JtYWxpemF0aW9uUG9zaXRpb24iLCJub3JtYWxpemF0aW9uQW5nbGUiLCJyZWZsZWN0IiwidXBkYXRlUGFydGljbGVzIiwicGFydGljbGVDb3VudCIsIm1heGltdW0iLCJvdXRwdXRDb3VudCIsInBhcnRpY2xlSW5kZXgiLCJ2ZXJ0ZXhJbmRleCIsImRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgiLCJkZXN0aW5hdGlvbiIsInRyYW5zbGF0aW9uIiwicG9zaXRpb24iLCJvdXRQYXJhbWV0ZXJWYWx1ZSIsInByb3RvdHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWJhcnJheSIsInVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlIiwib3V0UGFyYW1JbmRleCIsInNldE9wdGlvbnMiLCJvcHRpb25zIiwiZ2V0T3B0aW9uIiwicGh5c2ljc0pzb24iLCJDdWJpc21QaHlzaWNzUmlnIiwiQ3ViaXNtUGh5c2ljc0pzb24iLCJnZXRHcmF2aXR5IiwiZ2V0V2luZCIsImdldFN1YlJpZ0NvdW50IiwiQ3ViaXNtUGh5c2ljc1N1YlJpZyIsImdldFRvdGFsSW5wdXRDb3VudCIsIkN1YmlzbVBoeXNpY3NJbnB1dCIsImdldFRvdGFsT3V0cHV0Q291bnQiLCJDdWJpc21QaHlzaWNzT3V0cHV0IiwiZ2V0VmVydGV4Q291bnQiLCJDdWJpc21QaHlzaWNzUGFydGljbGUiLCJpbnB1dEluZGV4Iiwib3V0cHV0SW5kZXgiLCJtaW5pbXVtIiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlIiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlIiwiZGVmYWx1dCIsImdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZSIsImdldE5vcm1hbGl6YXRpb25BbmdsZURlZmF1bHRWYWx1ZSIsImdldElucHV0Q291bnQiLCJnZXRJbnB1dFdlaWdodCIsImdldElucHV0UmVmbGVjdCIsImdldElucHV0VHlwZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2UiLCJDdWJpc21QaHlzaWNzU291cmNlX1giLCJnZXRJbnB1dFRyYW5zbGF0aW9uWEZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWUiLCJDdWJpc21QaHlzaWNzU291cmNlX1kiLCJnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGUiLCJnZXRJbnB1dEFuZ2xlRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSIsIkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlIiwiQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyIiwiZ2V0SW5wdXRTb3VyY2VJZCIsImdldE91dHB1dENvdW50IiwiZ2V0T3V0cHV0VmVydGV4SW5kZXgiLCJhbmdsZVNjYWxlIiwiZ2V0T3V0cHV0QW5nbGVTY2FsZSIsImdldE91dHB1dFdlaWdodCIsImdldE91dHB1dERlc3RpbmF0aW9uSWQiLCJnZXRPdXRwdXRUeXBlIiwiZ2V0T3V0cHV0VHJhbnNsYXRpb25YIiwiZ2V0U2NhbGUiLCJnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWCIsImdldE91dHB1dFRyYW5zbGF0aW9uWSIsImdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZIiwiZ2V0T3V0cHV0QW5nbGUiLCJnZXRPdXRwdXRTY2FsZUFuZ2xlIiwiZ2V0T3V0cHV0UmVmbGVjdCIsImdldFBhcnRpY2xlQ291bnQiLCJtb2JpbGl0eSIsImdldFBhcnRpY2xlTW9iaWxpdHkiLCJkZWxheSIsImdldFBhcnRpY2xlRGVsYXkiLCJhY2NlbGVyYXRpb24iLCJnZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbiIsInJhZGl1cyIsImdldFBhcnRpY2xlUmFkaXVzIiwiZ2V0UGFydGljbGVQb3NpdGlvbiIsInN0cmFuZCIsImluaXRpYWxQb3NpdGlvbiIsImxhc3RQb3NpdGlvbiIsImxhc3RHcmF2aXR5IiwidmVsb2NpdHkiLCJmb3JjZSIsInRhcmdldFRyYW5zbGF0aW9uIiwidGFyZ2V0QW5nbGUiLCJpc0ludmVydGVkIiwibm9ybWFsaXplUGFyYW1ldGVyVmFsdWUiLCJub3JtYWxpemFpdGlvblBvc2l0aW9uIiwicGFyZW50R3Jhdml0eSIsInRyYW5zbGF0aW9uU2NhbGUiLCJzdHJhbmRDb3VudCIsIndpbmREaXJlY3Rpb24iLCJ0aHJlc2hvbGRWYWx1ZSIsImFpclJlc2lzdGFuY2UiLCJ0b3RhbFJhZGlhbiIsImN1cnJlbnRHcmF2aXR5IiwiZGlyZWN0aW9uIiwibmV3RGlyZWN0aW9uIiwicGFyYW1ldGVyVmFsdWVNaW5pbXVtIiwicGFyYW1ldGVyVmFsdWVNYXhpbXVtIiwib3V0cHV0IiwidmFsdWVCZWxvd01pbmltdW0iLCJ2YWx1ZUV4Y2VlZGVkTWF4aW11bSIsInBhcmFtZXRlck1pbmltdW0iLCJwYXJhbWV0ZXJNYXhpbXVtIiwicGFyYW1ldGVyRGVmYXVsdCIsIm5vcm1hbGl6ZWRNaW5pbXVtIiwibm9ybWFsaXplZE1heGltdW0iLCJub3JtYWxpemVkRGVmYXVsdCIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJtaW5Ob3JtVmFsdWUiLCJtYXhOb3JtVmFsdWUiLCJtaWRkbGVOb3JtVmFsdWUiLCJtaWRkbGVWYWx1ZSIsImdldFJhbmdlVmFsdWUiLCJwYXJhbVZhbHVlIiwic2lnbiIsIm5MZW5ndGgiLCJwTGVuZ3RoIiwiUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMiLCJDdWJpc21QaHlzaWNzUGFyYW1ldGVyIiwiQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24iLCJQb3NpdGlvbiIsIkFuZ2xlIiwiVHlwZSIsIkVmZmVjdGl2ZUZvcmNlcyIsIkdyYXZpdHkiLCJXaW5kIiwiUGh5c2ljc1NldHRpbmdzIiwiTm9ybWFsaXphdGlvbiIsIk1pbmltdW0iLCJNYXhpbXVtIiwiRGVmYXVsdCIsIlJlZmxlY3QiLCJXZWlnaHQiLCJJbnB1dCIsIk91dHB1dCIsIlZlcnRpY2VzIiwicGh5c2ljc1NldHRpbmdJbmRleCIsIl9pc0N1bGxpbmciLCJfaXNQcmVtdWx0aXBsaWVkQWxwaGEiLCJfYW5pc29ydG9weSIsIl9tb2RlbENvbG9yIiwiQ3ViaXNtVGV4dHVyZUNvbG9yIiwiX212cE1hdHJpeDR4NCIsInJlbmRlcmVyIiwiZHJhd01vZGVsIiwiZG9EcmF3TW9kZWwiLCJzZXRNdnBNYXRyaXgiLCJtYXRyaXg0NCIsImdldE12cE1hdHJpeCIsInNldE1vZGVsQ29sb3IiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsIlIiLCJHIiwiQiIsIkEiLCJnZXRNb2RlbENvbG9yIiwic2V0SXNQcmVtdWx0aXBsaWVkQWxwaGEiLCJlbmFibGUiLCJpc1ByZW11bHRpcGxpZWRBbHBoYSIsInNldElzQ3VsbGluZyIsImN1bGxpbmciLCJpc0N1bGxpbmciLCJzZXRBbmlzb3Ryb3B5IiwibiIsImdldEFuaXNvdHJvcHkiLCJzX2luc3RhbmNlIiwic192aWV3cG9ydCIsInNfZmJvIiwiX21hc2tSZW5kZXJUZXh0dXJlIiwiX2NvbG9yQnVmZmVyIiwiX2N1cnJlbnRGcmFtZU5vIiwiX2NsaXBwaW5nTWFza0J1ZmZlclNpemUiLCJfY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2siLCJfY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXciLCJfY2hhbm5lbENvbG9ycyIsIl90bXBCb3VuZHNPbk1vZGVsIiwiY3NtUmVjdCIsIl90bXBNYXRyaXgiLCJfdG1wTWF0cml4Rm9yTWFzayIsIl90bXBNYXRyaXhGb3JEcmF3IiwiX21hc2tUZXh0dXJlIiwidG1wIiwiZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yIiwiY2hhbm5lbE5vIiwiZ2V0TWFza1JlbmRlclRleHR1cmUiLCJ0ZXh0dXJlIiwiZnJhbWVObyIsImdsIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIkxJTkVBUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIiwic2V0R0wiLCJjYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyIsImNsaXBwaW5nQ29udGV4dCIsImNsaXBwZWREcmF3VG90YWxNaW5YIiwiY2xpcHBlZERyYXdUb3RhbE1pblkiLCJjbGlwcGVkRHJhd1RvdGFsTWF4WCIsIk1JTl9WQUxVRSIsImNsaXBwZWREcmF3VG90YWxNYXhZIiwiY2xpcHBlZERyYXdDb3VudCIsIl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QiLCJjbGlwcGVkRHJhd2FibGVJbmRleCIsImRyYXdhYmxlVmVydGV4Q291bnQiLCJkcmF3YWJsZVZlcnRleGVzIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsInBpIiwiX2FsbENsaXBwZWREcmF3UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiX2lzVXNpbmciLCJkZWxldGVGcmFtZWJ1ZmZlciIsImRlbGV0ZVRleHR1cmUiLCJkcmF3YWJsZU1hc2tzIiwiZHJhd2FibGVNYXNrQ291bnRzIiwiZmluZFNhbWVDbGlwIiwiQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IiwiYWRkQ2xpcHBlZERyYXdhYmxlIiwic2V0dXBDbGlwcGluZ0NvbnRleHQiLCJ1c2luZ0NsaXBDb3VudCIsImNsaXBJbmRleCIsImNjIiwidmlld3BvcnQiLCJwcmVEcmF3Iiwic2V0dXBMYXlvdXRCb3VuZHMiLCJjbGVhckNvbG9yIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiY2xpcENvbnRleHQiLCJhbGxDbGlwZWREcmF3UmVjdCIsImxheW91dEJvdW5kc09uVGV4MDEiLCJfbGF5b3V0Qm91bmRzIiwic2V0UmVjdCIsImV4cGFuZCIsIl9tYXRyaXhGb3JNYXNrIiwiX21hdHJpeEZvckRyYXciLCJjbGlwRHJhd0NvdW50IiwiX2NsaXBwaW5nSWRDb3VudCIsImNsaXBEcmF3SW5kZXgiLCJfY2xpcHBpbmdJZExpc3QiLCJzZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwiZHJhd01lc2giLCJzYW1lQ291bnQiLCJjbGlwSWQiLCJkaXYiLCJtb2QiLCJjdXJDbGlwSW5kZXgiLCJsYXlvdXRDb3VudCIsIl9sYXlvdXRDaGFubmVsTm8iLCJ4cG9zIiwieXBvcyIsImdldENvbG9yQnVmZmVyIiwiZ2V0Q2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXciLCJzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSIsIkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCIsIm1hbmFnZXIiLCJjbGlwcGluZ0RyYXdhYmxlSW5kaWNlcyIsImNsaXBDb3VudCIsIl9vd25lciIsInB1c2giLCJnZXRDbGlwcGluZ01hbmFnZXIiLCJzZXRHbCIsIl9zaGFkZXJTZXRzIiwiZ2V0SW5zdGFuY2UiLCJDdWJpc21TaGFkZXJfV2ViR0wiLCJkZWxldGVJbnN0YW5jZSIsInJlbGVhc2VTaGFkZXJQcm9ncmFtIiwic2V0dXBTaGFkZXJQcm9ncmFtIiwidGV4dHVyZUlkIiwidmVydGV4Q291bnQiLCJ2ZXJ0ZXhBcnJheSIsImluZGV4QXJyYXkiLCJ1dkFycmF5IiwiYnVmZmVyRGF0YSIsImNvbG9yQmxlbmRNb2RlIiwiYmFzZUNvbG9yIiwibWF0cml4NHg0IiwiaW52ZXJ0ZWRNYXNrIiwiU1JDX0NPTE9SIiwiRFNUX0NPTE9SIiwiU1JDX0FMUEhBIiwiRFNUX0FMUEhBIiwiZ2VuZXJhdGVTaGFkZXJzIiwiZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayIsInNoYWRlclNldCIsIlNoYWRlck5hbWVzIiwiU2hhZGVyTmFtZXNfU2V0dXBNYXNrIiwidXNlUHJvZ3JhbSIsInNoYWRlclByb2dyYW0iLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ1bmlmb3JtMWkiLCJzYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiIsInZlcnRleCIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJEWU5BTUlDX0RSQVciLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJ1diIsImF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24iLCJjb2xvckNoYW5uZWwiLCJ1bmlmb3JtNGYiLCJ1bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiIsInVuaWZvcm1NYXRyaXg0ZnYiLCJ1bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uIiwicmVjdCIsInVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiIsImdldFJpZ2h0IiwiZ2V0Qm90dG9tIiwiWkVSTyIsIk9ORV9NSU5VU19TUkNfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwibWFza2VkIiwiZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyIsIkN1YmlzbVNoYWRlclNldCIsIlNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSIsIk9ORSIsIlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSIsIlNoYWRlck5hbWVzX011bHRQcmVtdWx0aXBsaWVkQWxwaGEiLCJURVhUVVJFMSIsInRleCIsInNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uIiwidW5pZm9ybU1hdHJpeExvY2F0aW9uIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImRlbGV0ZVByb2dyYW0iLCJsb2FkU2hhZGVyUHJvZ3JhbSIsInZlcnRleFNoYWRlclNyY1NldHVwTWFzayIsImZyYWdtZW50U2hhZGVyU3Jjc2V0dXBNYXNrIiwidmVydGV4U2hhZGVyU3JjIiwiZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEiLCJ2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQiLCJmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGEiLCJmcmFnbWVudFNoYWRlclNyY01hc2tJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSIsImdldEF0dHJpYkxvY2F0aW9uIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJjcmVhdGVQcm9ncmFtIiwidmVydFNoYWRlciIsImNvbXBpbGVTaGFkZXJTb3VyY2UiLCJWRVJURVhfU0hBREVSIiwiZnJhZ1NoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZGVsZXRlU2hhZGVyIiwic2hhZGVyVHlwZSIsInNoYWRlclNvdXJjZSIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayIsIl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3IiwiX2NsaXBwaW5nTWFuYWdlciIsImZpcnN0RHJhdyIsIl90ZXh0dXJlcyIsIl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdCIsIl9idWZmZXJEYXRhIiwiV2ViR0xCdWZmZXIiLCJyZXNpemUiLCJtb2RlbFRleHR1cmVObyIsImdsVGV4dHVyZSIsImdldEJpbmRlZFRleHR1cmVzIiwiZGVsZXRlQnVmZmVyIiwicmVuZGVyT3JkZXIiLCJvcmRlciIsInNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXciLCJ0ZXh0dXJlTm8iLCJpbmRleENvdW50IiwiQ1VMTF9GQUNFIiwiZGlzYWJsZSIsImZyb250RmFjZSIsIkNDVyIsImRyYXd0ZXh0dXJlIiwibW9kZWxDb2xvclJHQkEiLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJVTlNJR05FRF9TSE9SVCIsImRvU3RhdGljUmVsZWFzZSIsInNldFJlbmRlclN0YXRlIiwiZmJvIiwiZ2V0RXh0ZW5zaW9uIiwiU0NJU1NPUl9URVNUIiwiU1RFTkNJTF9URVNUIiwiREVQVEhfVEVTVCIsIkNXIiwiQkxFTkQiLCJjb2xvck1hc2siLCJjbGlwIiwiY3NtUGFpciIsIl9rZXlWYWx1ZXMiLCJfZHVtbXlWYWx1ZSIsIl9zaXplIiwiQXJyYXkiLCJmb3VuZCIsIm5ld1NpemUiLCJmaXRUb1NpemUiLCJEZWZhdWx0U2l6ZSIsIml0ZXJhdG9yIiwiX2luZGV4Iiwic3BsaWNlIiwiZHVtcEFzSW50IiwiaWR4IiwiX21hcCIsInByZURlY3JlbWVudCIsImRlY3JlbWVudCIsIml0ZW9sZCIsImdldENlbnRlclgiLCJnZXRDZW50ZXJZIiwiYXBwZW5kIiwic3Vic3RyIiwiZXhwYW5zaW9uIiwiZ2V0Qnl0ZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiaXNMZXNzIiwiaXNHcmVhdCIsImlzRW1wdHkiLCJpbml0aWFsQ2FwYWNpdHkiLCJfcHRyIiwiX2NhcGFjaXR5Iiwic19kZWZhdWx0U2l6ZSIsImFzc2lnbiIsImNhbGxQbGFjZW1lbnROZXciLCJzdWIiLCJpbnNlcnQiLCJkc3RTaSIsInNyY1NpIiwic3JjRWkiLCJhZGRDb3VudCIsImFkZFNpemUiLCJfdmVjdG9yIiwicmVtb3ZlIiwiZ2V0T2Zmc2V0IiwibmV3VmVjdG9yIiwic3Vic3RpdHV0aW9uIiwiQ3ViaXNtTG9nUHJpbnQiLCJsZXZlbCIsImZtdCIsImFyZ3MiLCJDdWJpc21EZWJ1ZyIsInByaW50IiwiQ3ViaXNtTG9nUHJpbnRJbiIsImV4cHIiLCJjb25zb2xlIiwiYXNzZXJ0IiwiQ3ViaXNtTG9nVmVyYm9zZSIsIkxvZ0xldmVsX1ZlcmJvc2UiLCJMb2dMZXZlbF9EZWJ1ZyIsIkxvZ0xldmVsX0luZm8iLCJMb2dMZXZlbF9XYXJuaW5nIiwiTG9nTGV2ZWxfRXJyb3IiLCJsb2dMZXZlbCIsImZvcm1hdCIsImxvZ1ByaW50IiwiZHVtcEJ5dGVzIiwiQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSCIsImRlZmF1bHRWYWx1ZSIsImluZGVudCIsImVycm9yVmFsdWUiLCJzZXRFcnJvck5vdEZvckNsaWVudENhbGwiLCJudWxsVmFsdWUiLCJzX2R1bW15S2V5cyIsImlzQm9vbCIsImlzRmxvYXQiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJpc01hcCIsImVxdWFscyIsImlzU3RhdGljIiwiZXJyb3JTdHIiLCJKc29uRXJyb3IiLCJKc29uQm9vbGVhbiIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJKc29uTnVsbHZhbHVlIiwiX2Vycm9yIiwiX2xpbmVDb3VudCIsIl9yb290IiwicGFyc2VCeXRlcyIsImFycmF5QnVmZmVyVG9TdHJpbmciLCJ1aW50OEFycmF5IiwiVWludDhBcnJheSIsInN0ciIsImxlbiIsInBhZCIsInRvU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RyYnVmIiwiZW5kUG9zIiwiZGVjb2RlQnVmZmVyIiwicGFyc2VWYWx1ZSIsIkpzb25TdHJpbmciLCJnZXRQYXJzZUVycm9yIiwiY2hlY2tFbmRPZkZpbGUiLCJvdXRFbmRQb3MiLCJvIiwiYWZ0ZXJTdHJpbmciLCJzdHJ0b2QiLCJpbmRleE9mIiwiSnNvbkZsb2F0IiwicGFyc2VTdHJpbmciLCJwYXJzZUFycmF5IiwicGFyc2VPYmplY3QiLCJzdHJpbmciLCJidWZTdGFydCIsIkpzb25NYXAiLCJsb2NhbFJldEVuZFBvczIiLCJvayIsIkZPUl9MT09QIiwiRk9SX0xPT1AyIiwicHV0IiwiRk9SX0xPT1AzIiwiSnNvbkFycmF5IiwibG9jYWxSZXRFbmRwb3MyIiwiX3ZhbHVlIiwiX3N0cmluZ0J1ZmZlciIsInBhcnNlSW50Iiwicm91bmQiLCJfYm9vbFZhbHVlIiwiX2lzU3RhdGljIiwiX2FycmF5Iiwic3RyaW5nQnVmZmVyIiwiaXRlciIsIl9rZXlzIiwiQ2FudmFzU2l6ZSIsIlZpZXdTY2FsZSIsIlZpZXdNYXhTY2FsZSIsIlZpZXdNaW5TY2FsZSIsIlZpZXdMb2dpY2FsTGVmdCIsIlZpZXdMb2dpY2FsUmlnaHQiLCJWaWV3TG9naWNhbEJvdHRvbSIsIlZpZXdMb2dpY2FsVG9wIiwiVmlld0xvZ2ljYWxNYXhMZWZ0IiwiVmlld0xvZ2ljYWxNYXhSaWdodCIsIlZpZXdMb2dpY2FsTWF4Qm90dG9tIiwiVmlld0xvZ2ljYWxNYXhUb3AiLCJSZXNvdXJjZXNQYXRoIiwiQmFja0ltYWdlTmFtZSIsIlBvd2VySW1hZ2VOYW1lIiwiTW9kZWxEaXIiLCJNb2RlbERpclNpemUiLCJNb3Rpb25Hcm91cElkbGUiLCJNb3Rpb25Hcm91cFRhcEJvZHkiLCJIaXRBcmVhTmFtZUhlYWQiLCJIaXRBcmVhTmFtZUJvZHkiLCJQcmlvcml0eU5vbmUiLCJQcmlvcml0eUlkbGUiLCJQcmlvcml0eU5vcm1hbCIsIlByaW9yaXR5Rm9yY2UiLCJEZWJ1Z0xvZ0VuYWJsZSIsIkRlYnVnVG91Y2hMb2dFbmFibGUiLCJDdWJpc21Mb2dnaW5nTGV2ZWwiLCJSZW5kZXJUYXJnZXRXaWR0aCIsIlJlbmRlclRhcmdldEhlaWdodCIsImNhbnZhcyIsImZyYW1lQnVmZmVyIiwiX2NhcHR1cmVkIiwiX21vdXNlWCIsIl9tb3VzZVkiLCJfaXNFbmQiLCJfY3ViaXNtT3B0aW9uIiwiX3ZpZXciLCJMQXBwVmlldyIsIl90ZXh0dXJlTWFuYWdlciIsIkxBcHBUZXh0dXJlTWFuYWdlciIsIkxBcHBEZWxlZ2F0ZSIsInJlbGVhc2VJbnN0YW5jZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIkxBcHBEZWZpbmUiLCJfcmVzaXplQ2FudmFzIiwiZ2V0Q29udGV4dCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImdldFBhcmFtZXRlciIsIkZSQU1FQlVGRkVSX0JJTkRJTkciLCJibGVuZEZ1bmMiLCJvblRvdWNoQmVnYW4iLCJvblRvdWNoTW92ZWQiLCJvblRvdWNoRW5kZWQiLCJvblRvdWNoQ2FuY2VsIiwib25DbGlja0JlZ2FuIiwib25Nb3VzZU1vdmVkIiwib25DbGlja0VuZGVkIiwiaW5pdGlhbGl6ZUN1YmlzbSIsImFsZXJ0IiwiaW5uZXJIVE1MIiwib25SZXNpemUiLCJpbml0aWFsaXplU3ByaXRlIiwiTEFwcExpdmUyRE1hbmFnZXIiLCJydW4iLCJMQXBwUGFsIiwidXBkYXRlVGltZSIsImRlcHRoRnVuYyIsIkxFUVVBTCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJjbGVhckRlcHRoIiwicmVuZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidmVydGV4U2hhZGVySWQiLCJwcmludE1lc3NhZ2UiLCJmcmFnbWVudFNoYWRlcklkIiwicHJvZ3JhbUlkIiwiZ2V0VmlldyIsImdldFRleHR1cmVNYW5hZ2VyIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib25FdmVudExpc3RlbmVkIiwibGl2ZTJETWFuYWdlciIsIm5leHRTY2VuZSIsIm9uTGlzdGVuZWQiLCJlIiwicG9zWCIsInBhZ2VYIiwicG9zWSIsInBhZ2VZIiwib25Ub3VjaGVzQmVnYW4iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9uVG91Y2hlc01vdmVkIiwib25Ub3VjaGVzRW5kZWQiLCJjaGFuZ2VkVG91Y2hlcyIsIl9maW5pc2hlZE1vdGlvbiIsInNlbGYiLCJfdmlld01hdHJpeCIsIl9tb2RlbHMiLCJfc2NlbmVJbmRleCIsImNoYW5nZVNjZW5lIiwibm8iLCJyZWxlYXNlQWxsTW9kZWwiLCJvbkRyYWciLCJvblRhcCIsInRvRml4ZWQiLCJoaXRUZXN0Iiwic2V0UmFuZG9tRXhwcmVzc2lvbiIsInN0YXJ0UmFuZG9tTW90aW9uIiwib25VcGRhdGUiLCJtb2RlbENvdW50IiwicHJvamVjdGlvbiIsImRyYXciLCJtb2RlbFBhdGgiLCJtb2RlbEpzb25OYW1lIiwiTEFwcE1vZGVsIiwibG9hZEFzc2V0cyIsInNldFZpZXdNYXRyaXgiLCJzZXROdW1FeHByZXNzaW9uIiwiTG9hZFN0ZXAiLCJfbW9kZWxTZXR0aW5nIiwiX21vZGVsSG9tZURpciIsIl9leWVCbGlua0lkcyIsIl9saXBTeW5jSWRzIiwiX2V4cHJlc3Npb25zIiwiX2hpdEFyZWEiLCJfdXNlckFyZWEiLCJfaWRQYXJhbUFuZ2xlWCIsIl9pZFBhcmFtQW5nbGVZIiwiX2lkUGFyYW1BbmdsZVoiLCJfaWRQYXJhbUV5ZUJhbGxYIiwiX2lkUGFyYW1FeWVCYWxsWSIsIl9pZFBhcmFtQm9keUFuZ2xlWCIsIl9zdGF0ZSIsIkxvYWRBc3NldHMiLCJfZXhwcmVzc2lvbkNvdW50IiwiX3RleHR1cmVDb3VudCIsIl9tb3Rpb25Db3VudCIsIl9hbGxNb3Rpb25Db3VudCIsIl93YXZGaWxlSGFuZGxlciIsIkxBcHBXYXZGaWxlSGFuZGxlciIsImRpciIsImZpbGVOYW1lIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsInNldHRpbmciLCJieXRlTGVuZ3RoIiwiTG9hZE1vZGVsIiwic2V0dXBNb2RlbCIsIm1vZGVsRmlsZU5hbWUiLCJMb2FkRXhwcmVzc2lvbiIsImxvYWRDdWJpc21FeHByZXNzaW9uIiwiV2FpdExvYWRNb2RlbCIsImV4cHJlc3Npb25OYW1lIiwiZXhwcmVzc2lvbkZpbGVOYW1lIiwiTG9hZFBoeXNpY3MiLCJsb2FkQ3ViaXNtUGh5c2ljcyIsIldhaXRMb2FkRXhwcmVzc2lvbiIsInBoeXNpY3NGaWxlTmFtZSIsIkxvYWRQb3NlIiwibG9hZEN1YmlzbVBvc2UiLCJXYWl0TG9hZFBoeXNpY3MiLCJwb3NlRmlsZU5hbWUiLCJTZXR1cEV5ZUJsaW5rIiwic2V0dXBFeWVCbGluayIsIldhaXRMb2FkUG9zZSIsIlNldHVwQnJlYXRoIiwic2V0dXBCcmVhdGgiLCJMb2FkVXNlckRhdGEiLCJ1c2VyRGF0YUZpbGUiLCJTZXR1cEV5ZUJsaW5rSWRzIiwic2V0dXBFeWVCbGlua0lkcyIsIldhaXRMb2FkVXNlckRhdGEiLCJleWVCbGlua0lkQ291bnQiLCJTZXR1cExpcFN5bmNJZHMiLCJzZXR1cExpcFN5bmNJZHMiLCJsaXBTeW5jSWRDb3VudCIsIlNldHVwTGF5b3V0Iiwic2V0dXBMYXlvdXQiLCJMb2FkTW90aW9uIiwibG9hZEN1YmlzbU1vdGlvbiIsIldhaXRMb2FkTW90aW9uIiwiZ3JvdXAiLCJtb3Rpb25Hcm91cENvdW50IiwicHJlTG9hZE1vdGlvbkdyb3VwIiwiTG9hZFRleHR1cmUiLCJzZXR1cFRleHR1cmVzIiwibW9kZWxUZXh0dXJlTnVtYmVyIiwidGV4dHVyZVBhdGgiLCJjcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUiLCJ0ZXh0dXJlSW5mbyIsIkNvbXBsZXRlU2V0dXAiLCJXYWl0TG9hZFRleHR1cmUiLCJyZWxvYWRSZW5kZXJlciIsImdldERlbHRhVGltZSIsIm1vdGlvblVwZGF0ZWQiLCJnZXRSbXMiLCJtb3Rpb25GaWxlTmFtZSIsImZhZGVUaW1lIiwidm9pY2UiLCJsb2NhbGVDb21wYXJlIiwicGF0aCIsInN0YXJ0IiwiZmxvb3IiLCJzZXRFeHByZXNzaW9uIiwiZXhwcmVzc2lvbklkIiwiZXhwcmVzc2lvbk51bWJlciIsImhpdEFyZW5hTmFtZSIsImRyYXdJZCIsInRtcE1vdGlvbiIsInJlbGVhc2VNb3Rpb25zIiwicmVsZWFzZUV4cHJlc3Npb25zIiwiZG9EcmF3IiwibWF0cml4IiwibG9hZEZpbGVBc0J5dGVzIiwiZmlsZVBhdGgiLCJzX2RlbHRhVGltZSIsInNfY3VycmVudEZyYW1lIiwiRGF0ZSIsIm5vdyIsInNfbGFzdEZyYW1lIiwibGFzdFVwZGF0ZSIsIl9yZWN0IiwiUmVjdCIsInVwIiwiZG93biIsIl90ZXh0dXJlIiwiX3ZlcnRleEJ1ZmZlciIsIl91dkJ1ZmZlciIsIl9pbmRleEJ1ZmZlciIsIl9wb3NpdGlvbkxvY2F0aW9uIiwiX3V2TG9jYXRpb24iLCJfdGV4dHVyZUxvY2F0aW9uIiwiX3Bvc2l0aW9uQXJyYXkiLCJfdXZBcnJheSIsIl9pbmRleEFycmF5IiwiX2ZpcnN0RHJhdyIsImdldFRleHR1cmUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIlVpbnQxNkFycmF5IiwiU1RBVElDX0RSQVciLCJMQXBwU3ByaXRlIiwidXNlUHJlbXVsdGlwbHkiLCJ1c2VQcmVtdWx0cGx5IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiZ2VuZXJhdGVNaXBtYXAiLCJUZXh0dXJlSW5mbyIsInJlbGVhc2VUZXh0dXJlcyIsInJlbGVhc2VUZXh0dXJlQnlUZXh0dXJlIiwicmVsZWFzZVRleHR1cmVCeUZpbGVQYXRoIiwiX3Byb2dyYW1JZCIsIl9iYWNrIiwiX2dlYXIiLCJfdG91Y2hNYW5hZ2VyIiwiVG91Y2hNYW5hZ2VyIiwiX2RldmljZVRvU2NyZWVuIiwicmF0aW8iLCJzY3JlZW5XIiwic2NyZWVuSCIsImZsdXNoIiwiaW1hZ2VOYW1lIiwidGV4dHVyZU1hbmFnZXIiLCJyZXNvdXJjZXNQYXRoIiwiZndpZHRoIiwiZmhlaWdodCIsInRvdWNoZXNCZWdhbiIsInZpZXdYIiwidHJhbnNmb3JtVmlld1giLCJ2aWV3WSIsInRyYW5zZm9ybVZpZXdZIiwidG91Y2hlc01vdmVkIiwiZGV2aWNlWCIsInNjcmVlblgiLCJkZXZpY2VZIiwic2NyZWVuWSIsInRyYW5zZm9ybVNjcmVlblgiLCJ0cmFuc2Zvcm1TY3JlZW5ZIiwiX2xvYWRGaWxldG9CeXRlcyIsIl9ieXRlUmVhZGVyIiwiX2ZpbGVCeXRlIiwiX2ZpbGVEYXRhVmlldyIsIkRhdGFWaWV3IiwiX2ZpbGVTaXplIiwiX3BjbURhdGEiLCJfbGFzdFJtcyIsIl9zYW1wbGVPZmZzZXQiLCJfd2F2RmlsZUluZm8iLCJXYXZGaWxlSW5mbyIsIkJ5dGVSZWFkZXIiLCJnb2FsT2Zmc2V0Iiwicm1zIiwiX3NhbXBsZXNQZXJDaGFubmVsIiwiX3NhbXBsaW5nUmF0ZSIsImNoYW5uZWxDb3VudCIsIl9udW1iZXJPZkNoYW5uZWxzIiwic2FtcGxlQ291bnQiLCJwY20iLCJsb2FkV2F2RmlsZSIsInJlbGVhc2VQY21EYXRhIiwicmVzcG9uY2UiLCJfcmVhZE9mZnNldCIsIl9maWxlTmFtZSIsImdldENoZWNrU2lnbmF0dXJlIiwiRXJyb3IiLCJnZXQzMkxpdHRsZUVuZGlhbiIsImZtdENodW5rU2l6ZSIsImdldDE2TGl0dGxlRW5kaWFuIiwiX2JpdHNQZXJTYW1wbGUiLCJkYXRhQ2h1bmtTaXplIiwiZ2V0UGNtU2FtcGxlIiwicGNtMzIiLCJnZXQ4IiwiZ2V0MjRMaXR0bGVFbmRpYW4iLCJnZXRVaW50OCIsInJlZmVyZW5jZSIsImdldFNpZ25hdHVyZSIsInJlZmVyZW5jZVN0cmluZyIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwic2lnbmF0dXJlT2Zmc2V0Iiwib25iZWZvcmV1bmxvYWQiLCJvbnJlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIm9yaWdpbiIsIl9zdGFydFgiLCJfc3RhcnRZIiwiX2xhc3RYIiwiX2xhc3RZIiwiX2xhc3RYMSIsIl9sYXN0WTEiLCJfbGFzdFgyIiwiX2xhc3RZMiIsIl9sYXN0VG91Y2hEaXN0YW5jZSIsIl9kZWx0YVgiLCJfZGVsdGFZIiwiX3NjYWxlIiwiX3RvdWNoU2luZ2xlIiwiX2ZsaXBBdmFpbGFibGUiLCJnZXREZWx0YVgiLCJnZXREZWx0YVkiLCJnZXRTdGFydFgiLCJnZXRTdGFydFkiLCJnZXRYMSIsImdldFkxIiwiZ2V0WDIiLCJnZXRZMiIsImlzU2luZ2xlVG91Y2giLCJpc0ZsaWNrQXZhaWxhYmxlIiwiZGlzYWJsZUZsaWNrIiwiZ2V0RmxpY2tEaXN0YW5jZSIsImNhbGN1bGF0ZURpc3RhbmNlIiwieTEiLCJ5MiIsImNhbGN1bGF0ZU1vdmluZ0Ftb3VudCIsInYxIiwidjIiLCJhYnNvbHV0ZVZhbHVlMSIsImFic29sdXRlVmFsdWUyIiwiZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInN1cHBvcnQiLCJTeW1ib2wiLCJCbG9iIiwidmlld0NsYXNzZXMiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3Iiwib2JqIiwiY2FsbCIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJIZWFkZXJzIiwiaGVhZGVycyIsImZvckVhY2giLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25lcnJvciIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsImJ5dGVPZmZzZXQiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwib2xkVmFsdWUiLCJoYXMiLCJoYXNPd25Qcm9wZXJ0eSIsInRoaXNBcmciLCJrZXlzIiwiZW50cmllcyIsIm1ldGhvZHMiLCJSZXF1ZXN0IiwiaW5wdXQiLCJtZXRob2QiLCJ1cGNhc2VkIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImNhY2hlIiwicmVQYXJhbVNlYXJjaCIsImdldFRpbWUiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJsb2NhdGlvbiIsIkRPTUV4Y2VwdGlvbiIsImVyciIsInN0YWNrIiwiY29uc3RydWN0b3IiLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwic2V0VGltZW91dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJvcGVuIiwiaHJlZiIsImZpeFVybCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInByb3AiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=